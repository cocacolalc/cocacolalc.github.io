{"total":24,"pageSize":10,"pageCount":3,"data":[{"title":"nodejs-1","slug":"nodejs笔记","date":"2020-09-18T11:14:53.000Z","updated":"2021-09-14T03:19:27.156Z","comments":true,"top":null,"path":"api/articles/nodejs笔记.json","excerpt":null,"keywords":null,"cover":"https://images.weserv.nl/?url=https://gitee.com/cocacolalc/imgs-hexo/raw/master/img/photo-1625051939433-b1291104952c.jpg","content":"<p><img src=\"https://images.weserv.nl/?url=https://gitee.com/cocacolalc/imgs-hexo/raw/master/img/photo-1625051939433-b1291104952c.jpg\" alt=\"img\"></p>\n<h1 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node js\"></a>node js</h1><p>nodejs是基于google v8引擎，在服务器端支持javascript的一种运行环境。</p>\n<p>特点：单线程、非阻塞I/O、事件驱动</p>\n<h4 id=\"node运行js文件的路径：\"><a href=\"#node运行js文件的路径：\" class=\"headerlink\" title=\"node运行js文件的路径：\"></a>node运行js文件的路径：</h4><p>相对路径：node命令前面的路径（运行路径）</p>\n<p>绝对路径        </p>\n<h4 id=\"顶层对象\"><a href=\"#顶层对象\" class=\"headerlink\" title=\"顶层对象\"></a>顶层对象</h4><p>浏览器里是window，node里是global，ES6中提到同义顶层对象用globalThis，</p>\n<p>ES6中将顶层对象的属性与全局变量逐步脱钩。</p>\n<h4 id=\"默认的全局变量\"><a href=\"#默认的全局变量\" class=\"headerlink\" title=\"默认的全局变量\"></a>默认的全局变量</h4><p>__filename当前js文件带有完整绝对路径的文件名</p>\n<p>__dirname获得当前执行文件所在目录的完整目录名</p>\n<h4 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h4><p>Buffer 被引入用以帮助开发者处理二进制数据，在此生态系统中传统上只处理字符串而不是二进制数据。</p>\n<p>1、指定大小：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> buffer=Buffer.alloc(<span class=\"hljs-number\">20</span>);<span class=\"hljs-comment\">//length</span><br><span class=\"hljs-comment\">//&lt;Buffer 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>2、</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> buf2=Buffer.from(<span class=\"hljs-string\">&quot;this is buffer&quot;</span>);<span class=\"hljs-comment\">//string</span><br><span class=\"hljs-comment\">//&lt;Buffer 74 68 69 73 20 69 73 20 62 75 66 66 65 72&gt;</span><br><span class=\"hljs-keyword\">var</span> s=buf2.toString(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br><span class=\"hljs-comment\">//this is buffer</span><br>buf2.write();<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h4><p>多个js文件的引用方式。</p>\n<p>模块：按照特定的格式写出来的js文件。</p>\n<p>特定的格式：为了引用，模块化规范。</p>\n<p>nodejs里用的是commonjs规范。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sub</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-built_in\">module</span>.exports=&#123;sum,sub&#125;;<span class=\"hljs-comment\">//导出</span><br><span class=\"hljs-built_in\">exports</span>.sum=sum;<span class=\"hljs-comment\">//exports只能用这种方式</span><br><br><br><span class=\"hljs-comment\">//引用</span><br><span class=\"hljs-keyword\">let</span> &#123;sum,sub&#125;=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;路径&quot;</span>);<br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"事件模块\"><a href=\"#事件模块\" class=\"headerlink\" title=\"事件模块\"></a>事件模块</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//内置模块http、fs、events，核心模块</span><br><span class=\"hljs-keyword\">let</span> http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;http&quot;</span>);<br><span class=\"hljs-keyword\">let</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><br><br><span class=\"hljs-comment\">//events是内置的处理事件的模块 EventEmitter</span><br><span class=\"hljs-comment\">//events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。</span><br><span class=\"hljs-comment\">//1、加载事件模块</span><br><span class=\"hljs-keyword\">let</span> EventEmitter=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;events&quot;</span>).EventEmitter;<br><span class=\"hljs-number\">2</span>、实例化一个事件对象<br><span class=\"hljs-keyword\">let</span> event=<span class=\"hljs-keyword\">new</span> EventEmitter();<br><span class=\"hljs-comment\">//3、实例提供里两个方法：</span><br>event.on(<span class=\"hljs-string\">&quot;event1&quot;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>)=&gt;</span>&#123;<span class=\"hljs-comment\">//为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。</span><br>  <span class=\"hljs-built_in\">console</span>.log(args)；<br>&#125;)<br><span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    event.emit(<span class=\"hljs-string\">&quot;event1&quot;</span>,<span class=\"hljs-string\">&quot;a&quot;</span>,<span class=\"hljs-string\">&quot;b&quot;</span>,<span class=\"hljs-string\">&quot;c&quot;</span>)<span class=\"hljs-comment\">//触发事件emit(event, [arg1], [arg2], [...])</span><br>&#125;, <span class=\"hljs-number\">1000</span>)<br>event.addListener(<span class=\"hljs-string\">&#x27;event1&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)<br>&#125;)<br>event.on(<span class=\"hljs-string\">&quot;e2&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    event.removeAllListeners(<span class=\"hljs-string\">&#x27;event1&#x27;</span>)<span class=\"hljs-comment\">//只清除一个event.removeListener(&#x27;event1&#x27;,fn)</span><br>&#125;)<br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    event.emit(<span class=\"hljs-string\">&#x27;e2&#x27;</span>)<br>&#125;,<span class=\"hljs-number\">4000</span>)<br><span class=\"hljs-comment\">//实例event提供的方法：</span><br>on(event,函数名)<span class=\"hljs-comment\">//绑定</span><br>addListener(event,函数名)<span class=\"hljs-comment\">//添加</span><br>once(event,函数名)<span class=\"hljs-comment\">//只一次</span><br>removeListener(event,函数名)<span class=\"hljs-comment\">//移除</span><br><span class=\"hljs-comment\">//移除某个监听函数，必须在添加监视的时候，是通过函数名添加，如果是一个匿名函数添加监听不能移除</span><br>removeAllListeners(event)<span class=\"hljs-comment\">//移除所有</span><br>emit(event, [arg1], [arg2], [...])<span class=\"hljs-comment\">//触发</span><br><br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h4><p>模块：按照CommonJS规范写的js文件；</p>\n<p>包：包含js文件和其他附带信息的整体；</p>\n<p>npm：包的管理工具：</p>\n<p>​    1、根据包的名字，下载并按照npmjs.com</p>\n<p>​    2、解决了包之间的依赖关系</p>\n<p>命令</p>\n<p>​    安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">npm install 包<br><br><span class=\"hljs-keyword\">let</span> x=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;包&#x27;</span>)<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Nodejs的文件系统\"><a href=\"#Nodejs的文件系统\" class=\"headerlink\" title=\"Nodejs的文件系统\"></a>Nodejs的文件系统</h4><p>读取文件信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br>fs.stat(<span class=\"hljs-string\">&quot;文件路径&quot;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,stats</span>)=&gt;</span>&#123;<br>  <span class=\"hljs-keyword\">if</span>(err)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;错误&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(stats.isFile()) <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;这是文件&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span>(stats.isDirectory()) <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;这是文件夹&quot;</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(stats)<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>读取文件内容</p>\n<p>​    两个参数：文件路径、回调函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.readFile(<span class=\"hljs-string\">&#x27;文件路径&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,data</span>)=&gt;</span>&#123;&#125;)<span class=\"hljs-comment\">//异步</span><br><span class=\"hljs-keyword\">var</span> data=fs.readFileSync(<span class=\"hljs-string\">&quot;文件路径&quot;</span>，<span class=\"hljs-string\">&quot;编码方式&quot;</span>)；<span class=\"hljs-comment\">//同步读取文件</span><br><br></code></pre></td></tr></table></figure>\n\n<p>读取文件的相对地址：参照物不是当前文件，而是node的启动路径。</p>\n<p>写入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.writeFile(<span class=\"hljs-string\">&quot;文件路径&quot;</span>,<span class=\"hljs-string\">&quot;写入内容&quot;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<span class=\"hljs-comment\">//覆盖之前内容</span><br>fs.writeFileSync()<br><br></code></pre></td></tr></table></figure>\n\n<p>追加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.appendFile(<span class=\"hljs-string\">&quot;文件路径&quot;</span>,<span class=\"hljs-string\">&quot;写入内容&quot;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br>fs.appendFileSync(path,data)<br><br></code></pre></td></tr></table></figure>\n\n<p>异步通过err形参接收错误信息</p>\n<p>同步如果发生错误直接报异常，程序可能中断</p>\n<p>写入文件的方法，当文件名不存在的时候，会自动创建文件，如果文件夹也不存在会报错</p>\n<p>修改文件方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.rename(<span class=\"hljs-string\">&#x27;oldpath&#x27;</span>,<span class=\"hljs-string\">&#x27;newpath&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br>fs.renameSync(<span class=\"hljs-string\">&quot;oldpath&quot;</span>,<span class=\"hljs-string\">&quot;newpath&quot;</span>)<br><br></code></pre></td></tr></table></figure>\n\n<p>删除文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.unlink(path,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br>fs.unlinkSync(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br><br></code></pre></td></tr></table></figure>\n\n<p>创建文件夹</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.mkdir(path,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>读取目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.readdir(path,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,files</span>)=&gt;</span>&#123;&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>删除目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.rmdir(path,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>读取文件流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><span class=\"hljs-comment\">//对于某个文件创建一个读取流</span><br><span class=\"hljs-keyword\">var</span> readStream = fs.createReadStream(<span class=\"hljs-string\">&quot;fs.js&quot;</span>);<br><span class=\"hljs-comment\">//设置读取流的编码</span><br>readStream.setEncoding(<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>);<br><span class=\"hljs-comment\">//绑定一个事件（data事件名）</span><br><span class=\"hljs-comment\">//data这个事件，每次读取一个小块内容的时候，都会触发data事件；</span><br><span class=\"hljs-comment\">//在回调函数中，能够设置一个形参chunk，接收每次读取那一小块内容；</span><br><span class=\"hljs-keyword\">var</span> data = <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-number\">0</span>;<br>readStream.on(<span class=\"hljs-string\">&quot;data&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> &#123;<br>    data += chunk;<br>    <span class=\"hljs-built_in\">console</span>.log(++index);<br>&#125;)<br><span class=\"hljs-comment\">//end事件代表所有内容读取完成</span><br>readStream.on(<span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">//这里代表data里面才是完整的数据</span><br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>写入文件流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><span class=\"hljs-keyword\">var</span> writeStream = fs.createWriteStream(<span class=\"hljs-string\">&quot;fs1.txt&quot;</span>);<br>writeStream.write(<span class=\"hljs-string\">&quot;aaaaaaa&quot;</span>, <span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>writeStream.write(<span class=\"hljs-string\">&quot;bbbbbbb&quot;</span>, <span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>writeStream.end();<br>writeStream.on(<span class=\"hljs-string\">&quot;finish&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;finish&quot;</span>);<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>管道流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><span class=\"hljs-keyword\">var</span> readS = fs.createReadStream(<span class=\"hljs-string\">&quot;fs.txt&quot;</span>);<br><span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">&quot;fs1.txt&quot;</span>);<br>readS.pipe(ws);<span class=\"hljs-comment\">//把读取流和写入流连接起来，把读取的内容直接写入fs1.txt</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"web应用架构\"><a href=\"#web应用架构\" class=\"headerlink\" title=\"web应用架构\"></a>web应用架构</h2><p>client-客户端，一般指浏览器，浏览器可以通过http协议向服务器请求数据。</p>\n<p>server-服务端，一般指web服务器，可以接收客户请求，并向客户端发送响应数据。</p>\n<h5 id=\"http-server\"><a href=\"#http-server\" class=\"headerlink\" title=\"http server\"></a>http server</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//支持web服务的http</span><br><br>*<span class=\"hljs-keyword\">const</span>* http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;http&#x27;</span>)<br><br>*<span class=\"hljs-keyword\">let</span>* count=<span class=\"hljs-number\">0</span><br><br><span class=\"hljs-comment\">//创建一个服务,如果有url访问到了这个服务，回调函数执行</span><br><br><span class=\"hljs-comment\">// 回调函数中，第一个形参request代表的是请求对象，里面存放了请求信息</span><br><br><span class=\"hljs-comment\">// 第二个参数response：响应对象</span><br><br>*<span class=\"hljs-keyword\">var</span>* serve=http.createServer((*request*,*response*)*=&gt;*&#123;<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;有人访问&#x27;</span>+(++count))<br><br>  <span class=\"hljs-comment\">//设置响应头；200是成功 编码 类型</span><br><br>  *response*.writeHead(<span class=\"hljs-number\">200</span>,&#123;<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>:<span class=\"hljs-string\">&#x27;text/html;charset=utf-8&#x27;</span>&#125;)<br><br>  <span class=\"hljs-comment\">// 响应对象中添加数据</span><br><br>  *response*.write(<span class=\"hljs-string\">&#x27;我是相应内容&#x27;</span>,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>)<br><br>  <span class=\"hljs-comment\">// 结束</span><br><br>  *response*.end()<br><br>&#125;)<br><br><span class=\"hljs-comment\">// 把服务监听3000端口</span><br><br>serve.listen(<span class=\"hljs-string\">&#x27;3000&#x27;</span>,(*err*)*=&gt;*&#123;<br><br>  <span class=\"hljs-keyword\">if</span>(*err*) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">console</span>.log(*err*)<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;serve listen at 3000&#x27;</span>)<br><br>&#125;)<br><br><span class=\"hljs-comment\">// url ：http：协议</span><br><br><span class=\"hljs-comment\">// 域名：或者 ip DFS服务器</span><br><br><span class=\"hljs-comment\">// 端口：80默认</span><br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h5><p>http域名或者IP</p>\n<p>端口号</p>\n<p>相对路径</p>\n<h5 id=\"nodejs-http-server\"><a href=\"#nodejs-http-server\" class=\"headerlink\" title=\"nodejs http server\"></a>nodejs http server</h5><p>加载http包</p>\n<p>http.createServer((request,response)=&gt;{</p>\n<p>回调函数</p>\n<p>request：请求对象</p>\n<p>response：响应对象</p>\n<p>server.listen(‘3000’)</p>\n<p>})</p>\n<h5 id=\"http工作原理-过程\"><a href=\"#http工作原理-过程\" class=\"headerlink\" title=\"http工作原理  (过程)\"></a>http工作原理  (过程)</h5><ul>\n<li><p>1  客户端连接到web服务器</p>\n</li>\n<li><p>2  发送http请求</p>\n</li>\n<li><p>3   服务器接收解释请求并返回http响应</p>\n</li>\n<li><p>4  释放连接tcp连接</p>\n</li>\n</ul>\n<h5 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h5><ul>\n<li>专注于文件路径</li>\n</ul>\n<h5 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h5><ul>\n<li>专注于处理url地址</li>\n</ul>\n<h5 id=\"querystring\"><a href=\"#querystring\" class=\"headerlink\" title=\"querystring\"></a>querystring</h5><ul>\n<li>专注于url中使用get请求后面解析参数</li>\n</ul>\n<h5 id=\"解析url\"><a href=\"#解析url\" class=\"headerlink\" title=\"解析url\"></a>解析url</h5><blockquote>\n<p>new  URL(request.url,’http://${request.headers.host}’)</p>\n</blockquote>\n<h5 id=\"get-set\"><a href=\"#get-set\" class=\"headerlink\" title=\"get   set\"></a>get   set</h5><ul>\n<li>get 参数，是拼接在url后面；post参数body</li>\n<li>浏览器地址栏中访问的url</li>\n</ul>\n<h5 id=\"nodejs区分get-post\"><a href=\"#nodejs区分get-post\" class=\"headerlink\" title=\"nodejs区分get post\"></a>nodejs区分get post</h5><p>request.method</p>\n<p>nodejs 从get  post  获取参数数据</p>\n<ul>\n<li>get  获取参数  分析url  </li>\n<li>post获取参数</li>\n</ul>\n<h5 id=\"创建express项目\"><a href=\"#创建express项目\" class=\"headerlink\" title=\"创建express项目\"></a>创建express项目</h5><ul>\n<li>安装一个创建express项目的工具（express生成器）–express-generator</li>\n</ul>\n<p>安装命令：</p>\n<blockquote>\n<p>npm install express-generator -g</p>\n</blockquote>\n<p>全局安装：</p>\n<ul>\n<li>使用这个工具生成一个express项目</li>\n</ul>\n<p>命令是：</p>\n<blockquote>\n<p>express –view=ejs myprogramName </p>\n</blockquote>\n<ul>\n<li><p>myprogramName是项目的名字</p>\n</li>\n<li><p>–view=ejs 设置项目的页面使用的模板引擎；设置模版引擎为ejs pug</p>\n</li>\n<li><p>创建完成项目文件之后； </p>\n</li>\n<li><p>cd myprogramName 命令窗口前面的路径定位到项目文件</p>\n</li>\n<li><p>D:\\work\\Lesson\\202002\\2-165\\Day08\\my1</p>\n</li>\n</ul>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<p>会在my1这个文件夹下寻找package.json，获取dependencies里面的包；并且全部安装；</p>\n<ul>\n<li>启动项目</li>\n</ul>\n<blockquote>\n<p>SET DEBUG=my1:* &amp; npm start</p>\n</blockquote>\n<ul>\n<li>默认是在3000端口号： localhost:3000 127.0.0.1:3000</li>\n</ul>\n<h5 id=\"项目文件：\"><a href=\"#项目文件：\" class=\"headerlink\" title=\"项目文件：\"></a>项目文件：</h5><ul>\n<li><p>bin/www 可以修改服务的端口号：</p>\n</li>\n<li><p>node_modules 所有局部安装的包</p>\n</li>\n<li><p>pulic 存放静态文件的；</p>\n</li>\n<li><p>routes 路由</p>\n</li>\n<li><p>views 页面</p>\n</li>\n<li><p>app.js 启动js</p>\n</li>\n<li><p>package.json npm配置文件</p>\n</li>\n</ul>\n<p>npm i 就是安装的dependencies下的包</p>\n<p>npm start 就是运行的scripts下面start命令</p>\n<h5 id=\"app-js-文件\"><a href=\"#app-js-文件\" class=\"headerlink\" title=\"app.js 文件\"></a>app.js 文件</h5><h5 id=\"路由：\"><a href=\"#路由：\" class=\"headerlink\" title=\"路由：\"></a>路由：</h5><ul>\n<li><p>在routes文件夹下 写路由文件</p>\n</li>\n<li><p>app.js中启用路由：</p>\n</li>\n</ul>\n<h5 id=\"响应返回页面\"><a href=\"#响应返回页面\" class=\"headerlink\" title=\"响应返回页面\"></a>响应返回页面</h5><p>在路由中，使用res.render(“list”)；</p>\n<p>-页面必须放在views下；而且后缀名必须是.ejs</p>\n<h5 id=\"怎么获取url传递的数据：\"><a href=\"#怎么获取url传递的数据：\" class=\"headerlink\" title=\"怎么获取url传递的数据：\"></a>怎么获取url传递的数据：</h5><ul>\n<li><p>get 参数: 在路由 req.query 属性，存放了所有get请求的参数：</p>\n</li>\n<li><p>post 数据 req.body 存储</p>\n</li>\n</ul>\n<h5 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h5><p>req.params</p>\n<h5 id=\"路由的路径是可以用正则表达式\"><a href=\"#路由的路径是可以用正则表达式\" class=\"headerlink\" title=\"路由的路径是可以用正则表达式\"></a>路由的路径是可以用正则表达式</h5><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><ul>\n<li><p>npm i express-generator -g 如果安装过了，不用再安装</p>\n</li>\n<li><p>生成一个项目</p>\n</li>\n</ul>\n<blockquote>\n<p>express –view=ejs xiaou</p>\n</blockquote>\n<blockquote>\n<p>cd xiaou</p>\n</blockquote>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<blockquote>\n<p>npm start</p>\n</blockquote>\n<ul>\n<li><p>把index.html复制到views，并且要ejs后缀；</p>\n</li>\n<li><p>设计一个路由： 设计url地址；访问这个url，</p>\n</li>\n<li><p>routes文件夹下创建一个新的路由文件index.js</p>\n</li>\n</ul>\n<h5 id=\"node-js-1\"><a href=\"#node-js-1\" class=\"headerlink\" title=\"node.js\"></a>node.js</h5><ul>\n<li>单线程</li>\n<li>非阻塞</li>\n<li>事件驱动</li>\n</ul>\n<h5 id=\"模块化commonJS\"><a href=\"#模块化commonJS\" class=\"headerlink\" title=\"模块化commonJS\"></a>模块化commonJS</h5><ul>\n<li>定义模块：</li>\n</ul>\n<p>modules.exporys{}</p>\n<p>modules.exporys.xxx=xx</p>\n<p>exports.xxx=xx</p>\n<ul>\n<li>加载模块：</li>\n</ul>\n<p>通过js（模块）的加载路径：</p>\n<p>const mymoudule=require(‘模块’)</p>\n<p>通过js（模块）的标识：核心模块（nodejs自带的    ）</p>\n<p>const http=require(‘http’)</p>\n<h5 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h5><ul>\n<li>初始化</li>\n<li>绑定事件</li>\n<li>触发事件</li>\n<li>传值：</li>\n</ul>\n<h5 id=\"npm-1\"><a href=\"#npm-1\" class=\"headerlink\" title=\"npm\"></a>npm</h5><ul>\n<li>包：</li>\n<li>全局安装    -g   本地安装</li>\n<li>依赖   和   开发依赖：</li>\n</ul>\n<p>依赖：express   简写–save    -S</p>\n<p>开发依赖：less  简写  –save-dev   -D</p>\n<h5 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h5><h5 id=\"nodejs-http\"><a href=\"#nodejs-http\" class=\"headerlink\" title=\"nodejs  http\"></a>nodejs  http</h5><ul>\n<li><p><a href=\"http://www.ddd.com/\">http://www.ddd.com:80</a>   默认是80</p>\n<h5 id=\"http四个步骤：\"><a href=\"#http四个步骤：\" class=\"headerlink\" title=\"http四个步骤：\"></a>http四个步骤：</h5><ul>\n<li>客户端向服务端发起的连接</li>\n<li>客户端向服务器发送的数据</li>\n<li>服务器响应客户端</li>\n<li>客户端结束连接</li>\n</ul>\n<h5 id=\"nodejs下的一些小模块\"><a href=\"#nodejs下的一些小模块\" class=\"headerlink\" title=\"nodejs下的一些小模块\"></a>nodejs下的一些小模块</h5><ul>\n<li>path</li>\n<li>url</li>\n<li>queryString</li>\n</ul>\n<h5 id=\"express\"><a href=\"#express\" class=\"headerlink\" title=\"express\"></a>express</h5><p>基于nodejs的一个web开发框架：</p>\n<h5 id=\"创建esperss项目的步骤\"><a href=\"#创建esperss项目的步骤\" class=\"headerlink\" title=\"创建esperss项目的步骤\"></a>创建esperss项目的步骤</h5><ul>\n<li>全局安装espress项目生成器</li>\n</ul>\n</li>\n</ul>\n<p>命令：npm i express-generator -g</p>\n<p>创建express项目的基础框架</p>\n<blockquote>\n<p>express –view=ejs xiaou</p>\n</blockquote>\n<blockquote>\n<p>cd xiaou</p>\n</blockquote>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<blockquote>\n<p>npm start</p>\n</blockquote>\n<h5 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h5><p>在routes创建新的路由文件product.js</p>\n<p>路由地址的匹配</p>\n<p>正则</p>\n<p>动态路由</p>\n<h5 id=\"路由返回数据\"><a href=\"#路由返回数据\" class=\"headerlink\" title=\"路由返回数据\"></a>路由返回数据</h5><ul>\n<li>字符串：res.send()</li>\n<li>页面：res.render(‘文件路径’)；文件夹是是固定的views文件夹</li>\n<li>json  res.json({})</li>\n</ul>\n<h5 id=\"中间件：\"><a href=\"#中间件：\" class=\"headerlink\" title=\"中间件：\"></a>中间件：</h5><p>每个请求都会经过中间件的检查过滤</p>\n<p>1、中间件就是一种功能的封装方式，就是封装在程序中处理http请求的功能，  </p>\n<p>2、中间件是在管道中执行</p>\n<p>3、中间件有一个next()函数，如果不调用next函数，请求就在这个中间件中终止了，</p>\n<p>4、中间件和路由处理器的参数中都有回调函数，这个函数有2,3,4个参数</p>\n<p>如果有两个参数就是req和res；</p>\n<p>如果有三个参数就是req,res和next</p>\n<p>如果有四个参数就是err，req，res，next</p>\n<p>5、如果不调用next ，管道就会终止，不会再有处理器做后续响应，应该向客户端发送一个响应</p>\n<p>6、如果调用了next，不应该发送响应到客户端，如果发送了，则后面发送的响应都会被忽略</p>\n<p>7、中间件的第一个参数可以是路径，如果忽略则全部都匹配</p>\n<h5 id=\"ejs\"><a href=\"#ejs\" class=\"headerlink\" title=\"ejs\"></a>ejs</h5><p>res.render(‘页面的相对路径‘，data)  第二个参数是数据。传递给页面    的数据</p>\n<p>第二个参数是传递给页面中的模板引擎数据</p>\n<p>模板引擎中的语法</p>\n<p>&lt;%# 注释%&gt;</p>\n<h5 id=\"art-template-模板引擎\"><a href=\"#art-template-模板引擎\" class=\"headerlink\" title=\"art -template  模板引擎\"></a>art -template  模板引擎</h5><ul>\n<li><p>espress项目中，使用arttemplate模板引擎</p>\n</li>\n<li><p>安装arttemplate包和express下的支持包</p>\n</li>\n<li><p>npm  i art - template  -S</p>\n</li>\n<li><p>npm  i express-art - template  -S</p>\n</li>\n</ul>\n<h2 id=\"MySql\"><a href=\"#MySql\" class=\"headerlink\" title=\"MySql\"></a>MySql</h2><ul>\n<li>数据库：存储文件：</li>\n<li>MySQl:服务类的程序：</li>\n</ul>\n<h3 id=\"常见数据库\"><a href=\"#常见数据库\" class=\"headerlink\" title=\"常见数据库\"></a>常见数据库</h3><ul>\n<li>Oracle</li>\n<li>mysql</li>\n<li>ms sql server</li>\n<li>mongodb</li>\n</ul>\n<h3 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h3><ul>\n<li>关系数据库</li>\n<li>非关系数据库</li>\n</ul>\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><ul>\n<li>第一范式（1NF）：要求数据库表的每一列都是不可分割的原子数据项</li>\n<li>第二范式（2NF）：在1NF的基础上，非主键属性必须完全依赖于主键</li>\n<li>第三范式（3NF）：在2NF基础上，任何非主键属性不依赖于其它非主键属性（在2NF基础上消除传递依赖）</li>\n<li>反范式：</li>\n</ul>\n<h3 id=\"mysql-语法：sql语法\"><a href=\"#mysql-语法：sql语法\" class=\"headerlink\" title=\"mysql 语法：sql语法\"></a>mysql 语法：sql语法</h3><ul>\n<li>DDL  DML</li>\n</ul>\n<h3 id=\"数据库：database\"><a href=\"#数据库：database\" class=\"headerlink\" title=\"数据库：database\"></a>数据库：database</h3><pre><code>-   创建数据库：\n&gt;create database if not exists xiaou ;</code></pre>\n<h3 id=\"表：table\"><a href=\"#表：table\" class=\"headerlink\" title=\"表：table\"></a>表：table</h3><ul>\n<li>创建表：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> (<br>  <span class=\"hljs-string\">`cardid`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`name`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`age`</span> <span class=\"hljs-built_in\">INT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`address`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`height`</span> <span class=\"hljs-built_in\">FLOAT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`createby`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`createtime`</span> <span class=\"hljs-built_in\">DATE</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`updateby`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`updatetime`</span> <span class=\"hljs-built_in\">DATE</span> <span class=\"hljs-literal\">NULL</span>,<br>  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`cardid`</span>));<br><br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>修改表：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> <br><span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">COLUMN</span> <span class=\"hljs-string\">`disc`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-string\">`tel`</span>;<br><br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> <br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">COLUMN</span> <span class=\"hljs-string\">`disc`</span>;<br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除表、删除数据库\"><a href=\"#删除表、删除数据库\" class=\"headerlink\" title=\"删除表、删除数据库\"></a>删除表、删除数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">table</span> stud;<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">database</span> ujiuye;<br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"中文：\"><a href=\"#中文：\" class=\"headerlink\" title=\"中文：\"></a>中文：</h3><p>修改字段编码为urf8  ;utf8-general-ci;</p>\n<h3 id=\"插入数据：\"><a href=\"#插入数据：\" class=\"headerlink\" title=\"插入数据：\"></a>插入数据：</h3><ul>\n<li><p>insert into </p>\n</li>\n<li><p>格式<br><strong>全部列添加数据：</strong><br>insert into table_name (id,name,age,<code>drop</code>) values(10,’zs’,100,’eer’);<br>如果对所有的列添加数据： 前面的（列名、）是可以省略的；<br>insert into table_name values(10,’zs’,100,’eer’);</p>\n</li>\n</ul>\n<p><strong>部分列添加数据：</strong><br>insert into table_name (id,name) values(10,’zs’);</p>\n<h3 id=\"修改数据：\"><a href=\"#修改数据：\" class=\"headerlink\" title=\"修改数据：\"></a>修改数据：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">update</span> xiaou.user <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">name</span>=<span class=\"hljs-string\">&#x27;zs2000&#x27;</span>,age=<span class=\"hljs-number\">2000</span> <span class=\"hljs-keyword\">where</span> address=<span class=\"hljs-string\">&#x27;上海&#x27;</span>;<br><br><br></code></pre></td></tr></table></figure>\n\n","raw":null,"categories":[],"tags":[]},{"title":"nodejs-2","slug":"nodejs笔记2","date":"2020-09-18T11:19:35.000Z","updated":"2021-09-14T03:19:55.611Z","comments":true,"top":null,"path":"api/articles/nodejs笔记2.json","excerpt":null,"keywords":null,"cover":"https://images.weserv.nl/?url=https://gitee.com/cocacolalc/imgs-hexo/raw/master/img/photo-1625038316392-528b4761a362.jpg","content":"<p><img src=\"https://images.weserv.nl/?url=https://gitee.com/cocacolalc/imgs-hexo/raw/master/img/photo-1625038316392-528b4761a362.jpg\" alt=\"img\"></p>\n<h1 id=\"nodejs笔记2\"><a href=\"#nodejs笔记2\" class=\"headerlink\" title=\"nodejs笔记2\"></a>nodejs笔记2</h1><h2 id=\"web应用架构\"><a href=\"#web应用架构\" class=\"headerlink\" title=\"web应用架构\"></a>web应用架构</h2><p>client-客户端，一般指浏览器，浏览器可以通过http协议向服务器请求数据。</p>\n<p>server-服务端，一般指web服务器，可以接收客户请求，并向客户端发送响应数据。</p>\n<h5 id=\"http-server\"><a href=\"#http-server\" class=\"headerlink\" title=\"http server\"></a>http server</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//支持web服务的http</span><br><br>*<span class=\"hljs-keyword\">const</span>* http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;http&#x27;</span>)<br><br>*<span class=\"hljs-keyword\">let</span>* count=<span class=\"hljs-number\">0</span><br><br><span class=\"hljs-comment\">//创建一个服务,如果有url访问到了这个服务，回调函数执行</span><br><br><span class=\"hljs-comment\">// 回调函数中，第一个形参request代表的是请求对象，里面存放了请求信息</span><br><br><span class=\"hljs-comment\">// 第二个参数response：响应对象</span><br><br>*<span class=\"hljs-keyword\">var</span>* serve=http.createServer((*request*,*response*)*=&gt;*&#123;<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;有人访问&#x27;</span>+(++count))<br><br>  <span class=\"hljs-comment\">//设置响应头；200是成功 编码 类型</span><br><br>  *response*.writeHead(<span class=\"hljs-number\">200</span>,&#123;<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>:<span class=\"hljs-string\">&#x27;text/html;charset=utf-8&#x27;</span>&#125;)<br><br>  <span class=\"hljs-comment\">// 响应对象中添加数据</span><br><br>  *response*.write(<span class=\"hljs-string\">&#x27;我是相应内容&#x27;</span>,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>)<br><br>  <span class=\"hljs-comment\">// 结束</span><br><br>  *response*.end()<br><br>&#125;)<br><br><span class=\"hljs-comment\">// 把服务监听3000端口</span><br><br>serve.listen(<span class=\"hljs-string\">&#x27;3000&#x27;</span>,(*err*)*=&gt;*&#123;<br><br>  <span class=\"hljs-keyword\">if</span>(*err*) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">console</span>.log(*err*)<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;serve listen at 3000&#x27;</span>)<br><br>&#125;)<br><br><span class=\"hljs-comment\">// url ：http：协议</span><br><br><span class=\"hljs-comment\">// 域名：或者 ip DFS服务器</span><br><br><span class=\"hljs-comment\">// 端口：80默认</span><br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h5><p>http域名或者IP</p>\n<p>端口号</p>\n<p>相对路径</p>\n<h5 id=\"nodejs-http-server\"><a href=\"#nodejs-http-server\" class=\"headerlink\" title=\"nodejs http server\"></a>nodejs http server</h5><p>加载http包</p>\n<p>http.createServer((request,response)=&gt;{</p>\n<p>回调函数</p>\n<p>request：请求对象</p>\n<p>response：响应对象</p>\n<p>server.listen(‘3000’)</p>\n<p>})</p>\n<h5 id=\"http工作原理-过程\"><a href=\"#http工作原理-过程\" class=\"headerlink\" title=\"http工作原理  (过程)\"></a>http工作原理  (过程)</h5><ul>\n<li><p>1  客户端连接到web服务器</p>\n</li>\n<li><p>2  发送http请求</p>\n</li>\n<li><p>3   服务器接收解释请求并返回http响应</p>\n</li>\n<li><p>4  释放连接tcp连接</p>\n</li>\n</ul>\n<h5 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h5><ul>\n<li>专注于文件路径</li>\n</ul>\n<h5 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h5><ul>\n<li>专注于处理url地址</li>\n</ul>\n<h5 id=\"querystring\"><a href=\"#querystring\" class=\"headerlink\" title=\"querystring\"></a>querystring</h5><ul>\n<li>专注于url中使用get请求后面解析参数</li>\n</ul>\n<h5 id=\"解析url\"><a href=\"#解析url\" class=\"headerlink\" title=\"解析url\"></a>解析url</h5><blockquote>\n<p>new  URL(request.url,’http://${request.headers.host}’)</p>\n</blockquote>\n<h5 id=\"get-set\"><a href=\"#get-set\" class=\"headerlink\" title=\"get   set\"></a>get   set</h5><ul>\n<li>get 参数，是拼接在url后面；post参数body</li>\n<li>浏览器地址栏中访问的url</li>\n</ul>\n<h5 id=\"nodejs区分get-post\"><a href=\"#nodejs区分get-post\" class=\"headerlink\" title=\"nodejs区分get post\"></a>nodejs区分get post</h5><p>request.method</p>\n<p>nodejs 从get  post  获取参数数据</p>\n<ul>\n<li>get  获取参数  分析url  </li>\n<li>post获取参数</li>\n</ul>\n<h5 id=\"创建express项目\"><a href=\"#创建express项目\" class=\"headerlink\" title=\"创建express项目\"></a>创建express项目</h5><ul>\n<li>安装一个创建express项目的工具（express生成器）–express-generator</li>\n</ul>\n<p>安装命令：</p>\n<blockquote>\n<p>npm install express-generator -g</p>\n</blockquote>\n<p>全局安装：</p>\n<ul>\n<li>使用这个工具生成一个express项目</li>\n</ul>\n<p>命令是：</p>\n<blockquote>\n<p>express –view=ejs myprogramName </p>\n</blockquote>\n<ul>\n<li><p>myprogramName是项目的名字</p>\n</li>\n<li><p>–view=ejs 设置项目的页面使用的模板引擎；设置模版引擎为ejs pug</p>\n</li>\n<li><p>创建完成项目文件之后； </p>\n</li>\n<li><p>cd myprogramName 命令窗口前面的路径定位到项目文件</p>\n</li>\n<li><p>D:\\work\\Lesson\\202002\\2-165\\Day08\\my1</p>\n</li>\n</ul>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<p>会在my1这个文件夹下寻找package.json，获取dependencies里面的包；并且全部安装；</p>\n<ul>\n<li>启动项目</li>\n</ul>\n<blockquote>\n<p>SET DEBUG=my1:* &amp; npm start</p>\n</blockquote>\n<ul>\n<li>默认是在3000端口号： localhost:3000 127.0.0.1:3000</li>\n</ul>\n<h5 id=\"项目文件：\"><a href=\"#项目文件：\" class=\"headerlink\" title=\"项目文件：\"></a>项目文件：</h5><ul>\n<li><p>bin/www 可以修改服务的端口号：</p>\n</li>\n<li><p>node_modules 所有局部安装的包</p>\n</li>\n<li><p>pulic 存放静态文件的；</p>\n</li>\n<li><p>routes 路由</p>\n</li>\n<li><p>views 页面</p>\n</li>\n<li><p>app.js 启动js</p>\n</li>\n<li><p>package.json npm配置文件</p>\n</li>\n</ul>\n<p>npm i 就是安装的dependencies下的包</p>\n<p>npm start 就是运行的scripts下面start命令</p>\n<h5 id=\"app-js-文件\"><a href=\"#app-js-文件\" class=\"headerlink\" title=\"app.js 文件\"></a>app.js 文件</h5><h5 id=\"路由：\"><a href=\"#路由：\" class=\"headerlink\" title=\"路由：\"></a>路由：</h5><ul>\n<li><p>在routes文件夹下 写路由文件</p>\n</li>\n<li><p>app.js中启用路由：</p>\n</li>\n</ul>\n<h5 id=\"响应返回页面\"><a href=\"#响应返回页面\" class=\"headerlink\" title=\"响应返回页面\"></a>响应返回页面</h5><p>在路由中，使用res.render(“list”)；</p>\n<p>-页面必须放在views下；而且后缀名必须是.ejs</p>\n<h5 id=\"怎么获取url传递的数据：\"><a href=\"#怎么获取url传递的数据：\" class=\"headerlink\" title=\"怎么获取url传递的数据：\"></a>怎么获取url传递的数据：</h5><ul>\n<li><p>get 参数: 在路由 req.query 属性，存放了所有get请求的参数：</p>\n</li>\n<li><p>post 数据 req.body 存储</p>\n</li>\n</ul>\n<h5 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h5><p>req.params</p>\n<h5 id=\"路由的路径是可以用正则表达式\"><a href=\"#路由的路径是可以用正则表达式\" class=\"headerlink\" title=\"路由的路径是可以用正则表达式\"></a>路由的路径是可以用正则表达式</h5><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><ul>\n<li><p>npm i express-generator -g 如果安装过了，不用再安装</p>\n</li>\n<li><p>生成一个项目</p>\n</li>\n</ul>\n<blockquote>\n<p>express –view=ejs xiaou</p>\n</blockquote>\n<blockquote>\n<p>cd xiaou</p>\n</blockquote>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<blockquote>\n<p>npm start</p>\n</blockquote>\n<ul>\n<li><p>把index.html复制到views，并且要ejs后缀；</p>\n</li>\n<li><p>设计一个路由： 设计url地址；访问这个url，</p>\n</li>\n<li><p>routes文件夹下创建一个新的路由文件index.js</p>\n</li>\n</ul>\n<h5 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node.js\"></a>node.js</h5><ul>\n<li>单线程</li>\n<li>非阻塞</li>\n<li>事件驱动</li>\n</ul>\n<h5 id=\"模块化commonJS\"><a href=\"#模块化commonJS\" class=\"headerlink\" title=\"模块化commonJS\"></a>模块化commonJS</h5><ul>\n<li>定义模块：</li>\n</ul>\n<p>modules.exporys{}</p>\n<p>modules.exporys.xxx=xx</p>\n<p>exports.xxx=xx</p>\n<ul>\n<li>加载模块：</li>\n</ul>\n<p>通过js（模块）的加载路径：</p>\n<p>const mymoudule=require(‘模块’)</p>\n<p>通过js（模块）的标识：核心模块（nodejs自带的    ）</p>\n<p>const http=require(‘http’)</p>\n<h5 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h5><ul>\n<li>初始化</li>\n<li>绑定事件</li>\n<li>触发事件</li>\n<li>传值：</li>\n</ul>\n<h5 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h5><ul>\n<li>包：</li>\n<li>全局安装    -g   本地安装</li>\n<li>依赖   和   开发依赖：</li>\n</ul>\n<p>依赖：express   简写–save    -S</p>\n<p>开发依赖：less  简写  –save-dev   -D</p>\n<h5 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h5><h5 id=\"nodejs-http\"><a href=\"#nodejs-http\" class=\"headerlink\" title=\"nodejs  http\"></a>nodejs  http</h5><ul>\n<li><p><a href=\"http://www.ddd.com/\">http://www.ddd.com:80</a>   默认是80</p>\n<h5 id=\"http四个步骤：\"><a href=\"#http四个步骤：\" class=\"headerlink\" title=\"http四个步骤：\"></a>http四个步骤：</h5><ul>\n<li>客户端向服务端发起的连接</li>\n<li>客户端向服务器发送的数据</li>\n<li>服务器响应客户端</li>\n<li>客户端结束连接</li>\n</ul>\n<h5 id=\"nodejs下的一些小模块\"><a href=\"#nodejs下的一些小模块\" class=\"headerlink\" title=\"nodejs下的一些小模块\"></a>nodejs下的一些小模块</h5><ul>\n<li>path</li>\n<li>url</li>\n<li>queryString</li>\n</ul>\n<h5 id=\"express\"><a href=\"#express\" class=\"headerlink\" title=\"express\"></a>express</h5><p>基于nodejs的一个web开发框架：</p>\n<h5 id=\"创建esperss项目的步骤\"><a href=\"#创建esperss项目的步骤\" class=\"headerlink\" title=\"创建esperss项目的步骤\"></a>创建esperss项目的步骤</h5><ul>\n<li>全局安装espress项目生成器</li>\n</ul>\n</li>\n</ul>\n<p>命令：npm i express-generator -g</p>\n<p>创建express项目的基础框架</p>\n<blockquote>\n<p>express –view=ejs xiaou</p>\n</blockquote>\n<blockquote>\n<p>cd xiaou</p>\n</blockquote>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<blockquote>\n<p>npm start</p>\n</blockquote>\n<h5 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h5><p>在routes创建新的路由文件product.js</p>\n<p>路由地址的匹配</p>\n<p>正则</p>\n<p>动态路由</p>\n<h5 id=\"路由返回数据\"><a href=\"#路由返回数据\" class=\"headerlink\" title=\"路由返回数据\"></a>路由返回数据</h5><ul>\n<li>字符串：res.send()</li>\n<li>页面：res.render(‘文件路径’)；文件夹是是固定的views文件夹</li>\n<li>json  res.json({})</li>\n</ul>\n<h5 id=\"中间件：\"><a href=\"#中间件：\" class=\"headerlink\" title=\"中间件：\"></a>中间件：</h5><p>每个请求都会经过中间件的检查过滤</p>\n<p>1、中间件就是一种功能的封装方式，就是封装在程序中处理http请求的功能，  </p>\n<p>2、中间件是在管道中执行</p>\n<p>3、中间件有一个next()函数，如果不调用next函数，请求就在这个中间件中终止了，</p>\n<p>4、中间件和路由处理器的参数中都有回调函数，这个函数有2,3,4个参数</p>\n<p>如果有两个参数就是req和res；</p>\n<p>如果有三个参数就是req,res和next</p>\n<p>如果有四个参数就是err，req，res，next</p>\n<p>5、如果不调用next ，管道就会终止，不会再有处理器做后续响应，应该向客户端发送一个响应</p>\n<p>6、如果调用了next，不应该发送响应到客户端，如果发送了，则后面发送的响应都会被忽略</p>\n<p>7、中间件的第一个参数可以是路径，如果忽略则全部都匹配</p>\n<h5 id=\"ejs\"><a href=\"#ejs\" class=\"headerlink\" title=\"ejs\"></a>ejs</h5><p>res.render(‘页面的相对路径‘，data)  第二个参数是数据。传递给页面    的数据</p>\n<p>第二个参数是传递给页面中的模板引擎数据</p>\n<p>模板引擎中的语法</p>\n<p>&lt;%# 注释%&gt;</p>\n<h5 id=\"art-template-模板引擎\"><a href=\"#art-template-模板引擎\" class=\"headerlink\" title=\"art -template  模板引擎\"></a>art -template  模板引擎</h5><ul>\n<li><p>espress项目中，使用arttemplate模板引擎</p>\n</li>\n<li><p>安装arttemplate包和express下的支持包</p>\n</li>\n<li><p>npm  i art - template  -S</p>\n</li>\n<li><p>npm  i express-art - template  -S</p>\n</li>\n</ul>\n<h2 id=\"MySql\"><a href=\"#MySql\" class=\"headerlink\" title=\"MySql\"></a>MySql</h2><ul>\n<li>数据库：存储文件：</li>\n<li>MySQl:服务类的程序：</li>\n</ul>\n<h3 id=\"常见数据库\"><a href=\"#常见数据库\" class=\"headerlink\" title=\"常见数据库\"></a>常见数据库</h3><ul>\n<li>Oracle</li>\n<li>mysql</li>\n<li>ms sql server</li>\n<li>mongodb</li>\n</ul>\n<h3 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h3><ul>\n<li>关系数据库</li>\n<li>非关系数据库</li>\n</ul>\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><ul>\n<li>第一范式（1NF）：要求数据库表的每一列都是不可分割的原子数据项</li>\n<li>第二范式（2NF）：在1NF的基础上，非主键属性必须完全依赖于主键</li>\n<li>第三范式（3NF）：在2NF基础上，任何非主键属性不依赖于其它非主键属性（在2NF基础上消除传递依赖）</li>\n<li>反范式：</li>\n</ul>\n<h3 id=\"mysql-语法：sql语法\"><a href=\"#mysql-语法：sql语法\" class=\"headerlink\" title=\"mysql 语法：sql语法\"></a>mysql 语法：sql语法</h3><ul>\n<li>DDL  DML</li>\n</ul>\n<h3 id=\"数据库：database\"><a href=\"#数据库：database\" class=\"headerlink\" title=\"数据库：database\"></a>数据库：database</h3><pre><code>-   创建数据库：\n&gt;create database if not exists xiaou ;</code></pre>\n<h3 id=\"表：table\"><a href=\"#表：table\" class=\"headerlink\" title=\"表：table\"></a>表：table</h3><ul>\n<li>创建表：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> (<br>  <span class=\"hljs-string\">`cardid`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`name`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`age`</span> <span class=\"hljs-built_in\">INT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`address`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`height`</span> <span class=\"hljs-built_in\">FLOAT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`createby`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`createtime`</span> <span class=\"hljs-built_in\">DATE</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`updateby`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`updatetime`</span> <span class=\"hljs-built_in\">DATE</span> <span class=\"hljs-literal\">NULL</span>,<br>  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`cardid`</span>));<br><br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>修改表：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> <br><span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">COLUMN</span> <span class=\"hljs-string\">`disc`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-string\">`tel`</span>;<br><br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> <br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">COLUMN</span> <span class=\"hljs-string\">`disc`</span>;<br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除表、删除数据库\"><a href=\"#删除表、删除数据库\" class=\"headerlink\" title=\"删除表、删除数据库\"></a>删除表、删除数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">table</span> stud;<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">database</span> ujiuye;<br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"中文：\"><a href=\"#中文：\" class=\"headerlink\" title=\"中文：\"></a>中文：</h3><p>修改字段编码为urf8  ;utf8-general-ci;</p>\n<h3 id=\"插入数据：\"><a href=\"#插入数据：\" class=\"headerlink\" title=\"插入数据：\"></a>插入数据：</h3><ul>\n<li><p>insert into </p>\n</li>\n<li><p>格式<br><strong>全部列添加数据：</strong><br>insert into table_name (id,name,age,<code>drop</code>) values(10,’zs’,100,’eer’);<br>如果对所有的列添加数据： 前面的（列名、）是可以省略的；<br>insert into table_name values(10,’zs’,100,’eer’);</p>\n</li>\n</ul>\n<p><strong>部分列添加数据：</strong><br>insert into table_name (id,name) values(10,’zs’);</p>\n<h3 id=\"修改数据：\"><a href=\"#修改数据：\" class=\"headerlink\" title=\"修改数据：\"></a>修改数据：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">update</span> xiaou.user <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">name</span>=<span class=\"hljs-string\">&#x27;zs2000&#x27;</span>,age=<span class=\"hljs-number\">2000</span> <span class=\"hljs-keyword\">where</span> address=<span class=\"hljs-string\">&#x27;上海&#x27;</span>;<br></code></pre></td></tr></table></figure>\n","raw":null,"categories":[],"tags":[]},{"title":"js调用exe","slug":"js调用exe","date":"2021-03-18T11:29:18.000Z","updated":"2021-09-14T03:17:30.357Z","comments":true,"top":null,"path":"api/articles/js调用exe.json","excerpt":null,"keywords":null,"cover":"https://images.weserv.nl/?url=https://gitee.com/cocacolalc/imgs-hexo/raw/master/img/photo-1625903443536-ec7e0e5fc341.jpg","content":"<p><img src=\"https://images.weserv.nl/?url=https://gitee.com/cocacolalc/imgs-hexo/raw/master/img/photo-1625903443536-ec7e0e5fc341.jpg\" alt=\"img\"></p>\n<h5 id=\"1-使用记事本（或其他文本编辑器）创建一个protocal-reg文件，并写入以下内容\"><a href=\"#1-使用记事本（或其他文本编辑器）创建一个protocal-reg文件，并写入以下内容\" class=\"headerlink\" title=\"1.使用记事本（或其他文本编辑器）创建一个protocal.reg文件，并写入以下内容\"></a>1.使用记事本（或其他文本编辑器）创建一个protocal.reg文件，并写入以下内容</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">Windows Registry Editor Version <span class=\"hljs-number\">5.00</span><br>[HKEY_CLASSES_ROOT\\Webshell]<br>@=<span class=\"hljs-string\">&quot;URL:Webshell Protocol Handler&quot;</span><br><span class=\"hljs-string\">&quot;URL Protocol&quot;</span>=<span class=\"hljs-string\">&quot;&quot;</span><br>[HKEY_CLASSES_ROOT\\Webshell\\DefaultIcon]<br>@=<span class=\"hljs-string\">&quot;C:\\\\Program Files (x86)\\\\Tencent\\\\WeChat\\\\WeChat.exe&quot;</span><br>[HKEY_CLASSES_ROOT\\Webshell\\shell]<br>[HKEY_CLASSES_ROOT\\Webshell\\shell\\open]<br>[HKEY_CLASSES_ROOT\\Webshell\\shell\\open\\command]<br>@=<span class=\"hljs-string\">&quot;\\&quot;C:\\\\Program Files (x86)\\\\Tencent\\\\WeChat\\\\WeChat.exe\\&quot; \\&quot;%1\\&quot;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-修改参数\"><a href=\"#2-修改参数\" class=\"headerlink\" title=\"2.修改参数\"></a>2.<strong>修改参数</strong></h3><p>使用记事本打开文件后，按照下图说明修改相关参数</p>\n<p>修改红框内名称自定义即可，全部使用英文字符（该名称即为调用时的href），共六处</p>\n<!-- \n![image-20210423132126316](C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210423132126316.png) -->\n\n<p><strong>2.2修改可执行文件路径</strong></p>\n<p>需注意：文件路径中使用//分割（重要）</p>\n<!-- \n![image-20210423132200180](C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210423132200180.png) -->\n\n<h3 id=\"3-执行protocal-reg文件\"><a href=\"#3-执行protocal-reg文件\" class=\"headerlink\" title=\"3.执行protocal.reg文件\"></a>3.<strong>执行protocal.reg文件</strong></h3><h3 id=\"4-创建调用连接\"><a href=\"#4-创建调用连接\" class=\"headerlink\" title=\"4.创建调用连接\"></a>4.<strong>创建调用连接</strong></h3><p>连接地址为 步骤1中所命名的链接名称，后面加://hello，（hello为传递参数，可任意添加）</p>\n<!-- ![image-20210423132233779](C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210423132233779.png) -->","raw":null,"categories":[],"tags":[{"name":"js调用exe","path":"api/tags/js调用exe.json"}]},{"title":"Python基础","slug":"python","date":"2021-03-18T11:29:18.000Z","updated":"2021-09-14T03:20:40.543Z","comments":true,"top":null,"path":"api/articles/python.json","excerpt":null,"keywords":null,"cover":"https://images.weserv.nl/?url=https://gitee.com/cocacolalc/imgs-hexo/raw/master/img/photo-1618335829737-2228915674e0.jpg","content":"<p><img src=\"https://images.weserv.nl/?url=https://gitee.com/cocacolalc/imgs-hexo/raw/master/img/photo-1618335829737-2228915674e0.jpg\" alt=\"img\"></p>\n<h5 id=\"Python-中文编码\"><a href=\"#Python-中文编码\" class=\"headerlink\" title=\"Python 中文编码\"></a>Python 中文编码</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#!/usr/bin/python</span><br><span class=\"hljs-comment\"># -*- coding: UTF-8 -*-</span><br><br>文件开头加入 <span class=\"hljs-comment\"># -*- coding: UTF-8 -*- 或者 # coding=utf-8</span><br><br>print(<span class=\"hljs-string\">&#x27;你好&#x27;</span>) <span class=\"hljs-comment\">#输出你好</span><br><br><span class=\"hljs-comment\"># #号键即是注释</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"变量类型和运算符\"><a href=\"#变量类型和运算符\" class=\"headerlink\" title=\"变量类型和运算符\"></a>变量类型和运算符</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">name = value<br><span class=\"hljs-comment\"># Python 使用等号=作为赋值运算符</span><br><span class=\"hljs-comment\"># name 表示变量名；value 表示值，也就是要存储的数据</span><br><span class=\"hljs-comment\"># Python 是弱类型的语言</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h5><p>计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。</p>\n<p>比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，用<code>if</code>语句实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">age = <span class=\"hljs-number\">20</span><br><span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:<br>    print(<span class=\"hljs-string\">&#x27;your age is&#x27;</span>, age)<br>    print(<span class=\"hljs-string\">&#x27;adult&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>根据Python的缩进规则，如果<code>if</code>语句判断是<code>True</code>，就把缩进的两行print语句执行了，否则，什么也不做。</p>\n<p>也可以给<code>if</code>添加一个<code>else</code>语句，意思是，如果<code>if</code>判断是<code>False</code>，不要执行<code>if</code>的内容，去把<code>else</code>执行了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">age = <span class=\"hljs-number\">3</span><br><span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:<br>    print(<span class=\"hljs-string\">&#x27;your age is&#x27;</span>, age)<br>    print(<span class=\"hljs-string\">&#x27;adult&#x27;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>    print(<span class=\"hljs-string\">&#x27;your age is&#x27;</span>, age)<br>    print(<span class=\"hljs-string\">&#x27;teenager&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>注意不要少写了冒号<code>:</code>。</p>\n<p>当然上面的判断是很粗略的，完全可以用<code>elif</code>做更细致的判断：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">age = <span class=\"hljs-number\">3</span><br><span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:<br>    print(<span class=\"hljs-string\">&#x27;adult&#x27;</span>)<br><span class=\"hljs-keyword\">elif</span> age &gt;= <span class=\"hljs-number\">6</span>:<br>    print(<span class=\"hljs-string\">&#x27;teenager&#x27;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>    print(<span class=\"hljs-string\">&#x27;kid&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p><code>elif</code>是<code>else if</code>的缩写，完全可以有多个<code>elif</code>，所以<code>if</code>语句的完整形式就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">if</span> &lt;条件判断<span class=\"hljs-number\">1</span>&gt;:<br>    &lt;执行<span class=\"hljs-number\">1</span>&gt;<br><span class=\"hljs-keyword\">elif</span> &lt;条件判断<span class=\"hljs-number\">2</span>&gt;:<br>    &lt;执行<span class=\"hljs-number\">2</span>&gt;<br><span class=\"hljs-keyword\">elif</span> &lt;条件判断<span class=\"hljs-number\">3</span>&gt;:<br>    &lt;执行<span class=\"hljs-number\">3</span>&gt;<br><span class=\"hljs-keyword\">else</span>:<br>    &lt;执行<span class=\"hljs-number\">4</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p><code>if</code>语句执行有个特点，它是从上往下判断，如果在某个判断上是<code>True</code>，把该判断对应的语句执行后，就忽略掉剩下的<code>elif</code>和<code>else</code>，所以，请测试并解释为什么下面的程序打印的是<code>teenager</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">age &#x3D; 20<br>if age &gt;&#x3D; 6:<br>    print(&#39;teenager&#39;)<br>elif age &gt;&#x3D; 18:<br>    print(&#39;adult&#39;)<br>else:<br>    print(&#39;kid&#39;)<br></code></pre></td></tr></table></figure>\n\n<p><code>if</code>判断条件还可以简写，比如写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">if</span> x:<br>    print(<span class=\"hljs-string\">&#x27;True&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>只要<code>x</code>是非零数值、非空字符串、非空list等，就判断为<code>True</code>，否则为<code>False</code>。</p>\n<h3 id=\"再议-input\"><a href=\"#再议-input\" class=\"headerlink\" title=\"再议 input\"></a>再议 input</h3><p>最后看一个有问题的条件判断。很多同学会用<code>input()</code>读取用户的输入，这样可以自己输入，程序运行得更有意思：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">birth = input(<span class=\"hljs-string\">&#x27;birth: &#x27;</span>)<br><span class=\"hljs-keyword\">if</span> birth &lt; <span class=\"hljs-number\">2000</span>:<br>    print(<span class=\"hljs-string\">&#x27;00前&#x27;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>    print(<span class=\"hljs-string\">&#x27;00后&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>输入<code>1982</code>，结果报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">Traceback (most recent call last):<br>  File <span class=\"hljs-string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">in</span> &lt;module&gt;<br>TypeError: unorderable types: str() &gt; int()<br></code></pre></td></tr></table></figure>\n\n<p>这是因为<code>input()</code>返回的数据类型是<code>str</code>，<code>str</code>不能直接和整数比较，必须先把<code>str</code>转换成整数。Python提供了<code>int()</code>函数来完成这件事情：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">s = input(<span class=\"hljs-string\">&#x27;birth: &#x27;</span>)<br>birth = int(s)<br><span class=\"hljs-keyword\">if</span> birth &lt; <span class=\"hljs-number\">2000</span>:<br>    print(<span class=\"hljs-string\">&#x27;00前&#x27;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>    print(<span class=\"hljs-string\">&#x27;00后&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>再次运行，就可以得到正确地结果。但是，如果输入<code>abc</code>呢？又会得到一个错误信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">Traceback (most recent call last):<br>  File <span class=\"hljs-string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">in</span> &lt;module&gt;<br>ValueError: invalid literal <span class=\"hljs-keyword\">for</span> int() <span class=\"hljs-keyword\">with</span> base <span class=\"hljs-number\">10</span>: <span class=\"hljs-string\">&#x27;abc&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>原来<code>int()</code>函数发现一个字符串并不是合法的数字时就会报错，程序就退出了。</p>\n<h5 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h5><p>要计算1+2+3，我们可以直接写表达式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">6</span><br></code></pre></td></tr></table></figure>\n\n<p>要计算1+2+3+…+10，勉强也能写出来。</p>\n<p>但是，要计算1+2+3+…+10000，直接写表达式就不可能了。</p>\n<p>为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。</p>\n<p>Python的循环有两种，一种是for…in循环，依次把list或tuple中的每个元素迭代出来，看例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">names = [<span class=\"hljs-string\">&#x27;Michael&#x27;</span>, <span class=\"hljs-string\">&#x27;Bob&#x27;</span>, <span class=\"hljs-string\">&#x27;Tracy&#x27;</span>]<br><span class=\"hljs-keyword\">for</span> name <span class=\"hljs-keyword\">in</span> names:<br>    print(name)<br></code></pre></td></tr></table></figure>\n\n<p>执行这段代码，会依次打印<code>names</code>的每一个元素：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">Michael<br>Bob<br>Tracy<br></code></pre></td></tr></table></figure>\n\n<p>所以<code>for x in ...</code>循环就是把每个元素代入变量<code>x</code>，然后执行缩进块的语句。</p>\n<p>再比如我们想计算1-10的整数之和，可以用一个<code>sum</code>变量做累加：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">sum = <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]:<br>    sum = sum + x<br>print(sum)<br></code></pre></td></tr></table></figure>\n\n<p>如果要计算1-100的整数之和，从1写到100有点困难，幸好Python提供一个<code>range()</code>函数，可以生成一个整数序列，再通过<code>list()</code>函数可以转换为list。比如<code>range(5)</code>生成的序列是从0开始小于5的整数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>list(range(<span class=\"hljs-number\">5</span>))<br>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]<br></code></pre></td></tr></table></figure>\n\n<p><code>range(101)</code>就可以生成0-100的整数序列，计算如下：</p>\n<p><code># -*- coding: utf-8 -*- </code> Run</p>\n<p>请自行运行上述代码，看看结果是不是当年高斯同学心算出的5050。</p>\n<p>第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">sum = <span class=\"hljs-number\">0</span><br>n = <span class=\"hljs-number\">99</span><br><span class=\"hljs-keyword\">while</span> n &gt; <span class=\"hljs-number\">0</span>:<br>    sum = sum + n<br>    n = n - <span class=\"hljs-number\">2</span><br>print(sum)<br></code></pre></td></tr></table></figure>\n\n<p>在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足while条件，循环退出。</p>\n<p>第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">sum = <span class=\"hljs-number\">0</span><br>n = <span class=\"hljs-number\">99</span><br><span class=\"hljs-keyword\">while</span> n &gt; <span class=\"hljs-number\">0</span>:<br>    sum = sum + n<br>    n = n - <span class=\"hljs-number\">2</span><br>print(sum)<br></code></pre></td></tr></table></figure>\n\n<p>在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足while条件，循环退出。</p>\n<h3 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h3><p>在循环中，<code>break</code>语句可以提前退出循环。例如，本来要循环打印1～100的数字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">n = <span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">while</span> n &lt;= <span class=\"hljs-number\">100</span>:<br>    print(n)<br>    n = n + <span class=\"hljs-number\">1</span><br>print(<span class=\"hljs-string\">&#x27;END&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>上面的代码可以打印出1~100。</p>\n<p>如果要提前结束循环，可以用<code>break</code>语句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">n = <span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">while</span> n &lt;= <span class=\"hljs-number\">100</span>:<br>    <span class=\"hljs-keyword\">if</span> n &gt; <span class=\"hljs-number\">10</span>: <span class=\"hljs-comment\"># 当n = 11时，条件满足，执行break语句</span><br>        <span class=\"hljs-keyword\">break</span> <span class=\"hljs-comment\"># break语句会结束当前循环</span><br>    print(n)<br>    n = n + <span class=\"hljs-number\">1</span><br>print(<span class=\"hljs-string\">&#x27;END&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>执行上面的代码可以看到，打印出1~10后，紧接着打印<code>END</code>，程序结束。</p>\n<p>可见<code>break</code>的作用是提前结束循环。</p>\n<h3 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h3><p>在循环过程中，也可以通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">n = <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">while</span> n &lt; <span class=\"hljs-number\">10</span>:<br>    n = n + <span class=\"hljs-number\">1</span><br>    print(n)<br></code></pre></td></tr></table></figure>\n\n<p>上面的程序可以打印出1～10。但是，如果我们想只打印奇数，可以用<code>continue</code>语句跳过某些循环：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">n = <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">while</span> n &lt; <span class=\"hljs-number\">10</span>:<br>    n = n + <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">if</span> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>: <span class=\"hljs-comment\"># 如果n是偶数，执行continue语句</span><br>        <span class=\"hljs-keyword\">continue</span> <span class=\"hljs-comment\"># continue语句会直接继续下一轮循环，后续的print()语句不会执行</span><br>    print(n)<br></code></pre></td></tr></table></figure>\n\n<p>执行上面的代码可以看到，打印的不再是1～10，而是1，3，5，7，9。</p>\n<p>可见<code>continue</code>的作用是提前结束本轮循环，并直接开始下一轮循环。</p>\n","raw":null,"categories":[],"tags":[{"name":"Python基础","path":"api/tags/Python基础.json"}]},{"title":"Vue3源码-Set、Map、WeakSet、WeakMap","slug":"vu3源码2","date":"2021-03-18T11:29:18.000Z","updated":"2021-09-14T03:37:21.252Z","comments":true,"top":null,"path":"api/articles/vu3源码2.json","excerpt":null,"keywords":null,"cover":"https://images.unsplash.com/photo-1631341183338-0b6f5f9d0d99?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwzMXx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60","content":"<p><img src=\"https://images.unsplash.com/photo-1631341183338-0b6f5f9d0d99?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwzMXx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\" alt=\"img\"></p>\n<h3 id=\"Set、Map、WeakSet、WeakMap\"><a href=\"#Set、Map、WeakSet、WeakMap\" class=\"headerlink\" title=\"Set、Map、WeakSet、WeakMap\"></a>Set、Map、WeakSet、WeakMap</h3><p>如果要用一句来描述，我们可以说 <strong>Set是一种叫做集合的数据结构，Map是一种叫做字典的数据结构</strong></p>\n<p>那什么是集合？什么又是字典呢？</p>\n<ul>\n<li>集合</li>\n</ul>\n<blockquote>\n<p>集合，是由一堆无序的、相关联的，且不重复的内存结构【数学中称为元素】组成的组合</p>\n</blockquote>\n<ul>\n<li>字典</li>\n</ul>\n<blockquote>\n<p>字典（dictionary）是一些元素的集合。每个元素有一个称作key 的域，不同元素的key 各不相同</p>\n</blockquote>\n<p>那么集合和字典又有什么区别呢？</p>\n<ul>\n<li>共同点：集合、字典都可以存储不重复的值</li>\n<li>不同点：集合是以[值，值]的形式存储元素，字典是以[键，值]的形式存储</li>\n</ul>\n<h5 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h5><p>大多数主流编程语言都有多种内置的数据集合。例如<code>Python</code>拥有列表（<code>list</code>）、元组（<code>tuple</code>）和字典（<code>dictionary</code>）,Java有列表（<code>list</code>）、集合（<code>set</code>)、队列（<code>queue</code>）</p>\n<p>然而 <code>JavaScript</code> 直到<code>ES6</code>的发布之前，只拥有数组（<code>array</code>）和对象（<code>object</code>）这两个内建的数据集合</p>\n<p>在 <code>ES6</code> 之前,我们通常使用内置的 <code>Object</code> 模拟Map</p>\n<p>但是这样模拟出来的<code>map</code>会有一些缺陷，如下:</p>\n<ol>\n<li><code>Object</code>的属性键是<code>String</code>或<code>Symbol</code>，这限制了它们作为不同数据类型的键/值对集合的能力</li>\n<li><code>Object</code>不是设计来作为一种数据集合，因此没有直接有效的方法来确定对象具有多少属性</li>\n</ol>\n<h5 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h5><blockquote>\n<p><code>Set</code> 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用，<code>Set</code>对象是值的集合，你可以按照插入的顺序迭代它的元素。 <code>Set</code>中的元素只会出现一次，即 <code>Set</code> 中的元素是唯一的</p>\n</blockquote>\n<p><code>Set</code>本身是一个构造函数，用来生成 <code>Set</code> 数据结构</p>\n<h5 id=\"基本使用：\"><a href=\"#基本使用：\" class=\"headerlink\" title=\"基本使用：\"></a>基本使用：</h5><ul>\n<li>语法<br><code>new Set([iterable])</code> 接收一个数组（或者具有 iterable 接口的其他数据结构）, 返回一个新的<code>Set</code>对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> set=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>])<br><span class=\"hljs-built_in\">console</span>.log(set)<span class=\"hljs-comment\">//&#123;1,2&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>所以说Set可以做到数组去重</p>\n<h5 id=\"属性和方法：\"><a href=\"#属性和方法：\" class=\"headerlink\" title=\"属性和方法：\"></a>属性和方法：</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]).size) <span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>操作方法</strong></p>\n<ul>\n<li>add(value): 向集合中添加一个新的项</li>\n<li>delete(value): 从集合中删除一个值</li>\n<li>has(value): 如果值在集合中存在，返回ture, 否则返回false</li>\n<li>clear(): 移除集合中的所有项</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>()<br>set.add(<span class=\"hljs-number\">1</span>)<br>set.add(<span class=\"hljs-number\">2</span>)<br>set.add(<span class=\"hljs-number\">2</span>)<br>set.add(<span class=\"hljs-number\">3</span>)<br><span class=\"hljs-built_in\">console</span>.log(set) <span class=\"hljs-comment\">// &#123;1,2,3&#125;</span><br>set.has(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// true</span><br>set.delete(<span class=\"hljs-number\">2</span>)  <br>set.has(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// false</span><br>set.clear() <br></code></pre></td></tr></table></figure>\n\n<p><strong>遍历方法</strong></p>\n<ul>\n<li>keys(): 返回键名的遍历器</li>\n<li>values(): 返回键值的遍历器</li>\n<li>entries(): 返回键值对的遍历器</li>\n<li>forEach(): 使用回调函数遍历每个成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>])<br><br><span class=\"hljs-comment\">// 由于set只有键值，没有键名，所以keys() values()行为完全一致</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(set.keys())) <span class=\"hljs-comment\">// [1,2,3,4]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(set.values())) <span class=\"hljs-comment\">// [1,2,3,4]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(set.entries())) <span class=\"hljs-comment\">//  [[1,1],[2,2],[3,3],[4,4]]</span><br><br>set.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> &#123; <span class=\"hljs-built_in\">console</span>.log(item)&#125;) <span class=\"hljs-comment\">// 1,2,3,4</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h5><h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>因为 <code>Set</code> 结构的值是唯一的，我们可以很轻松的实现以下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">let</span> unique = [... new <span class=\"hljs-built_in\">Set</span>(arr)];<br><br><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);<br><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>]);<br>    <br><span class=\"hljs-comment\">// 并集</span><br><span class=\"hljs-keyword\">let</span> union = [...new <span class=\"hljs-built_in\">Set</span>([...a, ...b])]; <span class=\"hljs-comment\">// [1,2,3,4]</span><br>    <br><span class=\"hljs-comment\">// 交集</span><br><span class=\"hljs-keyword\">let</span> intersect = [...new <span class=\"hljs-built_in\">Set</span>([...a].filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> b.has(x)))]; [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]<br>    <br><span class=\"hljs-comment\">// 差集</span><br><span class=\"hljs-keyword\">let</span> difference = <span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([...a].filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> !b.has(x)))); [<span class=\"hljs-number\">1</span>]<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"WeakSet\"><a href=\"#WeakSet\" class=\"headerlink\" title=\"WeakSet\"></a>WeakSet</h4><blockquote>\n<p>WeakSet 对象是一些对象值的集合, 并且其中的每个对象值都只能出现一次。在WeakSet的集合中是唯一的</p>\n</blockquote>\n<p><code>WeakSet</code> 的出现主要解决弱引用对象存储的场景, 其结构与<code>Set</code>类似</p>\n<p>与<code>Set</code>的区别</p>\n<ul>\n<li>与Set相比，WeakSet 只能是对象的集合，而不能是任何类型的任意值</li>\n<li>WeakSet集合中对象的引用为弱引用。 如果没有其他的对WeakSet中对象的引用，那么这些对象会被当成垃圾回收掉。 这也意味着WeakSet中没有存储当前对象的列表。 正因为这样，WeakSet 是不可枚举的</li>\n</ul>\n<p><code>WeakSet</code> 的属性跟操作方法与 <code>Set</code> 一致，不同的是 <code>WeakSet</code> 没有遍历方法，因为其成员都是弱引用，弱引用随时都会消失，遍历机制无法保证成员的存在</p>\n<p><strong>上面一直有提到弱引用，那弱引用到底是指什么呢？</strong></p>\n<blockquote>\n<p>弱引用是指不能确保其引用的对象不会被垃圾回收器回收的引用，换句话说就是可能在任意时间被回收</p>\n</blockquote>\n<p>基本跟 <code>Set</code> 类似，同样具有如下方法 <strong>属性</strong></p>\n<ul>\n<li>size: 返回 Map 结构的元素总数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()<br>map.set(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;vuejs.cn&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(map.size) <span class=\"hljs-comment\">// 1</span><br><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;vue3js.cn&#x27;</span>], [<span class=\"hljs-string\">&#x27;age&#x27;</span>,<span class=\"hljs-string\">&#x27;18&#x27;</span>]]).size) <span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>操作方法</strong></p>\n<ul>\n<li>set(key, value): 向 Map 中加入或更新键值对</li>\n<li>get(key): 读取 key 对用的值，如果没有，返回 undefined</li>\n<li>has(key): 某个键是否在 Map 对象中，在返回 true 否则返回 false</li>\n<li>delete(key): 删除某个键，返回 true, 如果删除失败返回 false</li>\n<li>clear(): 删除所有元素</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()<br>map.set(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;vue3js.cn&#x27;</span>)<br>map.set(<span class=\"hljs-string\">&#x27;age&#x27;</span>,<span class=\"hljs-string\">&#x27;18&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(map) <span class=\"hljs-comment\">// Map &#123;&quot;name&quot; =&gt; &quot;vuejs.cn&quot;, &quot;age&quot; =&gt; &quot;18&quot;&#125;</span><br>map.get(<span class=\"hljs-string\">&#x27;name&#x27;</span>) <span class=\"hljs-comment\">// vue3js.cn </span><br>map.has(<span class=\"hljs-string\">&#x27;name&#x27;</span>) <span class=\"hljs-comment\">// true</span><br>map.delete(<span class=\"hljs-string\">&#x27;name&#x27;</span>)  <br>map.has(name) <span class=\"hljs-comment\">// false</span><br>map.clear() <span class=\"hljs-comment\">// Map &#123;&#125; </span><br></code></pre></td></tr></table></figure>\n\n<p><strong>遍历方法</strong></p>\n<ul>\n<li>keys()：返回键名的遍历器</li>\n<li>values()：返回键值的遍历器</li>\n<li>entries()：返回所有成员的遍历器</li>\n<li>forEach()：遍历 Map 的所有成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()<br>map.set(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;vue3js.cn&#x27;</span>)<br>map.set(<span class=\"hljs-string\">&#x27;age&#x27;</span>,<span class=\"hljs-string\">&#x27;18&#x27;</span>)<br><br><span class=\"hljs-built_in\">console</span>.log([...map.keys()])  <span class=\"hljs-comment\">// [&quot;name&quot;, &quot;age&quot;]</span><br><span class=\"hljs-built_in\">console</span>.log([...map.values()])  <span class=\"hljs-comment\">// [&quot;vue3js.cn&quot;, &quot;18&quot;]</span><br><span class=\"hljs-built_in\">console</span>.log([...map.entries()]) <span class=\"hljs-comment\">// [[&#x27;name&#x27;,&#x27;vue3js.cn&#x27;], [&#x27;age&#x27;,&#x27;18&#x27;]]</span><br><br><span class=\"hljs-comment\">// name vuejs.cn</span><br><span class=\"hljs-comment\">// age 18</span><br>map.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, key</span>) =&gt;</span> &#123; <span class=\"hljs-built_in\">console</span>.log(key, value)&#125;) <br></code></pre></td></tr></table></figure>\n\n<h5 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h5><p><code>Map</code> 会保留所有元素的顺序, 是在基于可迭代的基础上构建的，如果考虑到元素迭代或顺序保留或键值类型丰富的情况下都可以使用，下面摘抄自 <code>vue3</code> 源码中依赖收集的核心实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> depsMap = targetMap.get(target)<br><span class=\"hljs-keyword\">if</span> (!depsMap) &#123;<br>  targetMap.set(target, (depsMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()))<br>&#125;<br><span class=\"hljs-keyword\">let</span> dep = depsMap.get(key)<br><span class=\"hljs-keyword\">if</span> (!dep) &#123;<br>  depsMap.set(key, (dep = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>()))<br>&#125;<br><span class=\"hljs-keyword\">if</span> (!dep.has(activeEffect)) &#123;<br>  dep.add(activeEffect)<br>  activeEffect.deps.push(dep)<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h5><blockquote>\n<p>WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的</p>\n</blockquote>\n<p>与<code>Map</code>的区别</p>\n<ul>\n<li>Map 的键可以是任意类型，WeakMap 的键只能是对象类型</li>\n<li>WeakMap 键名所指向的对象，不计入垃圾回收机制</li>\n</ul>\n<p><code>WeakMap</code> 的属性跟操作方法与 <code>Map</code> 一致，同 <code>WeakSet</code> 一样，因为是弱引用，所以 <code>WeakSet</code> 也没有遍历方法</p>\n<h5 id=\"类型的转换\"><a href=\"#类型的转换\" class=\"headerlink\" title=\"类型的转换\"></a>类型的转换</h5><ul>\n<li><code>Map</code> 转为 <code>Array</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 解构</span><br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]])<br><span class=\"hljs-built_in\">console</span>.log([...map])\t<span class=\"hljs-comment\">// [[1, 1], [2, 2], [3, 3]]</span><br><br><span class=\"hljs-comment\">// Array.from()</span><br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]])<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(map))\t<span class=\"hljs-comment\">// [[1, 1], [2, 2], [3, 3]]</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Array</code> 转为 <code>Map</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]])<br><span class=\"hljs-built_in\">console</span>.log(map)\t<span class=\"hljs-comment\">// Map &#123;1 =&gt; 1, 2 =&gt; 2, 3 =&gt; 3&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Map</code> 转为 <code>Object</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 非字符串键名会被转换为字符串</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mapToObj</span>(<span class=\"hljs-params\">map</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-literal\">null</span>)<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> [key, value] <span class=\"hljs-keyword\">of</span> map) &#123;<br>        obj[key] = value<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> obj<br>&#125;<br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>().set(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;vue3js.cn&#x27;</span>).set(<span class=\"hljs-string\">&#x27;age&#x27;</span>, <span class=\"hljs-string\">&#x27;18&#x27;</span>)<br>mapToObj(map)  <span class=\"hljs-comment\">// &#123;name: &quot;vue3js.cn&quot;, age: &quot;18&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Object</code> 转为 <code>Map</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj = &#123;<span class=\"hljs-string\">&quot;a&quot;</span>:<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;b&quot;</span>:<span class=\"hljs-number\">2</span>&#125;;<br><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(<span class=\"hljs-built_in\">Object</span>.entries(obj))<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><ul>\n<li>Set、Map、WeakSet、WeakMap、都是一种集合的数据结构</li>\n<li>Set、WeakSet 是[值,值]的集合，且具有唯一性</li>\n<li>Map 和 WeakMap 是一种[键,值]的集合，Map 的键可以是任意类型，WeakMap 的键只能是对象类型</li>\n<li>Set 和 Map 有遍历方法，WeakSet 和 WeakMap 属于弱引用不可遍历</li>\n</ul>\n","raw":null,"categories":[],"tags":[{"name":"Vue3源码-Set、Map、WeakSet、WeakMap","path":"api/tags/Vue3源码-Set、Map、WeakSet、WeakMap.json"}]},{"title":"Vue3","slug":"vue3","date":"2021-03-18T11:29:18.000Z","updated":"2021-09-14T03:37:58.974Z","comments":true,"top":null,"path":"api/articles/vue3.json","excerpt":null,"keywords":null,"cover":"https://images.unsplash.com/photo-1631347532125-25bd49ea792d?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwzOHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60","content":"<p><img src=\"https://images.unsplash.com/photo-1631347532125-25bd49ea792d?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwzOHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\" alt=\"img\"></p>\n<p>学习Vue3最快的方式：就是对比veu2它有什么变化，那么对比Vue2</p>\n<p>Vue3有什么不同呢？</p>\n<h3 id=\"1-vue2和vue3双向数据绑定原理发生了改变\"><a href=\"#1-vue2和vue3双向数据绑定原理发生了改变\" class=\"headerlink\" title=\"1. vue2和vue3双向数据绑定原理发生了改变\"></a>1. vue2和vue3双向数据绑定原理发生了改变</h3><p><strong>vue2</strong> 的双向数据绑定是利用ES5 的一个 API <code>Object.definePropert()</code>对数据进行劫持 结合 发布订阅模式的方式来实现的。</p>\n<p><strong>vue3</strong> 中使用了 es6 的 <code>Proxy</code>API 对数据代理。</p>\n<p>相比于vue2.x，使用proxy的优势如下</p>\n<ol>\n<li>defineProperty只能监听某个属性，不能对全对象监听</li>\n<li>可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可）</li>\n<li>可以监听数组，不用再去单独的对数组做特异性操作 vue3.x可以检测到数组内部数据的变化</li>\n</ol>\n<h4 id=\"2-默认进行懒观察（lazy-observation）。\"><a href=\"#2-默认进行懒观察（lazy-observation）。\" class=\"headerlink\" title=\"2. 默认进行懒观察（lazy observation）。\"></a>2. 默认进行懒观察（lazy observation）。</h4><p>在 2.x 版本里，不管数据多大，都会在一开始就为其创建观察者。当数据很大时，这可能会在页面载入时造成明显的性能压力。3.x 版本，只会对「被用于渲染初始可见部分的数据」创建观察者，而且 3.x 的观察者更高效。</p>\n<ol start=\"3\">\n<li><p>更精准的变更通知。<br>比例来说：2.x 版本中，使用 Vue.set 来给对象新增一个属性时，这个对象的所有 watcher 都会重新运行；3.x 版本中，只有依赖那个属性的 watcher 才会重新运行。</p>\n</li>\n<li><p>3.0 新加入了 TypeScript 以及 PWA 的支持<br> 5.vue2和vue3组件发送改变<strong>创建一个 <code>template</code></strong></p>\n<p>组件来说，大多代码在Vue2和Vue3都<strong>非常相似</strong>。Vue3支持<code>碎片(Fragments)</code>，就是说在组件可以拥有多个根节点。</p>\n<p>这种新特性可以减少很多组件之间的<code>div</code>包裹元素。在开发vue的时候，我们会发现每一个组件都会有个<code>div</code>元素包裹着。就会出现很多层多余的<code>div</code>元素。<code>碎片(Fragments)</code>解决了这个问题。对于有完美强迫症的童鞋“真的时太棒了”。我们这里的例子里就不展示了，用简单的单根节点的组件。</p>\n<p><strong>Vue2 表格template</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;form-element&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span> &#123;&#123; title &#125;&#125; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;text&#x27;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;username&#x27;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&#x27;Username&#x27;</span> /&gt;</span><br>    <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;password&#x27;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;password&#x27;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&#x27;Password&#x27;</span> /&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;login&#x27;</span>&gt;</span><br>      Submit<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span> <br>      Values: &#123;&#123; username + &#x27; &#x27; + password &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在Vue3的唯一真正的不同在于数据获取。Vue3中的<code>反应数据（Reactive Data）</code>是包含在一个<code>反应状态（Reactive State）</code>变量中。— 所以我们需要访问这个反应状态来获取数据值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;form-element&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span> &#123;&#123; state.title &#125;&#125; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;text&#x27;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;state.username&#x27;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&#x27;Username&#x27;</span></span><br><span class=\"hljs-tag\">    /&gt;</span><br>    <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;password&#x27;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;state.password&#x27;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&#x27;Password&#x27;</span></span><br><span class=\"hljs-tag\">    /&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;login&#x27;</span>&gt;</span><br>      Submit<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span> <br>      Values: &#123;&#123; state.username + &#x27; &#x27; + state.password &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<h2 id=\"建立数据-data\"><a href=\"#建立数据-data\" class=\"headerlink\" title=\"建立数据 data\"></a><strong>建立数据 <code>data</code></strong></h2><p>  <strong>这里就是Vue2与Vue3 最大的区别 — Vue2使用<code>选项类型API（Options API）</code>对比Vue3<code>合成型API（Composition API）</code></strong></p>\n<p>  旧的选项型API在代码里分割了不同的属性（properties）：data，computed属性，methods，等等。新的合成型API能让我们用方法（function）来分割，相比于旧的API使用属性来分组，这样代码会更加简便和整洁。</p>\n<blockquote>\n<p>现在我们来对比一下Vue2写法和Vue3写法在代码里面的区别。</p>\n</blockquote>\n<p>  <strong>Vue2</strong> - 这里把两个数据放入data属性中</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  在<strong>Vue3.0</strong>，我们就需要使用一个新的<code>setup()</code>方法，此方法在组件初始化构造的时候触发。</p>\n<p>  为了可以让开发者对反应型数据有更多的控制，我们可以直接使用到 Vue3 的<code>反应API（reactivity API）</code>。</p>\n<p>  使用以下三步来建立<code>反应性数据</code>:</p>\n<ol>\n<li><p>从vue引入<code>reactive</code></p>\n</li>\n<li><p>使用<code>reactive()</code>方法来声名我们的数据为反应性数据</p>\n</li>\n<li><p>使用<code>setup()</code>方法来返回我们的反应性数据，从而我们的template可以获取这些反应性数据</p>\n<p>上一波代码，让大家更容易理解是怎么实现的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; reactive &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup () &#123;<br>    <span class=\"hljs-keyword\">const</span> state = reactive(&#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;)<br><br>    <span class=\"hljs-keyword\">return</span> &#123; state &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这里构造的反应性数据就可以被<code>template</code>使用，可以通过<code>state.username</code>和<code>state.password</code>获得数据的值。</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"Vue2-对比-Vue3的-methods-编写\"><a href=\"#Vue2-对比-Vue3的-methods-编写\" class=\"headerlink\" title=\"Vue2 对比 Vue3的 methods 编写\"></a><strong>Vue2 对比 Vue3的 <code>methods</code> 编写</strong></h2><p>  <strong>Vue2</strong> 的选项型API是把methods分割到独立的属性区域的。我们可以直接在这个属性里面添加方法来处理各种前端逻辑。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    login () &#123;<br>      <span class=\"hljs-comment\">// 登陆方法</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  <strong>Vue3</strong> 的合成型API里面的<code>setup()</code>方法也是可以用来操控methods的。创建声名方法其实和声名数据状态是一样的。— 我们需要先声名一个方法然后在<code>setup()</code>方法中<code>返回(return)</code>， 这样我们的组件内就可以调用这个方法了。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup () &#123;<br>    <span class=\"hljs-keyword\">const</span> state = reactive(&#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;)<br><br>    <span class=\"hljs-keyword\">const</span> login = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-comment\">// 登陆方法</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> &#123; <br>      login,<br>      state<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"生命周期钩子-—-Lifecyle-Hooks\"><a href=\"#生命周期钩子-—-Lifecyle-Hooks\" class=\"headerlink\" title=\"生命周期钩子 — Lifecyle Hooks\"></a><strong>生命周期钩子 — <code>Lifecyle Hooks</code></strong></h2><p>  在 <strong>Vue2</strong>，我们可以直接在组件属性中调用Vue的生命周期的钩子。以下使用一个<code>组件已挂载（mounted）</code>生命周期触发钩子。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>  &#125;,<br>  mounted () &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;组件已挂载&#x27;</span>)<br>  &#125;,<br>  methods: &#123;<br>    login () &#123;<br>      <span class=\"hljs-comment\">// login method</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  现在 <strong>Vue3</strong> 的合成型API里面的<code>setup()</code>方法可以包含了基本所有东西。生命周期的钩子就是其中之一！</p>\n<p>  但是在 Vue3 生周期钩子不是全局可调用的了，需要另外从vue中引入。和刚刚引入<code>reactive</code>一样，生命周期的挂载钩子叫<code>onMounted</code>。</p>\n<p>  引入后我们就可以在<code>setup()</code>方法里面使用<code>onMounted</code>挂载的钩子了。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; reactive, onMounted &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup () &#123;<br>    <span class=\"hljs-comment\">// ..</span><br><br>    onMounted(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;组件已挂载&#x27;</span>)<br>    &#125;)<br><br>    <span class=\"hljs-comment\">// ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"计算属性-Computed-Properties\"><a href=\"#计算属性-Computed-Properties\" class=\"headerlink\" title=\"计算属性 - Computed Properties\"></a><strong>计算属性 - <code>Computed Properties</code></strong></h2><p>  我们一起试试添加一个计算属性来转换<code>username</code>成小写字母。</p>\n<p>  在 <strong>Vue2</strong> 中实现，我们只需要在组件内的选项属性中添加即可</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-comment\">// .. </span><br>  computed: &#123;<br>    lowerCaseUsername () &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.username.toLowerCase()<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  <strong>Vue3</strong> 的设计模式给予开发者们按需引入需要使用的依赖包。这样一来就不需要多余的引用导致性能或者打包后太大的问题。Vue2就是有这个一直存在的问题。</p>\n<p>  所以在 Vue3 使用计算属性，我们先需要在组件内引入<code>computed</code>。</p>\n<p>  使用方式就和<code>反应性数据（reactive data）</code>一样，在<code>state</code>中加入一个计算属性:</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; reactive, onMounted, computed &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup () &#123;<br>    <span class=\"hljs-keyword\">const</span> state = reactive(&#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      lowerCaseUsername: computed(<span class=\"hljs-function\">() =&gt;</span> state.username.toLowerCase())<br>    &#125;)<br><br>    <span class=\"hljs-comment\">// ...</span><br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"接收-Props\"><a href=\"#接收-Props\" class=\"headerlink\" title=\"接收 Props\"></a><strong>接收 <code>Props</code></strong></h2><p>  接收组件<code>props</code>参数传递这一块为我们带来了Vue2和Vue3之间最大的区别。<strong>—<code>this</code>在vue3中与vue2代表着完全不一样的东西。</strong></p>\n<p>  在 <strong>Vue2</strong>，<code>this</code>代表的是当前组件，不是某一个特定的属性。所以我们可以直接使用<code>this</code>访问prop属性值。就比如下面的例子在挂载完成后打印处当前传入组件的参数<code>title</code>。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">mounted () &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;title: &#x27;</span> + <span class=\"hljs-built_in\">this</span>.title)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  但是在 <strong>Vue3</strong> 中，<code>this</code>无法直接拿到props属性，emit events（触发事件）和组件内的其他属性。不过全新的<code>setup()</code>方法可以接收两个参数：</p>\n<ol>\n<li><p><code>props</code> - 不可变的组件参数</p>\n</li>\n<li><p><code>context</code> - Vue3 暴露出来的属性（emit，slots，attrs）</p>\n<p>所以在 Vue3 接收与使用props就会变成这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">setup (props) &#123;<br>    <span class=\"hljs-comment\">// ...</span><br><br>    onMounted(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;title: &#x27;</span> + props.title)<br>    &#125;)<br><br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<h2 id=\"事件-Emitting-Events\"><a href=\"#事件-Emitting-Events\" class=\"headerlink\" title=\"事件 - Emitting Events\"></a><strong>事件 - <code>Emitting Events</code></strong></h2><p>  在 <strong>Vue2</strong> 中自定义事件是非常直接的，但是在 <strong>Vue3</strong> 的话，我们会有更多的控制的自由度。</p>\n<p>  举例，现在我们想在点击提交按钮时触发一个<code>login</code>的事件。</p>\n<p>  在 <strong>Vue2</strong> 中我们会调用到<code>this.$emit</code>然后传入事件名和参数对象。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">login () &#123;<br>      <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;login&#x27;</span>, &#123;<br>        username: <span class=\"hljs-built_in\">this</span>.username,<br>        password: <span class=\"hljs-built_in\">this</span>.password<br>      &#125;)<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>  但是在 <strong>Vue3</strong>中，我们刚刚说过<code>this</code>已经不是和vue2代表着这个组件了，所以我们需要不一样的自定义事件的方式。</p>\n<p>  那怎么办呀？! ლಠ益ಠ)ლ</p>\n<p>  不用慌，在<code>setup()</code>中的第二个参数<code>content</code>对象中就有<code>emit</code>，这个是和<code>this.$emit</code>是一样的。那么我们只要在<code>setup()</code>接收第二个参数中使用<strong>分解对象法</strong>取出<code>emit</code>就可以在setup方法中随意使用了。</p>\n<p>  然后我们在<code>login</code>方法中编写登陆事件：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">setup (props, &#123; emit &#125;) &#123;<br>    <span class=\"hljs-comment\">// ...</span><br><br>    <span class=\"hljs-keyword\">const</span> login = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      emit(<span class=\"hljs-string\">&#x27;login&#x27;</span>, &#123;<br>        username: state.username,<br>        password: state.password<br>      &#125;)<br>    &#125;<br><br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"最终的vue2对比vue3代码\"><a href=\"#最终的vue2对比vue3代码\" class=\"headerlink\" title=\"最终的vue2对比vue3代码\"></a><strong>最终的vue2对比vue3代码</strong></h2><p>  ![img](data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='2000' height='1250'></svg>)</p>\n<p>  真的是太棒了，能看到这里的童鞋们，你们现在基本都看到vue2与vue3其实概念与理念都是一样的。只是有一些属性获取方式和声名和定义方式稍微变了。一直在鬼哭狼嚎的小小前端开发猿人们，你们可以松一口气了吧。</p>\n<p>  总结一下，我觉得 <strong>Vue3</strong> 给我们前端开发者带来了全新的开发体验，更好的使用弹性，可控度也得到了大大的提升。如果你是一个学过或者接触过 <strong>React</strong> 然后现在想使用Vue的话，应该特别兴奋，因为很多使用方式都和React非常相近了 ！</p>\n<p>  全新的<code>合成式API（Composition API）</code>可以提升代码的解耦程度 —— 特别是大型的前端应用，效果会更加明显。还有就是按需引用的有了更细微的可控性，让项目的性能和打包大小有更好的控制。</p>\n<p>  最后我把完成的 <strong>Vue2</strong> 和 <strong>Vue3</strong> 的组件代码发出来给大家：</p>\n<p>  <strong>Vue2</strong></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&#x27;form-element&#x27;</span>&gt;<br>    &lt;h2&gt; &#123;&#123; title &#125;&#125; &lt;/h2&gt;<br>    &lt;input type=<span class=\"hljs-string\">&#x27;text&#x27;</span> v-model=<span class=\"hljs-string\">&#x27;username&#x27;</span> placeholder=<span class=\"hljs-string\">&#x27;Username&#x27;</span> /&gt;<br>    <br>    &lt;input type=<span class=\"hljs-string\">&#x27;password&#x27;</span> v-model=<span class=\"hljs-string\">&#x27;password&#x27;</span> placeholder=<span class=\"hljs-string\">&#x27;Password&#x27;</span> /&gt;<br><br>    &lt;button @click=<span class=\"hljs-string\">&#x27;login&#x27;</span>&gt;<br>      Submit<br>    &lt;/button&gt;<br>    &lt;p&gt; <br>      Values: &#123;&#123; username + <span class=\"hljs-string\">&#x27; &#x27;</span> + password &#125;&#125;<br>    &lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>  &#125;,<br>  mounted () &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;title: &#x27;</span> + <span class=\"hljs-built_in\">this</span>.title)<br>  &#125;,<br>  computed: &#123;<br>    lowerCaseUsername () &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.username.toLowerCase()<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    login () &#123;<br>      <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;login&#x27;</span>, &#123;<br>        username: <span class=\"hljs-built_in\">this</span>.username,<br>        password: <span class=\"hljs-built_in\">this</span>.password<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p>  <strong>Vue3</strong></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&#x27;form-element&#x27;</span>&gt;<br>    &lt;h2&gt; &#123;&#123; state.title &#125;&#125; &lt;/h2&gt;<br>    &lt;input type=<span class=\"hljs-string\">&#x27;text&#x27;</span> v-model=<span class=\"hljs-string\">&#x27;state.username&#x27;</span> placeholder=<span class=\"hljs-string\">&#x27;Username&#x27;</span> /&gt;<br>    <br>    &lt;input type=<span class=\"hljs-string\">&#x27;password&#x27;</span> v-model=<span class=\"hljs-string\">&#x27;state.password&#x27;</span> placeholder=<span class=\"hljs-string\">&#x27;Password&#x27;</span> /&gt;<br><br>    &lt;button @click=<span class=\"hljs-string\">&#x27;login&#x27;</span>&gt;<br>      Submit<br>    &lt;/button&gt;<br>    &lt;p&gt; <br>      Values: &#123;&#123; state.username + <span class=\"hljs-string\">&#x27; &#x27;</span> + state.password &#125;&#125;<br>    &lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">import</span> &#123; reactive, onMounted, computed &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup (props, &#123; emit &#125;) &#123;<br>    <span class=\"hljs-keyword\">const</span> state = reactive(&#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      lowerCaseUsername: computed(<span class=\"hljs-function\">() =&gt;</span> state.username.toLowerCase())<br>    &#125;)<br><br>    onMounted(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;title: &#x27;</span> + props.title)<br>    &#125;)<br><br>    <span class=\"hljs-keyword\">const</span> login = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      emit(<span class=\"hljs-string\">&#x27;login&#x27;</span>, &#123;<br>        username: state.username,<br>        password: state.password<br>      &#125;)<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> &#123; <br>      login,<br>      state<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n","raw":null,"categories":[],"tags":[{"name":"Vue3","path":"api/tags/Vue3.json"}]},{"title":"Vue3源码-Proxy","slug":"vue3源码","date":"2021-03-18T11:29:18.000Z","updated":"2021-09-14T03:38:19.217Z","comments":true,"top":null,"path":"api/articles/vue3源码.json","excerpt":null,"keywords":null,"cover":"https://images.unsplash.com/photo-1631345288967-dad5dce64717?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHw1MHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60","content":"<p><img src=\"https://images.unsplash.com/photo-1631345288967-dad5dce64717?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHw1MHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\" alt=\"img\"></p>\n<h5 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> proxy = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(target, handle)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>target 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理</li>\n<li>handler 一个通常以函数作为属性的对象，用来定制拦截行为</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> origon=&#123;&#125;<br><br><span class=\"hljs-keyword\">const</span> obj=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(origon,&#123;<br>   get:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target,propkey,receiver</span>)</span>&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;10&quot;</span><br>   &#125;<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(obj.b);<span class=\"hljs-comment\">//10</span><br><span class=\"hljs-built_in\">console</span>.log(obj.a);<span class=\"hljs-comment\">//10</span><br><span class=\"hljs-built_in\">console</span>.log(origon.a);<span class=\"hljs-comment\">//undefined</span><br><span class=\"hljs-built_in\">console</span>.log(origon.a);<span class=\"hljs-comment\">//undefined</span><br><br></code></pre></td></tr></table></figure>\n\n<p>上方代码我们给一个空对象的get架设了一层代理，所有<code>get</code>操作都会直接返回我们定制的数字10，需要注意的是，代理只会对<code>proxy</code>对象生效，如上方的<code>origin</code>就没有任何效果</p>\n<h2 id=\"Handler-对象常用的方法\"><a href=\"#Handler-对象常用的方法\" class=\"headerlink\" title=\"Handler 对象常用的方法\"></a>Handler 对象常用的方法</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th align=\"left\">描述</th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>handler.has()</td>\n<td align=\"left\">in 操作符的捕捉器。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>handler.get()</td>\n<td align=\"left\">属性读取操作的捕捉器。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>handler.set()</td>\n<td align=\"left\">属性设置操作的捕捉器。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>handler.deleteProperty()</td>\n<td align=\"left\">delete 操作符的捕捉器。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>handler.ownKeys()</td>\n<td align=\"left\">Object.getOwnPropertyNames 方法和 Object.getOwnPropertySymbols 方法的捕捉器。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>handler.apply()</td>\n<td align=\"left\">函数调用操作的捕捉器。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>handler.construct()</td>\n<td align=\"left\">new 操作符的捕捉器</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>下面挑<code>handler.get</code>重点讲一下，其它方法的使用也都大同小异，不同的是参数的区别</p>\n<h3 id=\"handler-get\"><a href=\"#handler-get\" class=\"headerlink\" title=\"handler.get\"></a>handler.get</h3><p><code>get</code>我们在上面例子已经体验过了，现在详细介绍一下，用于代理目标对象的属性读取操作</p>\n<p>授受三个参数 <code>get(target, propKey, ?receiver)</code></p>\n<ul>\n<li>target 目标对象</li>\n<li>propkey 属性名</li>\n<li>receiver Proxy 实例本身</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> preson = &#123;<br>   like: <span class=\"hljs-string\">&#x27;vue.js&#x27;</span><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(preson, &#123;<br>   get: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">target, propkey</span>) </span>&#123;<br>      <span class=\"hljs-keyword\">if</span> (propkey <span class=\"hljs-keyword\">in</span> target) &#123;<br>         <span class=\"hljs-keyword\">return</span> target[propkey]<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>         <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">ReferenceError</span>(<span class=\"hljs-string\">&#x27;错误&#x27;</span>)<br>      &#125;<br>   &#125;<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(obj.like);<span class=\"hljs-comment\">// vuejs</span><br><span class=\"hljs-built_in\">console</span>.log(obj.text);<span class=\"hljs-comment\">//错误</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong></p>\n<ul>\n<li>如果要访问的目标属性是不可写以及不可配置的，则返回的值必须与该目标属性的值相同</li>\n<li>如果要访问的目标属性没有配置访问方法，即get方法是undefined的，则返回值必须为undefined</li>\n</ul>\n<p>如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;&#125;;<br><span class=\"hljs-built_in\">Object</span>.defineProperty(obj, <span class=\"hljs-string\">&quot;a&quot;</span>, &#123; <br>  configurable: <span class=\"hljs-literal\">false</span>, <br>  enumerable: <span class=\"hljs-literal\">false</span>, <br>  value: <span class=\"hljs-number\">10</span>, <br>  writable: <span class=\"hljs-literal\">false</span> <br>&#125;)<br><br><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(obj, &#123;<br>  get: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, prop</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">20</span>;<br>  &#125;<br>&#125;)<br><br>p.a <span class=\"hljs-comment\">// Uncaught TypeError: &#x27;get&#x27; on proxy: property &#x27;a&#x27; is a read-only and non-configurable..</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"可撤消的Proxy\"><a href=\"#可撤消的Proxy\" class=\"headerlink\" title=\"可撤消的Proxy\"></a>可撤消的Proxy</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">proxy&#96;有一个唯一的静态方法，&#96;Proxy.revocable(target, handler)<br></code></pre></td></tr></table></figure>\n\n<p><code>Proxy.revocable()</code>方法可以用来创建一个可撤销的代理对象</p>\n<p>该方法的返回值是一个对象，其结构为： <code>&#123;&quot;proxy&quot;: proxy, &quot;revoke&quot;: revoke&#125;</code></p>\n<ul>\n<li>proxy 表示新生成的代理对象本身，和用一般方式 new Proxy(target, handler) 创建的代理对象没什么不同，只是它可以被撤销掉。</li>\n<li>revoke 撤销方法，调用的时候不需要加任何参数，就可以撤销掉和它一起生成的那个代理对象。</li>\n</ul>\n<p>该方法常用于完全封闭对目标对象的访问, 如下示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> target = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;vuejs&#x27;</span>&#125;<br><span class=\"hljs-keyword\">const</span> &#123;proxy, revoke&#125; = <span class=\"hljs-built_in\">Proxy</span>.revocable(target, handler)<br>proxy.name <span class=\"hljs-comment\">// 正常取值输出 vuejs</span><br>revoke() <span class=\"hljs-comment\">// 取值完成对proxy进行封闭，撤消代理</span><br>proxy.name <span class=\"hljs-comment\">// TypeError: Revoked</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Proxy的应用场景\"><a href=\"#Proxy的应用场景\" class=\"headerlink\" title=\"Proxy的应用场景\"></a>Proxy的应用场景</h2><p><code>Proxy</code>的应用范围很广，下方列举几个典型的应用场景</p>\n<h3 id=\"校验器\"><a href=\"#校验器\" class=\"headerlink\" title=\"#校验器\"></a><a href=\"https://vue3js.cn/es6/#%E6%A0%A1%E9%AA%8C%E5%99%A8\">#</a><strong>校验器</strong></h3><p>想要一个<code>number</code>，拿回来的却是<code>string</code>，惊不惊喜？意不意外？下面我们使用<code>Proxy</code>实现一个逻辑分离的数据格式验证器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> target = &#123;<br>  _id: <span class=\"hljs-string\">&#x27;1024&#x27;</span>,<br>  name:  <span class=\"hljs-string\">&#x27;vuejs&#x27;</span><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> validators = &#123;  <br>    name(val) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> val === <span class=\"hljs-string\">&#x27;string&#x27;</span>;<br>    &#125;,<br>    _id(val) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> val === <span class=\"hljs-string\">&#x27;number&#x27;</span> &amp;&amp; val &gt; <span class=\"hljs-number\">1024</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> createValidator = <span class=\"hljs-function\">(<span class=\"hljs-params\">target, validator</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(target, &#123;<br>    _validator: validator,<br>    set(target, propkey, value, proxy)&#123;<br>      <span class=\"hljs-keyword\">let</span> validator = <span class=\"hljs-built_in\">this</span>._validator[propkey](value)<br>      <span class=\"hljs-keyword\">if</span>(validator)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.set(target, propkey, value, proxy)<br>      &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">`Cannot set <span class=\"hljs-subst\">$&#123;propkey&#125;</span> to <span class=\"hljs-subst\">$&#123;value&#125;</span>. Invalid type.`</span>)<br>      &#125;<br>    &#125;<br>  &#125;)<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> proxy = createValidator(target, validators)<br><br>proxy.name = <span class=\"hljs-string\">&#x27;vue-js.com&#x27;</span> <span class=\"hljs-comment\">// vue-js.com</span><br>proxy.name = <span class=\"hljs-number\">10086</span> <span class=\"hljs-comment\">// Uncaught Error: Cannot set name to 10086. Invalid type.</span><br>proxy._id = <span class=\"hljs-number\">1025</span> <span class=\"hljs-comment\">// 1025</span><br>proxy._id = <span class=\"hljs-number\">22</span>  <span class=\"hljs-comment\">// Uncaught Error: Cannot set _id to 22. Invalid type </span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"私有属性\"><a href=\"#私有属性\" class=\"headerlink\" title=\"私有属性\"></a>私有属性</h3><p>在日常编写代码的过程中，我们想定义一些私有属性，通常是在团队中进行约定，大家按照约定在变量名之前添加下划线 _ 或者其它格式来表明这是一个私有属性，但我们不能保证他能真私‘私有化’，下面使用Proxy轻松实现私有属性拦截</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> target = &#123;<br>   _id: <span class=\"hljs-string\">&#x27;123&#x27;</span>,<br>   name: <span class=\"hljs-string\">&#x27;张三&#x27;</span><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> proxy = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(target, &#123;<br>   get(target, key, proxy) &#123;<br>      <span class=\"hljs-keyword\">if</span> (key[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">&quot;_&quot;</span>) &#123;<br>         <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;我是私有属性&#x27;</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.get(target, key, proxy)<br>   &#125;,<br>   set(target, key, val, proxy) &#123;<br>      <span class=\"hljs-keyword\">if</span> (key[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">&quot;_&quot;</span>) &#123;<br>         <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;我是私有属性&#x27;</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.set(target, key, val, proxy)<br>   &#125;<br>&#125;)<br><br><span class=\"hljs-built_in\">console</span>.log(proxy.name);<span class=\"hljs-comment\">//张三</span><br><span class=\"hljs-built_in\">console</span>.log(proxy._id);<span class=\"hljs-comment\">//Error: 我是私有属性</span><br><span class=\"hljs-built_in\">console</span>.log(proxy.name = <span class=\"hljs-string\">&#x27;李四&#x27;</span>);<span class=\"hljs-comment\">//李四</span><br><span class=\"hljs-built_in\">console</span>.log(proxy._id = <span class=\"hljs-number\">456</span>);<span class=\"hljs-comment\">//Error: 我是私有属性</span><br><br></code></pre></td></tr></table></figure>\n\n<p><code>Proxy</code> 使用场景还有很多很多，不再一一列举，如果你需要在某一个动作的生命周期内做一些特定的处理，那么<code>Proxy</code> 都是适合的</p>\n<h4 id=\"为什么要用Proxy重构\"><a href=\"#为什么要用Proxy重构\" class=\"headerlink\" title=\"为什么要用Proxy重构\"></a>为什么要用Proxy重构</h4><p>在 <code>Proxy</code> 之前，<code>JavaScript</code> 中就提供过 <code>Object.defineProperty</code>，允许对对象的 <code>getter/setter</code> 进行拦截</p>\n<p>Vue3.0之前的双向绑定是由 <code>defineProperty</code> 实现, 在3.0重构为 <code>Proxy</code>，那么两者的区别究竟在哪里呢？</p>\n<p>首先我们再来回顾一下它的定义</p>\n<blockquote>\n<p>Object.defineProperty() 方法会直接在一个<strong>对象上</strong>定义一个<strong>新属性</strong>，或者修改一个对象的现有属性，并返回此对象</p>\n</blockquote>\n<p>上面给两个词划了重点，<strong>对象上</strong>，<strong>属性</strong>，我们可以理解为是针对对象上的某一个属性做处理的</p>\n<p><strong>语法</strong></p>\n<ul>\n<li>obj 要定义属性的对象</li>\n<li>prop 要定义或修改的属性的名称或 Symbol</li>\n<li>descriptor 要定义或修改的属性描述符</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.defineProperty(obj, prop, descriptor)<br></code></pre></td></tr></table></figure>\n\n<p>举个例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;&#125;<br><span class=\"hljs-built_in\">Object</span>.defineProperty(obj, <span class=\"hljs-string\">&quot;a&quot;</span>, &#123;<br>  value : <span class=\"hljs-number\">1</span>,<br>  writable : <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// 是否可写 </span><br>  configurable : <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// 是否可配置</span><br>  enumerable : <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// 是否可枚举</span><br>&#125;)<br><br><span class=\"hljs-comment\">// 上面给了三个false, 下面的相关操作就很容易理解了</span><br>obj.a = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// 无效</span><br><span class=\"hljs-keyword\">delete</span> obj.a <span class=\"hljs-comment\">// 无效</span><br><span class=\"hljs-keyword\">for</span>(key <span class=\"hljs-keyword\">in</span> obj)&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(key) <span class=\"hljs-comment\">// 无效 </span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Vue中的defineProperty\"><a href=\"#Vue中的defineProperty\" class=\"headerlink\" title=\"#Vue中的defineProperty\"></a><a href=\"https://vue3js.cn/es6/#vue%E4%B8%AD%E7%9A%84defineproperty\">#</a><strong>Vue中的defineProperty</strong></h3><p>Vue3之前的双向绑定都是通过 <code>defineProperty</code> 的 <code>getter,setter</code> 来实现的，我们先来体验一下 <code>getter,setter</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;&#125;;<br><span class=\"hljs-built_in\">Object</span>.defineProperty(obj, <span class=\"hljs-string\">&#x27;a&#x27;</span>, &#123;<br>  set(val) &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`开始设置新值: <span class=\"hljs-subst\">$&#123;val&#125;</span>`</span>)<br>  &#125;,<br>  get() &#123; <br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`开始读取属性`</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>; <br>  &#125;,<br>  writable : <span class=\"hljs-literal\">true</span><br>&#125;)<br><br>obj.a = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// 开始设置新值: 2</span><br>obj.a <span class=\"hljs-comment\">// 开始获取属性 </span><br></code></pre></td></tr></table></figure>\n\n<p>看到这里，我相信有些同学已经想到了实现双向绑定背后的流程了，其实很简单嘛，只要我们观察到对象属性的变更，再去通知更新视图就好了</p>\n<p>我们摘抄一段 Vue 源码中的核心实现验证一下，这一部分一笔代过，不是本文重点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 源码位置：https://github.com/vuejs/vue/blob/ef56410a2c/src/core/observer/index.js#L135</span><br><span class=\"hljs-comment\">// ...</span><br><span class=\"hljs-built_in\">Object</span>.defineProperty(obj, key, &#123;<br>  enumerable: <span class=\"hljs-literal\">true</span>,<br>  configurable: <span class=\"hljs-literal\">true</span>,<br>  get: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reactiveGetter</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// ...</span><br>    <span class=\"hljs-keyword\">if</span> (Dep.target) &#123;<br>      <span class=\"hljs-comment\">// 收集依赖</span><br>      dep.depend()<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> value<br>  &#125;,<br>  set: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reactiveSetter</span> (<span class=\"hljs-params\">newVal</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// ...</span><br>    <span class=\"hljs-comment\">// 通知视图更新</span><br>    dep.notify()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"对象新增属性为什么不更新\"><a href=\"#对象新增属性为什么不更新\" class=\"headerlink\" title=\"#对象新增属性为什么不更新\"></a><a href=\"https://vue3js.cn/es6/#%E5%AF%B9%E8%B1%A1%E6%96%B0%E5%A2%9E%E5%B1%9E%E6%80%A7%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%9B%B4%E6%96%B0\">#</a><strong>对象新增属性为什么不更新</strong></h3><p>这个问题用过Vue的同学应该有超过95%比例遇到过</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">data  () &#123;<br>  <span class=\"hljs-keyword\">return</span>  &#123;<br>    obj: &#123;<br>      a: <span class=\"hljs-number\">1</span><br>    &#125;<br>  &#125;<br>&#125;<br><br>methods: &#123;<br>  update () &#123;<br>    <span class=\"hljs-built_in\">this</span>.obj.b = <span class=\"hljs-number\">2</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上面的伪代码，当我们执行 <code>update</code> 更新 <code>obj</code> 时，我们预期视图是要随之更新的，实际是并不会</p>\n<p>这个其实很好理解，我们先要明白 <code>vue</code> 中 <code>data init</code> 的时机，<code>data init</code> 是在生命周期 <code>created</code> 之前的操作，会对 <code>data</code> 绑定一个观察者 <code>Observer</code>，之后 <code>data</code> 中的字段更新都会通知依赖收集器<code>Dep</code>触发视图更新</p>\n<p>然后我们回到 <code>defineProperty</code> 本身，是对<strong>对象上的属性</strong>做操作，而非对象本身</p>\n<p>一句话来说就是，在 <code>Observer data</code> 时，新增属性并不存在，自然就不会有 <code>getter, setter</code>，也就解释了为什么新增视图不更新，解决有很多种，<code>Vue</code> 提供的全局<code>$set</code> 本质也是给新增的属性手动 <code>observer</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 源码位置 https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js#L201</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">set</span> (<span class=\"hljs-params\">target: Array&lt;any&gt; | Object, key: any, val: any</span>): <span class=\"hljs-title\">any</span> </span>&#123;<br>  <span class=\"hljs-comment\">// ....</span><br>  <span class=\"hljs-keyword\">if</span> (!ob) &#123;<br>    target[key] = val<br>    <span class=\"hljs-keyword\">return</span> val<br>  &#125;<br>  defineReactive(ob.value, key, val)<br>  ob.dep.notify()<br>  <span class=\"hljs-keyword\">return</span> val<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数组变异\"><a href=\"#数组变异\" class=\"headerlink\" title=\"#数组变异\"></a><a href=\"https://vue3js.cn/es6/#%E6%95%B0%E7%BB%84%E5%8F%98%E5%BC%82\">#</a>数组变异</h3><blockquote>\n<p>由于 JavaScript 的限制，Vue 不能检测以下数组的变动： 当你利用索引直接设置一个数组项时，例如：vm.items[indexOfItem] = newValue</p>\n</blockquote>\n<p>先来看一段代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>  data: &#123;<br>    items: [<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>]<br>  &#125;<br>&#125;)<br>vm.items[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">&#x27;4&#x27;</span> <span class=\"hljs-comment\">// 视图并未更新</span><br></code></pre></td></tr></table></figure>\n\n<p>文档已经做出了解释，但并不是<code>defineProperty</code>的锅，而是尤大在设计上对性能的权衡，下面这段代码可以验证</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineReactive</span>(<span class=\"hljs-params\">data, key, val</span>) </span>&#123;<br>  <span class=\"hljs-built_in\">Object</span>.defineProperty(data, key, &#123;<br>    enumerable: <span class=\"hljs-literal\">true</span>,<br>    configurable: <span class=\"hljs-literal\">true</span>,<br>      get: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineGet</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`get key: <span class=\"hljs-subst\">$&#123;key&#125;</span> val: <span class=\"hljs-subst\">$&#123;val&#125;</span>`</span>);<br>        <span class=\"hljs-keyword\">return</span> val;<br>      &#125;,<br>      set: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineSet</span>(<span class=\"hljs-params\">newVal</span>) </span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`set key: <span class=\"hljs-subst\">$&#123;key&#125;</span> val: <span class=\"hljs-subst\">$&#123;newVal&#125;</span>`</span>);<br>        val = newVal;<br>      &#125;<br>  &#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">observe</span>(<span class=\"hljs-params\">data</span>) </span>&#123;<br>  <span class=\"hljs-built_in\">Object</span>.keys(data).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>) </span>&#123;<br>    defineReactive(data, key, data[key]);<br>  &#125;)<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> test = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><br>observe(test);<br><br>test[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">// set key: 0 val: 4</span><br></code></pre></td></tr></table></figure>\n\n<p>虽然说索引变更不是 <code>defineProperty</code> 的锅，但新增索引的确是 <code>defineProperty</code> 做不到的，所以就有了数组的变异方法</p>\n<p>能看到这里，大概也能猜到内部实现了，还是跟<code>$set</code>一样，手动 <code>observer</code>，下面我们验证一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> methodsToPatch = [<br>  <span class=\"hljs-string\">&#x27;push&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;pop&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;shift&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;unshift&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;splice&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;sort&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;reverse&#x27;</span><br>]<br><br>methodsToPatch.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">method</span>) </span>&#123;<br>  <span class=\"hljs-comment\">// 缓存原生数组</span><br>  <span class=\"hljs-keyword\">const</span> original = arrayProto[method]<br>  <span class=\"hljs-comment\">// def使用Object.defineProperty重新定义属性</span><br>  def(arrayMethods, method, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mutator</span> (<span class=\"hljs-params\">...args</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">const</span> result = original.apply(<span class=\"hljs-built_in\">this</span>, args) <span class=\"hljs-comment\">// 调用原生数组的方法</span><br><br>    <span class=\"hljs-keyword\">const</span> ob = <span class=\"hljs-built_in\">this</span>.__ob__  <span class=\"hljs-comment\">// ob就是observe实例observe才能响应式</span><br>    <span class=\"hljs-keyword\">let</span> inserted<br>    <span class=\"hljs-keyword\">switch</span> (method) &#123;<br>      <span class=\"hljs-comment\">// push和unshift方法会增加数组的索引，但是新增的索引位需要手动observe的</span><br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;push&#x27;</span>:<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;unshift&#x27;</span>:<br>        inserted = args<br>        <span class=\"hljs-keyword\">break</span><br>      <span class=\"hljs-comment\">// 同理，splice的第三个参数，为新增的值，也需要手动observe</span><br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;splice&#x27;</span>:<br>        inserted = args.slice(<span class=\"hljs-number\">2</span>)<br>        <span class=\"hljs-keyword\">break</span><br>    &#125;<br>    <span class=\"hljs-comment\">// 其余的方法都是在原有的索引上更新，初始化的时候已经observe过了</span><br>    <span class=\"hljs-keyword\">if</span> (inserted) ob.observeArray(inserted)<br>    <span class=\"hljs-comment\">// dep通知所有的订阅者触发回调</span><br>    ob.dep.notify()<br>    <span class=\"hljs-keyword\">return</span> result<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h4><p>一个优秀的开源框架本身就是一个不断打碎重朔的过程，上面做了些许铺垫，现在我们简要总结一下</p>\n<ul>\n<li><code>Proxy</code> 作为新标准将受到浏览器厂商重点持续的性能优化</li>\n<li><code>Proxy</code> 能观察的类型比 <code>defineProperty</code> 更丰富</li>\n<li><code>Proxy</code> 不兼容IE，也没有 <code>polyfill</code>, <code>defineProperty</code> 能支持到IE9</li>\n<li><code>Object.definedProperty</code> 是劫持对象的属性，新增元素需要再次 <code>definedProperty</code>。而 <code>Proxy</code> 劫持的是整个对象，不需要做特殊处理</li>\n<li>使用 <code>defineProperty</code> 时，我们修改原来的 <code>obj</code> 对象就可以触发拦截，而使用 <code>proxy</code>，就必须修改代理对象，即 <code>Proxy</code> 的实例才可以触发拦截</li>\n</ul>\n","raw":null,"categories":[],"tags":[{"name":"Vue3源码-Proxy","path":"api/tags/Vue3源码-Proxy.json"}]},{"title":"vue源码理解——生命周期篇","slug":"vue源码理解4","date":"2021-03-18T11:29:18.000Z","updated":"2021-09-14T03:39:53.835Z","comments":true,"top":null,"path":"api/articles/vue源码理解4.json","excerpt":null,"keywords":null,"cover":"https://images.unsplash.com/photo-1631410717426-205dffe528c5?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxMTh8fHxlbnwwfHx8fA==&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60","content":"<p><img src=\"https://images.unsplash.com/photo-1631410717426-205dffe528c5?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxMTh8fHxlbnwwfHx8fA==&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\" alt=\"img\"></p>\n<h4 id=\"生命周期：\"><a href=\"#生命周期：\" class=\"headerlink\" title=\"生命周期：\"></a>生命周期：</h4><p>在<code>Vue</code>中，每个<code>Vue</code>实例从被创建出来到最终被销毁都会经历一个过程，就像人一样，从出生到死亡。在这一过程里会发生许许多多的事，例如设置数据监听，编译模板，组件挂载等。在<code>Vue</code>中，把<code>Vue</code>实例从被创建出来到最终被销毁的这一过程称为<code>Vue</code>实例的生命周期，同时，在<code>Vue</code>实例生命周期的不同阶段<code>Vue</code>还提供了不同的钩子函数，以方便用户在不同的生命周期阶段做一些额外的事情。那么，接下来的几篇文章我们就从源码角度深入剖析一下一个<code>Vue</code>实例在从生到死的生命周期里到底都经历了些什么，每个阶段都做了哪些事情。</p>\n<h5 id=\"生命周期流程图\"><a href=\"#生命周期流程图\" class=\"headerlink\" title=\"生命周期流程图\"></a>生命周期流程图</h5><p>下图是<code>Vue</code>官网给出的<code>Vue</code>实例的生命周期流程图，如下：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425145156115.png\" alt=\"image-20210425145156115\"></p>\n<p>从图中我们可以看到，<code>Vue</code>实例的生命周期大致可分为4个阶段：</p>\n<ul>\n<li>初始化阶段：为<code>Vue</code>实例上初始化一些属性，事件以及响应式数据；</li>\n<li>模板编译阶段：将模板编译成渲染函数；</li>\n<li>挂载阶段：将实例挂载到指定的<code>DOM</code>上，即将模板渲染到真实<code>DOM</code>中；</li>\n<li>销毁阶段：将实例自身从父组件中删除，并取消依赖追踪及事件监听器；</li>\n</ul>\n<h6 id=\"总结：：\"><a href=\"#总结：：\" class=\"headerlink\" title=\"总结：：\"></a>总结：：</h6><p>本篇文章是生命周期篇的开篇综述，借用<code>Vue</code>官网的生命周期流程图介绍了一个<code>Vue</code>实例的生命周期大致可分为四个阶段，分别是初始化阶段、模板编译阶段、挂载阶段、销毁阶段。接下来的几篇文章我们就从这个流程图为基础，自上到下，从每个阶段入手，深入分析在每个阶段里都干了些什么。</p>\n<h2 id=\"2-new-Vue-都干了什么\"><a href=\"#2-new-Vue-都干了什么\" class=\"headerlink\" title=\"2. new Vue()都干了什么\"></a>2. new Vue()都干了什么</h2><p>初始化阶段所做的第一件事就是<code>new Vue()</code>创建一个<code>Vue</code>实例，那么<code>new Vue()</code>的内部都干了什么呢？ 我们知道，<code>new</code> 关键字在 <code>JS</code>中表示从一个类中实例化出一个对象来，由此可见， <code>Vue</code> 实际上是一个类。所以<code>new Vue()</code>实际上是执行了<code>Vue</code>类的构造函数，那么我们来看一下<code>Vue</code>类是如何定义的，<code>Vue</code>类的定义是在源码的<code>src/core/instance/index.js</code> 中，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Vue</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&#x27;production&#x27;</span> &amp;&amp;<br>    !(<span class=\"hljs-built_in\">this</span> <span class=\"hljs-keyword\">instanceof</span> Vue)<br>  ) &#123;<br>    warn(<span class=\"hljs-string\">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>)<br>  &#125;<br>  <span class=\"hljs-built_in\">this</span>._init(options)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，<code>Vue</code>类的定义非常简单，其构造函数核心就一行代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">this</span>._init(options)<br></code></pre></td></tr></table></figure>\n\n<p>调用原型上的<code>_init(options)</code>方法并把用户所写的选项<code>options</code>传入。那这个<code>_init</code>方法是从哪来的呢？在<code>Vue</code>类定义的下面还有几行代码，其中之一就是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">initMixin(Vue)<br></code></pre></td></tr></table></figure>\n\n<p>这一行代码执行了<code>initMixin</code>函数，那<code>initMixin</code>函数又是从哪儿来的呢？该函数定义位于源码的<code>src/core/instance/init.js</code> 中，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">initMixin</span> (<span class=\"hljs-params\">Vue</span>) </span>&#123;<br>  Vue.prototype._init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">const</span> vm = <span class=\"hljs-built_in\">this</span><br>    vm.$options = mergeOptions(<br>        resolveConstructorOptions(vm.constructor),<br>        options || &#123;&#125;,<br>        vm<br>    )<br>    vm._self = vm<br>    initLifecycle(vm)<br>    initEvents(vm)<br>    initRender(vm)<br>    callHook(vm, <span class=\"hljs-string\">&#x27;beforeCreate&#x27;</span>)<br>    initInjections(vm) <span class=\"hljs-comment\">// resolve injections before data/props</span><br>    initState(vm)<br>    initProvide(vm) <span class=\"hljs-comment\">// resolve provide after data/props</span><br>    callHook(vm, <span class=\"hljs-string\">&#x27;created&#x27;</span>)<br><br>    <span class=\"hljs-keyword\">if</span> (vm.$options.el) &#123;<br>      vm.$mount(vm.$options.el)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，在<code>initMixin</code>函数内部就只干了一件事，那就是给<code>Vue</code>类的原型上绑定<code>_init</code>方法，同时<code>_init</code>方法的定义也在该函数内部。现在我们知道了，<code>new Vue()</code>会执行<code>Vue</code>类的构造函数，构造函数内部会执行<code>_init</code>方法，所以<code>new Vue()</code>所干的事情其实就是<code>_init</code>方法所干的事情，那么我们着重来分析下<code>_init</code>方法都干了哪些事情。</p>\n<p>首先，把<code>Vue</code>实例赋值给变量<code>vm</code>，并且把用户传递的<code>options</code>选项与当前构造函数的<code>options</code>属性及其父级构造函数的<code>options</code>属性进行合并（关于属性如何合并的问题下面会介绍），得到一个新的<code>options</code>选项赋值给<code>$options</code>属性，并将<code>$options</code>属性挂载到<code>Vue</code>实例上，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">vm.$options = mergeOptions(<br>    resolveConstructorOptions(vm.constructor),<br>    options || &#123;&#125;,<br>    vm<br>)<br></code></pre></td></tr></table></figure>\n\n<p>接着，通过调用一些初始化函数来为<code>Vue</code>实例初始化一些属性，事件，响应式数据等，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">nitLifecycle(vm)       <span class=\"hljs-comment\">// 初始化生命周期</span><br>initEvents(vm)        <span class=\"hljs-comment\">// 初始化事件</span><br>initRender(vm)         <span class=\"hljs-comment\">// 初始化渲染</span><br>callHook(vm, <span class=\"hljs-string\">&#x27;beforeCreate&#x27;</span>)  <span class=\"hljs-comment\">// 调用生命周期钩子函数</span><br>initInjections(vm)   <span class=\"hljs-comment\">//初始化injections</span><br>initState(vm)    <span class=\"hljs-comment\">// 初始化props,methods,data,computed,watch</span><br>initProvide(vm) <span class=\"hljs-comment\">// 初始化 provide</span><br>callHook(vm, <span class=\"hljs-string\">&#x27;created&#x27;</span>)  <span class=\"hljs-comment\">// 调用生命周期钩子函数</span><br></code></pre></td></tr></table></figure>","raw":null,"categories":[],"tags":[{"name":"vue源码理解——生命周期篇","path":"api/tags/vue源码理解——生命周期篇.json"}]},{"title":"vue源码理解——实例方法篇","slug":"vue源码理解5","date":"2021-03-18T11:29:18.000Z","updated":"2021-09-14T03:40:58.146Z","comments":true,"top":null,"path":"api/articles/vue源码理解5.json","excerpt":null,"keywords":null,"cover":"https://images.unsplash.com/photo-1631473130172-614478b2abd1?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxNzZ8fHxlbnwwfHx8fA==&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60","content":"<p><img src=\"https://images.unsplash.com/photo-1631473130172-614478b2abd1?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxNzZ8fHxlbnwwfHx8fA==&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\" alt=\"img\"></p>\n<h4 id=\"实例方法：\"><a href=\"#实例方法：\" class=\"headerlink\" title=\"实例方法：\"></a>实例方法：</h4><p>与数据相关的实例方法有3个，分别是<code>vm.$set</code>、<code>vm.$delete</code>和<code>vm.$watch</code>。它们是在<code>stateMixin</code>函数中挂载到<code>Vue</code>原型上的，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> &#123;set,del&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../observer/index&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">stateMixin</span> (<span class=\"hljs-params\">Vue</span>) </span>&#123;<br>    Vue.prototype.$set = set<br>    Vue.prototype.$delete = del<br>    Vue.prototype.$watch = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">expOrFn,cb,options</span>) </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当执行<code>stateMixin</code>函数后，会向<code>Vue</code>原型上挂载上述3个实例方法。</p>\n<p>接下来，我们就来分析这3个与数据相关的实例方法其内部的原理都是怎样的</p>\n<h5 id=\"vm-watch\"><a href=\"#vm-watch\" class=\"headerlink\" title=\"vm.$watch\"></a>vm.$watch</h5><h5 id=\"用法回顾\"><a href=\"#用法回顾\" class=\"headerlink\" title=\"用法回顾\"></a>用法回顾</h5><p>在介绍方法的内部原理之前，我们先根据官方文档示例回顾一下它的用法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">vm.$watch( expOrFn, callback, [options] )<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>参数</strong>：</p>\n<ul>\n<li><p><code>&#123;string | Function&#125; expOrFn</code></p>\n</li>\n<li><p><code>&#123;Function | Object&#125; callback</code></p>\n</li>\n<li><pre><code>&#123;Object&#125; [options]\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br>    - &#96;&#123;boolean&#125; deep&#96;<br>    - &#96;&#123;boolean&#125; immediate&#96;<br><br>- **返回值**：&#96;&#123;Function&#125; unwatch&#96;<br><br>- **用法**：<br><br>  观察 &#96;Vue&#96; 实例变化的一个表达式或计算属性函数。回调函数得到的参数为新值和旧值。表达式只接受监督的键路径。对于更复杂的表达式，用一个函数取代。<br><br>  注意：在变异 (不是替换) 对象或数组时，旧值将与新值相同，因为它们的引用指向同一个对象&#x2F;数组。&#96;Vue&#96; 不会保留变异之前值的副本。<br><br>- **示例**：<br><br>  &#96;&#96;&#96;javascript<br>  &#x2F;&#x2F; 键路径<br>  vm.$watch(&#39;a.b.c&#39;, function (newVal, oldVal) &#123;<br>    &#x2F;&#x2F; 做点什么<br>  &#125;)<br>  <br>  &#x2F;&#x2F; 函数<br>  vm.$watch(<br>    function () &#123;<br>      &#x2F;&#x2F; 表达式 &#96;this.a + this.b&#96; 每次得出一个不同的结果时<br>      &#x2F;&#x2F; 处理函数都会被调用。<br>      &#x2F;&#x2F; 这就像监听一个未被定义的计算属性<br>      return this.a + this.b<br>    &#125;,<br>    function (newVal, oldVal) &#123;<br>      &#x2F;&#x2F; 做点什么<br>    &#125;<br>  )<br></code></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<p><code>vm.$watch</code> 返回一个取消观察函数，用来停止触发回调：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> unwatch = vm.$watch(<span class=\"hljs-string\">&#x27;a&#x27;</span>, cb)<br><span class=\"hljs-comment\">// 之后取消观察</span><br>unwatch()<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>选项：deep</strong></p>\n<p>为了发现对象内部值的变化，可以在选项参数中指定 <code>deep: true</code> 。注意监听数组的变动不需要这么做。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">vm.$watch(<span class=\"hljs-string\">&#x27;someObject&#x27;</span>, callback, &#123;<br>  deep: <span class=\"hljs-literal\">true</span><br>&#125;)<br>vm.someObject.nestedValue = <span class=\"hljs-number\">123</span><br><span class=\"hljs-comment\">// callback is fired</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>选项：immediate</strong></p>\n<p>在选项参数中指定 <code>immediate: true</code> 将立即以表达式的当前值触发回调：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">vm.$watch(<span class=\"hljs-string\">&#x27;a&#x27;</span>, callback, &#123;<br>  immediate: <span class=\"hljs-literal\">true</span><br>&#125;)<br><span class=\"hljs-comment\">// 立即以 `a` 的当前值触发回调</span><br></code></pre></td></tr></table></figure>\n\n<p>注意在带有 <code>immediate</code> 选项时，你不能在第一次回调时取消侦听给定的 property。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 这会导致报错</span><br><span class=\"hljs-keyword\">var</span> unwatch = vm.$watch(<br>  <span class=\"hljs-string\">&#x27;value&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    doSomething()<br>    unwatch()<br>  &#125;,<br>  &#123; <span class=\"hljs-attr\">immediate</span>: <span class=\"hljs-literal\">true</span> &#125;<br>)<br></code></pre></td></tr></table></figure>\n\n<p>如果你仍然希望在回调内部调用一个取消侦听的函数，你应该先检查其函数的可用性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> unwatch = vm.$watch(<br>  <span class=\"hljs-string\">&#x27;value&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    doSomething()<br>    <span class=\"hljs-keyword\">if</span> (unwatch) &#123;<br>      unwatch()<br>    &#125;<br>  &#125;,<br>  &#123; <span class=\"hljs-attr\">immediate</span>: <span class=\"hljs-literal\">true</span> &#125;<br>)<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>撸码一时爽，一直撸码一直爽！！！</p>\n","raw":null,"categories":[],"tags":[{"name":"vue源码理解——实例方法篇","path":"api/tags/vue源码理解——实例方法篇.json"}]},{"title":"vue源码理解——全局API篇","slug":"vue源码理解6","date":"2021-03-18T11:29:18.000Z","updated":"2021-09-14T03:46:33.896Z","comments":true,"top":null,"path":"api/articles/vue源码理解6.json","excerpt":null,"keywords":null,"cover":"https://images.unsplash.com/photo-1631453577393-461cff89e0f7?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwyMTl8fHxlbnwwfHx8fA==&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60","content":"<p><img src=\"https://images.unsplash.com/photo-1631453577393-461cff89e0f7?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwyMTl8fHxlbnwwfHx8fA==&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\" alt=\"img\"></p>\n<h4 id=\"全局API\"><a href=\"#全局API\" class=\"headerlink\" title=\"全局API\"></a>全局API</h4><p>与实例方法不同，实例方法是将方法挂载到<code>Vue</code>的原型上，而全局API是直接在<code>Vue</code>上挂载方法。在<code>Vue</code>中，全局API一共有12个，分别是<code>Vue.extend</code>、<code>Vue.nextTick</code>、<code>Vue.set</code>、<code>Vue.delete</code>、<code>Vue.directive</code>、<code>Vue.filter</code>、<code>Vue.component</code>、<code>Vue.use</code>、<code>Vue.mixin</code>、<code>Vue.observable</code>、<code>Vue.version</code>。这12个API中有的是我们在日常业务开发中经常会用到的，有的是对<code>Vue</code>内部或外部插件提供的，我们在日常业务开发中几乎用不到。接下来我们就对这12个API逐个进行分析，看看其内部原理都是怎样的。</p>\n<h5 id=\"Vue-extend\"><a href=\"#Vue-extend\" class=\"headerlink\" title=\"Vue.extend\"></a>Vue.extend</h5><h6 id=\"用法回顾\"><a href=\"#用法回顾\" class=\"headerlink\" title=\"用法回顾\"></a>用法回顾</h6><p>其用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Vue.extend( options )<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>参数</strong>：</p>\n<ul>\n<li><code>&#123;Object&#125; options</code></li>\n</ul>\n</li>\n<li><p><strong>作用</strong>：</p>\n<p>使用基础 <code>Vue</code> 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</p>\n<p><code>data</code> 选项是特例，需要注意 - 在 <code>Vue.extend()</code> 中它必须是函数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mount-point&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 创建构造器</span><br><span class=\"hljs-keyword\">var</span> Profile = Vue.extend(&#123;<br>  template: <span class=\"hljs-string\">&#x27;&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;&#x27;</span>,<br>  data: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      firstName: <span class=\"hljs-string\">&#x27;Walter&#x27;</span>,<br>      lastName: <span class=\"hljs-string\">&#x27;White&#x27;</span>,<br>      alias: <span class=\"hljs-string\">&#x27;Heisenberg&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br><span class=\"hljs-comment\">// 创建 Profile 实例，并挂载到一个元素上。</span><br><span class=\"hljs-keyword\">new</span> Profile().$mount(<span class=\"hljs-string\">&#x27;##mount-point&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Walter White aka Heisenberg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h5 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h5><p>通过用法回顾我们知道，<code>Vue.extend</code>的作用是创建一个继承自<code>Vue</code>类的子类，可接收的参数是一个包含组件选项的对象。</p>\n<p>既然是<code>Vue</code>类的子类，那么除了它本身独有的一些属性方法，还有一些是从<code>Vue</code>类中继承而来，所以创建子类的过程其实就是一边给子类上添加上独有的属性，一边将父类的公共属性复制到子类上。接下来，我们就来看看源码是如何实现这个过程的。</p>\n<p>该API的定义位于源码的<code>src/core/global-api/extend.js</code>中，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Vue.extend = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">extendOptions: Object</span>): <span class=\"hljs-title\">Function</span> </span>&#123;<br>    extendOptions = extendOptions || &#123;&#125;<br>    <span class=\"hljs-keyword\">const</span> Super = <span class=\"hljs-built_in\">this</span><br>    <span class=\"hljs-keyword\">const</span> SuperId = Super.cid<br>    <span class=\"hljs-keyword\">const</span> cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = &#123;&#125;)<br>    <span class=\"hljs-keyword\">if</span> (cachedCtors[SuperId]) &#123;<br>        <span class=\"hljs-keyword\">return</span> cachedCtors[SuperId]<br>    &#125;<br><br>    <span class=\"hljs-keyword\">const</span> name = extendOptions.name || Super.options.name<br>    <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&#x27;production&#x27;</span> &amp;&amp; name) &#123;<br>        validateComponentName(name)<br>    &#125;<br><br>    <span class=\"hljs-keyword\">const</span> Sub = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">VueComponent</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br>        <span class=\"hljs-built_in\">this</span>._init(options)<br>    &#125;<br>    Sub.prototype = <span class=\"hljs-built_in\">Object</span>.create(Super.prototype)<br>    Sub.prototype.constructor = Sub<br>    Sub.cid = cid++<br>    Sub.options = mergeOptions(<br>        Super.options,<br>        extendOptions<br>    )<br>    Sub[<span class=\"hljs-string\">&#x27;super&#x27;</span>] = Super<br><br>    <span class=\"hljs-keyword\">if</span> (Sub.options.props) &#123;<br>        initProps(Sub)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (Sub.options.computed) &#123;<br>        initComputed(Sub)<br>    &#125;<br><br>    <span class=\"hljs-comment\">// allow further extension/mixin/plugin usage</span><br>    Sub.extend = Super.extend<br>    Sub.mixin = Super.mixin<br>    Sub.use = Super.use<br><br>    <span class=\"hljs-comment\">// create asset registers, so extended classes</span><br>    <span class=\"hljs-comment\">// can have their private assets too.</span><br>    ASSET_TYPES.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">type</span>) </span>&#123;<br>        Sub[type] = Super[type]<br>    &#125;)<br>    <span class=\"hljs-comment\">// enable recursive self-lookup</span><br>    <span class=\"hljs-keyword\">if</span> (name) &#123;<br>        Sub.options.components[name] = Sub<br>    &#125;<br><br>    Sub.superOptions = Super.options<br>    Sub.extendOptions = extendOptions<br>    Sub.sealedOptions = extend(&#123;&#125;, Sub.options)<br><br>    <span class=\"hljs-comment\">// cache constructor</span><br>    cachedCtors[SuperId] = Sub<br>    <span class=\"hljs-keyword\">return</span> Sub<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，虽然代码量稍微有点多，但是逻辑并不复杂，下面我们就来逐行分析一下。</p>\n<p>首先，该函数内部定义了几个变量，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">extendOptions = extendOptions || &#123;&#125;<br><span class=\"hljs-keyword\">const</span> Super = <span class=\"hljs-built_in\">this</span><br><span class=\"hljs-keyword\">const</span> SuperId = Super.cid<br><span class=\"hljs-keyword\">const</span> cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = &#123;&#125;)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>extendOptions：用户传入的一个包含组件选项的对象参数；</li>\n<li>Super：指向父类，即基础 <code>Vue</code>类；</li>\n<li>SuperId：父类的<code>cid</code>属性，无论是基础 <code>Vue</code>类还是从基础 <code>Vue</code>类继承而来的类，都有一个<code>cid</code>属性，作为该类的唯一标识；</li>\n<li>cachedCtors：缓存池，用于缓存创建出来的类；</li>\n</ul>\n<p>接着，在缓存池中先尝试获取是否之前已经创建过的该子类，如果之前创建过，则直接返回之前创建的。之所以有这一步，是因为<code>Vue</code>为了性能考虑，反复调用<code>Vue.extend</code>其实应该返回同一个结果，只要返回结果是固定的，就可以将结果缓存，再次调用时，只需从缓存中取出结果即可。在API方法定义的最后，当创建完子类后，会使用父类的<code>cid</code>作为<code>key</code>，创建好的子类作为<code>value</code>，存入缓存池<code>cachedCtors</code>中。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (cachedCtors[SuperId]) &#123;<br>    <span class=\"hljs-keyword\">return</span> cachedCtors[SuperId]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接着，获取到传入的选项参数中的<code>name</code>字段，并且在开发环境下校验<code>name</code>字段是否合法，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> name = extendOptions.name || Super.options.name<br><span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&#x27;production&#x27;</span> &amp;&amp; name) &#123;<br>    validateComponentName(name)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接着，创建一个类<code>Sub</code>，这个类就是将要继承基础<code>Vue</code>类的子类，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> Sub = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">VueComponent</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>._init(options)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>到这里，我们已经把类创建好了，接下来的工作就是让该类去继承基础<code>Vue</code>类，让其具备一些基础<code>Vue</code>类的能力。</p>\n<p>首先，将父类的原型继承到子类中，并且为子类添加唯一标识<code>cid</code>，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Sub.prototype = <span class=\"hljs-built_in\">Object</span>.create(Super.prototype)<br>Sub.prototype.constructor = Sub<br>Sub.cid = cid++<br></code></pre></td></tr></table></figure>\n\n<p>接着，将父类的<code>options</code>与子类的<code>options</code>进行合并，将合并结果赋给子类的<code>options</code>属性，如下：</p>\n<p>接着，将父类保存到子类的<code>super</code>属性中，以确保在子类中能够拿到父类，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Sub[<span class=\"hljs-string\">&#x27;super&#x27;</span>] = Super<br></code></pre></td></tr></table></figure>\n\n<p>接着，如果选项中存在<code>props</code>属性，则初始化它，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (Sub.options.props) &#123;<br>    initProps(Sub)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">initProps</span> (<span class=\"hljs-params\">Comp</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> props = Comp.options.props<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> props) &#123;<br>    proxy(Comp.prototype, <span class=\"hljs-string\">`_props`</span>, key)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>初始化<code>props</code>属性其实就是把参数中传入的<code>props</code>选项代理到原型的<code>_props</code>中。</p>\n<p>接着，如果选项中存在<code>computed</code>属性，则初始化它，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (Sub.options.computed) &#123;<br>    initComputed(Sub)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">initComputed</span> (<span class=\"hljs-params\">Comp</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> computed = Comp.options.computed<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> computed) &#123;<br>    defineComputed(Comp.prototype, key, computed[key])<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>初始化<code>props</code>属性就是遍历参数中传入的<code>computed</code>选项，将每一项都调用<code>defineComputed</code>函数定义到子类原型上。此处的<code>defineComputed</code>函数与我们之前在生命周期初始化阶段<code>initState</code>中所介绍的<code>defineComputed</code>函数是一样的。</p>\n<p>接着，将父类中的一些属性复制到子类中，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Sub.extend = Super.extend<br>Sub.mixin = Super.mixin<br>Sub.use = Super.use<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> ASSET_TYPES = [<br>  <span class=\"hljs-string\">&#x27;component&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;directive&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;filter&#x27;</span><br>]<br><span class=\"hljs-comment\">// create asset registers, so extended classes</span><br><span class=\"hljs-comment\">// can have their private assets too.</span><br>ASSET_TYPES.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">type</span>) </span>&#123;<br>    Sub[type] = Super[type]<br>&#125;)<br><span class=\"hljs-comment\">// enable recursive self-lookup</span><br><span class=\"hljs-keyword\">if</span> (name) &#123;<br>    Sub.options.components[name] = Sub<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接着，给子类新增三个独有的属性，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Sub.superOptions = Super.options<br>Sub.extendOptions = extendOptions<br>Sub.sealedOptions = extend(&#123;&#125;, Sub.options)<br></code></pre></td></tr></table></figure>\n\n<p>最后，使用父类的<code>cid</code>作为<code>key</code>，创建好的子类<code>Sub</code>作为<code>value</code>，存入缓存池<code>cachedCtors</code>中。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// cache constructor</span><br>cachedCtors[SuperId] = Sub<br></code></pre></td></tr></table></figure>\n\n<p>最终将创建好的子类<code>Sub</code>返回。</p>\n<p>以上，就是<code>Vue.extend</code>的所有逻辑。其实总体来讲，整个过程就是先创建一个类<code>Sub</code>，接着通过原型继承的方式将该类继承基础<code>Vue</code>类，然后给<code>Sub</code>类添加一些属性以及将父类的某些属性复制到<code>Sub</code>类上，最后将<code>Sub</code>类返回。</p>\n<p>撸码一时爽，一直撸码一直爽！！！</p>\n","raw":null,"categories":[],"tags":[{"name":"vue源码理解——全局API篇","path":"api/tags/vue源码理解——全局API篇.json"}]}]}