{"name":"vue源码理解——生命周期篇","postlist":[{"title":"vue源码理解——生命周期篇","slug":"vue源码理解4","date":"2021-03-18T11:29:18.000Z","updated":"2021-09-14T03:39:53.835Z","comments":true,"top":null,"path":"api/articles/vue源码理解4.json","excerpt":null,"keywords":null,"cover":"https://images.unsplash.com/photo-1631410717426-205dffe528c5?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxMTh8fHxlbnwwfHx8fA==&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60","content":"<p><img src=\"https://images.unsplash.com/photo-1631410717426-205dffe528c5?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxMTh8fHxlbnwwfHx8fA==&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\" alt=\"img\"></p>\n<h4 id=\"生命周期：\"><a href=\"#生命周期：\" class=\"headerlink\" title=\"生命周期：\"></a>生命周期：</h4><p>在<code>Vue</code>中，每个<code>Vue</code>实例从被创建出来到最终被销毁都会经历一个过程，就像人一样，从出生到死亡。在这一过程里会发生许许多多的事，例如设置数据监听，编译模板，组件挂载等。在<code>Vue</code>中，把<code>Vue</code>实例从被创建出来到最终被销毁的这一过程称为<code>Vue</code>实例的生命周期，同时，在<code>Vue</code>实例生命周期的不同阶段<code>Vue</code>还提供了不同的钩子函数，以方便用户在不同的生命周期阶段做一些额外的事情。那么，接下来的几篇文章我们就从源码角度深入剖析一下一个<code>Vue</code>实例在从生到死的生命周期里到底都经历了些什么，每个阶段都做了哪些事情。</p>\n<h5 id=\"生命周期流程图\"><a href=\"#生命周期流程图\" class=\"headerlink\" title=\"生命周期流程图\"></a>生命周期流程图</h5><p>下图是<code>Vue</code>官网给出的<code>Vue</code>实例的生命周期流程图，如下：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425145156115.png\" alt=\"image-20210425145156115\"></p>\n<p>从图中我们可以看到，<code>Vue</code>实例的生命周期大致可分为4个阶段：</p>\n<ul>\n<li>初始化阶段：为<code>Vue</code>实例上初始化一些属性，事件以及响应式数据；</li>\n<li>模板编译阶段：将模板编译成渲染函数；</li>\n<li>挂载阶段：将实例挂载到指定的<code>DOM</code>上，即将模板渲染到真实<code>DOM</code>中；</li>\n<li>销毁阶段：将实例自身从父组件中删除，并取消依赖追踪及事件监听器；</li>\n</ul>\n<h6 id=\"总结：：\"><a href=\"#总结：：\" class=\"headerlink\" title=\"总结：：\"></a>总结：：</h6><p>本篇文章是生命周期篇的开篇综述，借用<code>Vue</code>官网的生命周期流程图介绍了一个<code>Vue</code>实例的生命周期大致可分为四个阶段，分别是初始化阶段、模板编译阶段、挂载阶段、销毁阶段。接下来的几篇文章我们就从这个流程图为基础，自上到下，从每个阶段入手，深入分析在每个阶段里都干了些什么。</p>\n<h2 id=\"2-new-Vue-都干了什么\"><a href=\"#2-new-Vue-都干了什么\" class=\"headerlink\" title=\"2. new Vue()都干了什么\"></a>2. new Vue()都干了什么</h2><p>初始化阶段所做的第一件事就是<code>new Vue()</code>创建一个<code>Vue</code>实例，那么<code>new Vue()</code>的内部都干了什么呢？ 我们知道，<code>new</code> 关键字在 <code>JS</code>中表示从一个类中实例化出一个对象来，由此可见， <code>Vue</code> 实际上是一个类。所以<code>new Vue()</code>实际上是执行了<code>Vue</code>类的构造函数，那么我们来看一下<code>Vue</code>类是如何定义的，<code>Vue</code>类的定义是在源码的<code>src/core/instance/index.js</code> 中，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Vue</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&#x27;production&#x27;</span> &amp;&amp;<br>    !(<span class=\"hljs-built_in\">this</span> <span class=\"hljs-keyword\">instanceof</span> Vue)<br>  ) &#123;<br>    warn(<span class=\"hljs-string\">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>)<br>  &#125;<br>  <span class=\"hljs-built_in\">this</span>._init(options)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，<code>Vue</code>类的定义非常简单，其构造函数核心就一行代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">this</span>._init(options)<br></code></pre></td></tr></table></figure>\n\n<p>调用原型上的<code>_init(options)</code>方法并把用户所写的选项<code>options</code>传入。那这个<code>_init</code>方法是从哪来的呢？在<code>Vue</code>类定义的下面还有几行代码，其中之一就是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">initMixin(Vue)<br></code></pre></td></tr></table></figure>\n\n<p>这一行代码执行了<code>initMixin</code>函数，那<code>initMixin</code>函数又是从哪儿来的呢？该函数定义位于源码的<code>src/core/instance/init.js</code> 中，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">initMixin</span> (<span class=\"hljs-params\">Vue</span>) </span>&#123;<br>  Vue.prototype._init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">const</span> vm = <span class=\"hljs-built_in\">this</span><br>    vm.$options = mergeOptions(<br>        resolveConstructorOptions(vm.constructor),<br>        options || &#123;&#125;,<br>        vm<br>    )<br>    vm._self = vm<br>    initLifecycle(vm)<br>    initEvents(vm)<br>    initRender(vm)<br>    callHook(vm, <span class=\"hljs-string\">&#x27;beforeCreate&#x27;</span>)<br>    initInjections(vm) <span class=\"hljs-comment\">// resolve injections before data/props</span><br>    initState(vm)<br>    initProvide(vm) <span class=\"hljs-comment\">// resolve provide after data/props</span><br>    callHook(vm, <span class=\"hljs-string\">&#x27;created&#x27;</span>)<br><br>    <span class=\"hljs-keyword\">if</span> (vm.$options.el) &#123;<br>      vm.$mount(vm.$options.el)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，在<code>initMixin</code>函数内部就只干了一件事，那就是给<code>Vue</code>类的原型上绑定<code>_init</code>方法，同时<code>_init</code>方法的定义也在该函数内部。现在我们知道了，<code>new Vue()</code>会执行<code>Vue</code>类的构造函数，构造函数内部会执行<code>_init</code>方法，所以<code>new Vue()</code>所干的事情其实就是<code>_init</code>方法所干的事情，那么我们着重来分析下<code>_init</code>方法都干了哪些事情。</p>\n<p>首先，把<code>Vue</code>实例赋值给变量<code>vm</code>，并且把用户传递的<code>options</code>选项与当前构造函数的<code>options</code>属性及其父级构造函数的<code>options</code>属性进行合并（关于属性如何合并的问题下面会介绍），得到一个新的<code>options</code>选项赋值给<code>$options</code>属性，并将<code>$options</code>属性挂载到<code>Vue</code>实例上，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">vm.$options = mergeOptions(<br>    resolveConstructorOptions(vm.constructor),<br>    options || &#123;&#125;,<br>    vm<br>)<br></code></pre></td></tr></table></figure>\n\n<p>接着，通过调用一些初始化函数来为<code>Vue</code>实例初始化一些属性，事件，响应式数据等，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">nitLifecycle(vm)       <span class=\"hljs-comment\">// 初始化生命周期</span><br>initEvents(vm)        <span class=\"hljs-comment\">// 初始化事件</span><br>initRender(vm)         <span class=\"hljs-comment\">// 初始化渲染</span><br>callHook(vm, <span class=\"hljs-string\">&#x27;beforeCreate&#x27;</span>)  <span class=\"hljs-comment\">// 调用生命周期钩子函数</span><br>initInjections(vm)   <span class=\"hljs-comment\">//初始化injections</span><br>initState(vm)    <span class=\"hljs-comment\">// 初始化props,methods,data,computed,watch</span><br>initProvide(vm) <span class=\"hljs-comment\">// 初始化 provide</span><br>callHook(vm, <span class=\"hljs-string\">&#x27;created&#x27;</span>)  <span class=\"hljs-comment\">// 调用生命周期钩子函数</span><br></code></pre></td></tr></table></figure>","raw":null,"categories":[],"tags":[{"name":"vue源码理解——生命周期篇","path":"api/tags/vue源码理解——生命周期篇.json"}]}]}