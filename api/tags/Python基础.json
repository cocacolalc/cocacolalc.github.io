{"name":"Python基础","postlist":[{"title":"Python基础","slug":"python","date":"2021-03-18T11:29:18.000Z","updated":"2021-08-04T07:17:40.981Z","comments":true,"top":null,"path":"api/articles/python.json","excerpt":null,"keywords":null,"cover":null,"content":"<h5 id=\"Python-中文编码\"><a href=\"#Python-中文编码\" class=\"headerlink\" title=\"Python 中文编码\"></a>Python 中文编码</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#!/usr/bin/python</span><br><span class=\"hljs-comment\"># -*- coding: UTF-8 -*-</span><br><br>文件开头加入 <span class=\"hljs-comment\"># -*- coding: UTF-8 -*- 或者 # coding=utf-8</span><br><br>print(<span class=\"hljs-string\">&#x27;你好&#x27;</span>) <span class=\"hljs-comment\">#输出你好</span><br><br><span class=\"hljs-comment\"># #号键即是注释</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"变量类型和运算符\"><a href=\"#变量类型和运算符\" class=\"headerlink\" title=\"变量类型和运算符\"></a>变量类型和运算符</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">name = value<br><span class=\"hljs-comment\"># Python 使用等号=作为赋值运算符</span><br><span class=\"hljs-comment\"># name 表示变量名；value 表示值，也就是要存储的数据</span><br><span class=\"hljs-comment\"># Python 是弱类型的语言</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h5><p>计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。</p>\n<p>比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，用<code>if</code>语句实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">age = <span class=\"hljs-number\">20</span><br><span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:<br>    print(<span class=\"hljs-string\">&#x27;your age is&#x27;</span>, age)<br>    print(<span class=\"hljs-string\">&#x27;adult&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>根据Python的缩进规则，如果<code>if</code>语句判断是<code>True</code>，就把缩进的两行print语句执行了，否则，什么也不做。</p>\n<p>也可以给<code>if</code>添加一个<code>else</code>语句，意思是，如果<code>if</code>判断是<code>False</code>，不要执行<code>if</code>的内容，去把<code>else</code>执行了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">age = <span class=\"hljs-number\">3</span><br><span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:<br>    print(<span class=\"hljs-string\">&#x27;your age is&#x27;</span>, age)<br>    print(<span class=\"hljs-string\">&#x27;adult&#x27;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>    print(<span class=\"hljs-string\">&#x27;your age is&#x27;</span>, age)<br>    print(<span class=\"hljs-string\">&#x27;teenager&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>注意不要少写了冒号<code>:</code>。</p>\n<p>当然上面的判断是很粗略的，完全可以用<code>elif</code>做更细致的判断：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">age = <span class=\"hljs-number\">3</span><br><span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:<br>    print(<span class=\"hljs-string\">&#x27;adult&#x27;</span>)<br><span class=\"hljs-keyword\">elif</span> age &gt;= <span class=\"hljs-number\">6</span>:<br>    print(<span class=\"hljs-string\">&#x27;teenager&#x27;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>    print(<span class=\"hljs-string\">&#x27;kid&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p><code>elif</code>是<code>else if</code>的缩写，完全可以有多个<code>elif</code>，所以<code>if</code>语句的完整形式就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">if</span> &lt;条件判断<span class=\"hljs-number\">1</span>&gt;:<br>    &lt;执行<span class=\"hljs-number\">1</span>&gt;<br><span class=\"hljs-keyword\">elif</span> &lt;条件判断<span class=\"hljs-number\">2</span>&gt;:<br>    &lt;执行<span class=\"hljs-number\">2</span>&gt;<br><span class=\"hljs-keyword\">elif</span> &lt;条件判断<span class=\"hljs-number\">3</span>&gt;:<br>    &lt;执行<span class=\"hljs-number\">3</span>&gt;<br><span class=\"hljs-keyword\">else</span>:<br>    &lt;执行<span class=\"hljs-number\">4</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p><code>if</code>语句执行有个特点，它是从上往下判断，如果在某个判断上是<code>True</code>，把该判断对应的语句执行后，就忽略掉剩下的<code>elif</code>和<code>else</code>，所以，请测试并解释为什么下面的程序打印的是<code>teenager</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">age &#x3D; 20<br>if age &gt;&#x3D; 6:<br>    print(&#39;teenager&#39;)<br>elif age &gt;&#x3D; 18:<br>    print(&#39;adult&#39;)<br>else:<br>    print(&#39;kid&#39;)<br></code></pre></td></tr></table></figure>\n\n<p><code>if</code>判断条件还可以简写，比如写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">if</span> x:<br>    print(<span class=\"hljs-string\">&#x27;True&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>只要<code>x</code>是非零数值、非空字符串、非空list等，就判断为<code>True</code>，否则为<code>False</code>。</p>\n<h3 id=\"再议-input\"><a href=\"#再议-input\" class=\"headerlink\" title=\"再议 input\"></a>再议 input</h3><p>最后看一个有问题的条件判断。很多同学会用<code>input()</code>读取用户的输入，这样可以自己输入，程序运行得更有意思：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">birth = input(<span class=\"hljs-string\">&#x27;birth: &#x27;</span>)<br><span class=\"hljs-keyword\">if</span> birth &lt; <span class=\"hljs-number\">2000</span>:<br>    print(<span class=\"hljs-string\">&#x27;00前&#x27;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>    print(<span class=\"hljs-string\">&#x27;00后&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>输入<code>1982</code>，结果报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">Traceback (most recent call last):<br>  File <span class=\"hljs-string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">in</span> &lt;module&gt;<br>TypeError: unorderable types: str() &gt; int()<br></code></pre></td></tr></table></figure>\n\n<p>这是因为<code>input()</code>返回的数据类型是<code>str</code>，<code>str</code>不能直接和整数比较，必须先把<code>str</code>转换成整数。Python提供了<code>int()</code>函数来完成这件事情：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">s = input(<span class=\"hljs-string\">&#x27;birth: &#x27;</span>)<br>birth = int(s)<br><span class=\"hljs-keyword\">if</span> birth &lt; <span class=\"hljs-number\">2000</span>:<br>    print(<span class=\"hljs-string\">&#x27;00前&#x27;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>    print(<span class=\"hljs-string\">&#x27;00后&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>再次运行，就可以得到正确地结果。但是，如果输入<code>abc</code>呢？又会得到一个错误信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">Traceback (most recent call last):<br>  File <span class=\"hljs-string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">in</span> &lt;module&gt;<br>ValueError: invalid literal <span class=\"hljs-keyword\">for</span> int() <span class=\"hljs-keyword\">with</span> base <span class=\"hljs-number\">10</span>: <span class=\"hljs-string\">&#x27;abc&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>原来<code>int()</code>函数发现一个字符串并不是合法的数字时就会报错，程序就退出了。</p>\n<h5 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h5><p>要计算1+2+3，我们可以直接写表达式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">6</span><br></code></pre></td></tr></table></figure>\n\n<p>要计算1+2+3+…+10，勉强也能写出来。</p>\n<p>但是，要计算1+2+3+…+10000，直接写表达式就不可能了。</p>\n<p>为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。</p>\n<p>Python的循环有两种，一种是for…in循环，依次把list或tuple中的每个元素迭代出来，看例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">names = [<span class=\"hljs-string\">&#x27;Michael&#x27;</span>, <span class=\"hljs-string\">&#x27;Bob&#x27;</span>, <span class=\"hljs-string\">&#x27;Tracy&#x27;</span>]<br><span class=\"hljs-keyword\">for</span> name <span class=\"hljs-keyword\">in</span> names:<br>    print(name)<br></code></pre></td></tr></table></figure>\n\n<p>执行这段代码，会依次打印<code>names</code>的每一个元素：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">Michael<br>Bob<br>Tracy<br></code></pre></td></tr></table></figure>\n\n<p>所以<code>for x in ...</code>循环就是把每个元素代入变量<code>x</code>，然后执行缩进块的语句。</p>\n<p>再比如我们想计算1-10的整数之和，可以用一个<code>sum</code>变量做累加：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">sum = <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]:<br>    sum = sum + x<br>print(sum)<br></code></pre></td></tr></table></figure>\n\n<p>如果要计算1-100的整数之和，从1写到100有点困难，幸好Python提供一个<code>range()</code>函数，可以生成一个整数序列，再通过<code>list()</code>函数可以转换为list。比如<code>range(5)</code>生成的序列是从0开始小于5的整数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>list(range(<span class=\"hljs-number\">5</span>))<br>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]<br></code></pre></td></tr></table></figure>\n\n<p><code>range(101)</code>就可以生成0-100的整数序列，计算如下：</p>\n<p><code># -*- coding: utf-8 -*- </code> Run</p>\n<p>请自行运行上述代码，看看结果是不是当年高斯同学心算出的5050。</p>\n<p>第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">sum = <span class=\"hljs-number\">0</span><br>n = <span class=\"hljs-number\">99</span><br><span class=\"hljs-keyword\">while</span> n &gt; <span class=\"hljs-number\">0</span>:<br>    sum = sum + n<br>    n = n - <span class=\"hljs-number\">2</span><br>print(sum)<br></code></pre></td></tr></table></figure>\n\n<p>在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足while条件，循环退出。</p>\n<p>第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">sum = <span class=\"hljs-number\">0</span><br>n = <span class=\"hljs-number\">99</span><br><span class=\"hljs-keyword\">while</span> n &gt; <span class=\"hljs-number\">0</span>:<br>    sum = sum + n<br>    n = n - <span class=\"hljs-number\">2</span><br>print(sum)<br></code></pre></td></tr></table></figure>\n\n<p>在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足while条件，循环退出。</p>\n<h3 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h3><p>在循环中，<code>break</code>语句可以提前退出循环。例如，本来要循环打印1～100的数字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">n = <span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">while</span> n &lt;= <span class=\"hljs-number\">100</span>:<br>    print(n)<br>    n = n + <span class=\"hljs-number\">1</span><br>print(<span class=\"hljs-string\">&#x27;END&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>上面的代码可以打印出1~100。</p>\n<p>如果要提前结束循环，可以用<code>break</code>语句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">n = <span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">while</span> n &lt;= <span class=\"hljs-number\">100</span>:<br>    <span class=\"hljs-keyword\">if</span> n &gt; <span class=\"hljs-number\">10</span>: <span class=\"hljs-comment\"># 当n = 11时，条件满足，执行break语句</span><br>        <span class=\"hljs-keyword\">break</span> <span class=\"hljs-comment\"># break语句会结束当前循环</span><br>    print(n)<br>    n = n + <span class=\"hljs-number\">1</span><br>print(<span class=\"hljs-string\">&#x27;END&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>执行上面的代码可以看到，打印出1~10后，紧接着打印<code>END</code>，程序结束。</p>\n<p>可见<code>break</code>的作用是提前结束循环。</p>\n<h3 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h3><p>在循环过程中，也可以通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">n = <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">while</span> n &lt; <span class=\"hljs-number\">10</span>:<br>    n = n + <span class=\"hljs-number\">1</span><br>    print(n)<br></code></pre></td></tr></table></figure>\n\n<p>上面的程序可以打印出1～10。但是，如果我们想只打印奇数，可以用<code>continue</code>语句跳过某些循环：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">n = <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">while</span> n &lt; <span class=\"hljs-number\">10</span>:<br>    n = n + <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">if</span> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>: <span class=\"hljs-comment\"># 如果n是偶数，执行continue语句</span><br>        <span class=\"hljs-keyword\">continue</span> <span class=\"hljs-comment\"># continue语句会直接继续下一轮循环，后续的print()语句不会执行</span><br>    print(n)<br></code></pre></td></tr></table></figure>\n\n<p>执行上面的代码可以看到，打印的不再是1～10，而是1，3，5，7，9。</p>\n<p>可见<code>continue</code>的作用是提前结束本轮循环，并直接开始下一轮循环。</p>\n","raw":null,"categories":[],"tags":[{"name":"Python基础","path":"api/tags/Python基础.json"}]}]}