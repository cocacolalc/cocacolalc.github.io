{"title":"vue源码理解——虚拟DOM篇","slug":"vue源码理解2","date":"2021-03-18T11:29:18.000Z","updated":"2021-04-25T06:23:24.373Z","comments":true,"path":"api/articles/vue源码理解2.json","excerpt":null,"covers":["C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210422112653087.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425121000760.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425121148769.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425133824295.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425134249593.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425134557748.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425135252298.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425135454618.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425135923348.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140013890.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140051237.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140208880.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140311007.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140415224.png","C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140631885.png"],"cover":"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210422112653087.png","content":"<p>虚拟DOM，这个名词作为当下的前端开发人员你一定不会陌生，至少会略有耳闻，但不会闻所未闻吧。这也是现在求职面试考察中非常高频的一个考点了。因为在当下的前端三大框架中关于虚拟DOM或多或少都有所涉及，那么接下来，我们就从源码角度出发，看看<code>Vue</code>中的虚拟DOM时怎样的。</p>\n<h4 id=\"虚拟DOM简介\"><a href=\"#虚拟DOM简介\" class=\"headerlink\" title=\"虚拟DOM简介\"></a>虚拟DOM简介</h4><p>由于本系列文章是针对<code>Vue</code>源码深入学习的，所以着重分析在<code>Vue</code>中对虚拟DOM是如何实现的，而对于虚拟DOM本身这个概念不做大篇幅的展开讨论，仅从以下几个问题简单介绍：</p>\n<p>1.什么是虚拟DOM？</p>\n<p>所谓虚拟DOM，就是用一个<code>JS</code>对象来描述一个<code>DOM</code>节点，像如下示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;a&quot;</span> id=<span class=\"hljs-string\">&quot;b&quot;</span>&gt;我是内容&lt;/div&gt;<br><br>&#123;<br>  tag:<span class=\"hljs-string\">&#x27;div&#x27;</span>,        <span class=\"hljs-comment\">// 元素标签</span><br>  attrs:&#123;           <span class=\"hljs-comment\">// 属性</span><br>    class:&#x27;a&#x27;,<br>    id:<span class=\"hljs-string\">&#x27;b&#x27;</span><br>  &#125;,<br>  text:<span class=\"hljs-string\">&#x27;我是内容&#x27;</span>,  <span class=\"hljs-comment\">// 文本内容</span><br>  children:[]       <span class=\"hljs-comment\">// 子元素</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们把组成一个<code>DOM</code>节点的必要东西通过一个<code>JS</code>对象表示出来，那么这个<code>JS</code>对象就可以用来描述这个<code>DOM</code>节点，我们把这个<code>JS</code>对象就称为是这个真实<code>DOM</code>节点的虚拟<code>DOM</code>节点</p>\n<p>2.为什么要有虚拟DOM？</p>\n<p>我们知道，<code>Vue</code>是数据驱动视图的，数据发生变化视图就要随之更新，在更新视图的时候难免要操作<code>DOM</code>,而操作真实<code>DOM</code>又是非常耗费性能的，这是因为浏览器的标准就把 <code>DOM</code> 设计的非常复杂，所以一个真正的 <code>DOM</code> 元素是非常庞大的，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;div&#x27;</span>)<br><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;&#x27;</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> div) &#123;<br>  str += key + <span class=\"hljs-string\">&#x27;&#x27;</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(str)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210422112653087.png\" alt=\"image-20210422112653087\"></p>\n<p>上图中我们打印一个简单的空<code>div</code>标签，就打印出这么多东西，更不用说复杂的、深嵌套的<code>DOM</code>节点了。由此可见，直接操作真实<code>DOM</code>是非常消耗性能的。</p>\n<p>那么有没有什么解决方案呢？当然是有的。我们可以用<code>JS</code>的计算性能来换取操作<code>DOM</code>所消耗的性能。</p>\n<p>既然我们逃不掉操作<code>DOM</code>这道坎,但是我们可以尽可能少的操作<code>DOM</code>。那如何在更新视图的时候尽可能少的操作<code>DOM</code>呢？最直观的思路就是我们不要盲目的去更新视图，而是通过对比数据变化前后的状态，计算出视图中哪些地方需要更新，只更新需要更新的地方，而不需要更新的地方则不需关心，这样我们就可以尽可能少的操作<code>DOM</code>了。这也就是上面所说的用<code>JS</code>的计算性能来换取操作<code>DOM</code>的性能。</p>\n<p>我们可以用<code>JS</code>模拟出一个<code>DOM</code>节点，称之为虚拟<code>DOM</code>节点。当数据发生变化时，我们对比变化前后的虚拟<code>DOM</code>节点，通过<code>DOM-Diff</code>算法计算出需要更新的地方，然后去更新需要更新的视图。</p>\n<p>这就是虚拟<code>DOM</code>产生的原因以及最大的用途。</p>\n<h5 id=\"Vue中的虚拟DOM\"><a href=\"#Vue中的虚拟DOM\" class=\"headerlink\" title=\"Vue中的虚拟DOM\"></a>Vue中的虚拟DOM</h5><p>前文我们介绍了虚拟<code>DOM</code>的概念以及为什么要有虚拟<code>DOM</code>，那么在<code>Vue</code>中虚拟<code>DOM</code>是怎么实现的呢？接下来，我们从源码出发，深入学习一下。</p>\n<h6 id=\"VNode类\"><a href=\"#VNode类\" class=\"headerlink\" title=\"VNode类\"></a>VNode类</h6><p>我们说了，虚拟<code>DOM</code>就是用<code>JS</code>来描述一个真实的<code>DOM</code>节点。而在<code>Vue</code>中就存在了一个<code>VNode</code>类，通过这个类，我们就可以实例化出不同类型的虚拟<code>DOM</code>节点，源码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VNode</span> </span>&#123;<br>  <span class=\"hljs-keyword\">constructor</span> (<br>    tag?: string,<br>    data?: VNodeData,<br>    children?: ?Array&lt;VNode&gt;,<br>    text?: string,<br>    elm?: Node,<br>    context?: Component,<br>    componentOptions?: VNodeComponentOptions,<br>    asyncFactory?: Function<br>  ) &#123;<br>    <span class=\"hljs-built_in\">this</span>.tag = tag                                <span class=\"hljs-comment\">/*当前节点的标签名*/</span><br>    <span class=\"hljs-built_in\">this</span>.data = data        <span class=\"hljs-comment\">/*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/</span><br>    <span class=\"hljs-built_in\">this</span>.children = children  <span class=\"hljs-comment\">/*当前节点的子节点，是一个数组*/</span><br>    <span class=\"hljs-built_in\">this</span>.text = text     <span class=\"hljs-comment\">/*当前节点的文本*/</span><br>    <span class=\"hljs-built_in\">this</span>.elm = elm       <span class=\"hljs-comment\">/*当前虚拟节点对应的真实dom节点*/</span><br>    <span class=\"hljs-built_in\">this</span>.ns = <span class=\"hljs-literal\">undefined</span>            <span class=\"hljs-comment\">/*当前节点的名字空间*/</span><br>    <span class=\"hljs-built_in\">this</span>.context = context          <span class=\"hljs-comment\">/*当前组件节点对应的Vue实例*/</span><br>    <span class=\"hljs-built_in\">this</span>.fnContext = <span class=\"hljs-literal\">undefined</span>       <span class=\"hljs-comment\">/*函数式组件对应的Vue实例*/</span><br>    <span class=\"hljs-built_in\">this</span>.fnOptions = <span class=\"hljs-literal\">undefined</span><br>    <span class=\"hljs-built_in\">this</span>.fnScopeId = <span class=\"hljs-literal\">undefined</span><br>    <span class=\"hljs-built_in\">this</span>.key = data &amp;&amp; data.key           <span class=\"hljs-comment\">/*节点的key属性，被当作节点的标志，用以优化*/</span><br>    <span class=\"hljs-built_in\">this</span>.componentOptions = componentOptions   <span class=\"hljs-comment\">/*组件的option选项*/</span><br>    <span class=\"hljs-built_in\">this</span>.componentInstance = <span class=\"hljs-literal\">undefined</span>       <span class=\"hljs-comment\">/*当前节点对应的组件的实例*/</span><br>    <span class=\"hljs-built_in\">this</span>.parent = <span class=\"hljs-literal\">undefined</span>           <span class=\"hljs-comment\">/*当前节点的父节点*/</span><br>    <span class=\"hljs-built_in\">this</span>.raw = <span class=\"hljs-literal\">false</span>         <span class=\"hljs-comment\">/*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/</span><br>    <span class=\"hljs-built_in\">this</span>.isStatic = <span class=\"hljs-literal\">false</span>         <span class=\"hljs-comment\">/*静态节点标志*/</span><br>    <span class=\"hljs-built_in\">this</span>.isRootInsert = <span class=\"hljs-literal\">true</span>      <span class=\"hljs-comment\">/*是否作为跟节点插入*/</span><br>    <span class=\"hljs-built_in\">this</span>.isComment = <span class=\"hljs-literal\">false</span>             <span class=\"hljs-comment\">/*是否为注释节点*/</span><br>    <span class=\"hljs-built_in\">this</span>.isCloned = <span class=\"hljs-literal\">false</span>           <span class=\"hljs-comment\">/*是否为克隆节点*/</span><br>    <span class=\"hljs-built_in\">this</span>.isOnce = <span class=\"hljs-literal\">false</span>                <span class=\"hljs-comment\">/*是否有v-once指令*/</span><br>    <span class=\"hljs-built_in\">this</span>.asyncFactory = asyncFactory<br>    <span class=\"hljs-built_in\">this</span>.asyncMeta = <span class=\"hljs-literal\">undefined</span><br>    <span class=\"hljs-built_in\">this</span>.isAsyncPlaceholder = <span class=\"hljs-literal\">false</span><br>  &#125;<br><br>  get child (): Component | <span class=\"hljs-keyword\">void</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.componentInstance<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从上面的代码中可以看出：<code>VNode</code>类中包含了描述一个真实<code>DOM</code>节点所需要的一系列属性，如<code>tag</code>表示节点的标签名，<code>text</code>表示节点中包含的文本，<code>children</code>表示该节点包含的子节点等。通过属性之间不同的搭配，就可以描述出各种类型的真实<code>DOM</code>节点。</p>\n<h5 id=\"VNode的类型\"><a href=\"#VNode的类型\" class=\"headerlink\" title=\"VNode的类型\"></a>VNode的类型</h5><p>上一小节最后我们说了，通过属性之间不同的搭配，<code>VNode</code>类可以描述出各种类型的真实<code>DOM</code>节点。那么它都可以描述出哪些类型的节点呢？通过阅读源码，可以发现通过不同属性的搭配，可以描述出以下几种类型的节点。</p>\n<ul>\n<li>注释节点</li>\n<li>文本节点</li>\n<li>元素节点</li>\n<li>组件节点</li>\n<li>函数式组件节点</li>\n<li>克隆节点</li>\n</ul>\n<p>1.注释节点</p>\n<p>描述起来相对就非常简单了，它只需两个属性就够了，源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 创建注释节点</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> createEmptyVNode = <span class=\"hljs-function\">(<span class=\"hljs-params\">text: string = <span class=\"hljs-string\">&#x27;&#x27;</span></span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> VNode()<br>  node.text = text<br>  node.isComment = <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-keyword\">return</span> node<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从上面代码中可以看到，描述一个注释节点只需两个属性，分别是：<code>text</code>和<code>isComment</code>。其中<code>text</code>属性表示具体的注释信息，<code>isComment</code>是一个标志，用来标识一个节点是否是注释节点。</p>\n<p>2.文本节点</p>\n<p>文本节点描述起来比注释节点更简单，因为它只需要一个属性，那就是<code>text</code>属性，用来表示具体的文本信息。源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 创建文本节点</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createTextVNode</span> (<span class=\"hljs-params\">val: string | number</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> VNode(<span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-built_in\">String</span>(val))<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3.克隆节点</p>\n<p>克隆节点就是把一个已经存在的节点复制一份出来，它主要是为了做模板编译优化时使用，这个后面我们会说到。关于克隆节点的描述，源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 创建克隆节点</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cloneVNode</span> (<span class=\"hljs-params\">vnode: VNode</span>): <span class=\"hljs-title\">VNode</span> </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> cloned = <span class=\"hljs-keyword\">new</span> VNode(<br>    vnode.tag,<br>    vnode.data,<br>    vnode.children,<br>    vnode.text,<br>    vnode.elm,<br>    vnode.context,<br>    vnode.componentOptions,<br>    vnode.asyncFactory<br>  )<br>  cloned.ns = vnode.ns<br>  cloned.isStatic = vnode.isStatic<br>  cloned.key = vnode.key<br>  cloned.isComment = vnode.isComment<br>  cloned.fnContext = vnode.fnContext<br>  cloned.fnOptions = vnode.fnOptions<br>  cloned.fnScopeId = vnode.fnScopeId<br>  cloned.asyncMeta = vnode.asyncMeta<br>  cloned.isCloned = <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-keyword\">return</span> cloned<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从上面代码中可以看到，克隆节点就是把已有节点的属性全部复制到新节点中，而现有节点和新克隆得到的节点之间唯一的不同就是克隆得到的节点<code>isCloned</code>为<code>true</code></p>\n<p>4.元素节点</p>\n<p>相比之下，元素节点更贴近于我们通常看到的真实<code>DOM</code>节点，它有描述节点标签名词的<code>tag</code>属性，描述节点属性如<code>class</code>、<code>attributes</code>等的<code>data</code>属性，有描述包含的子节点信息的<code>children</code>属性等。由于元素节点所包含的情况相比而言比较复杂，源码中没有像前三种节点一样直接写死（当然也不可能写死），那就举个简单例子说明一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 真实DOM节点</span><br>&lt;div id=<span class=\"hljs-string\">&#x27;a&#x27;</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>难凉热血<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>&lt;/div&gt;<br><br><span class=\"hljs-comment\">// VNode节点</span><br>&#123;<br>  tag:<span class=\"hljs-string\">&#x27;div&#x27;</span>,<br>  data:&#123;&#125;,<br>  children:[<br>    &#123;<br>      tag:<span class=\"hljs-string\">&#x27;span&#x27;</span>,<br>      text:<span class=\"hljs-string\">&#x27;难凉热血&#x27;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们可以看到，真实<code>DOM</code>节点中:<code>div</code>标签里面包含了一个<code>span</code>标签，而<code>span</code>标签里面有一段文本。反应到<code>VNode</code>节点上就如上所示:<code>tag</code>表示标签名，<code>data</code>表示标签的属性<code>id</code>等，<code>children</code>表示子节点数组。</p>\n<p>5.组件节点</p>\n<p>组件节点除了有元素节点具有的属性之外，它还有两个特有的属性：</p>\n<ul>\n<li>componentOptions :组件的option选项，如组件的<code>props</code>等</li>\n<li>componentInstance :当前组件节点对应的<code>Vue</code>实例</li>\n</ul>\n<p>6.函数式组件节点</p>\n<p>函数式组件节点相较于组件节点，它又有两个特有的属性：</p>\n<ul>\n<li>fnContext:函数式组件对应的Vue实例</li>\n<li>fnOptions: 组件的option选项</li>\n</ul>\n<p>以上就是<code>VNode</code>可以描述的多种节点类型，它们本质上都是<code>VNode</code>类的实例，只是在实例化的时候传入的属性参数不同而已。</p>\n<h6 id=\"VNode的作用\"><a href=\"#VNode的作用\" class=\"headerlink\" title=\"VNode的作用:\"></a>VNode的作用:</h6><p>说了这么多，那么<code>VNode</code>在<code>Vue</code>的整个虚拟<code>DOM</code>过程起了什么作用呢？</p>\n<p>其实<code>VNode</code>的作用是相当大的。我们在视图渲染之前，把写好的<code>template</code>模板先编译成<code>VNode</code>并缓存下来，等到数据发生变化页面需要重新渲染的时候，我们把数据发生变化后生成的<code>VNode</code>与前一次缓存下来的<code>VNode</code>进行对比，找出差异，然后有差异的<code>VNode</code>对应的真实<code>DOM</code>节点就是需要重新渲染的节点，最后根据有差异的<code>VNode</code>创建出真实的<code>DOM</code>节点再插入到视图中，最终完成一次视图更新。</p>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><p>本章首先介绍了虚拟<code>DOM</code>的一些基本概念和为什么要有虚拟<code>DOM</code>，其实说白了就是以<code>JS</code>的计算性能来换取操作真实<code>DOM</code>所消耗的性能。接着从源码角度我们知道了在<code>Vue</code>中是通过<code>VNode</code>类来实例化出不同类型的虚拟<code>DOM</code>节点，并且学习了不同类型节点生成的属性的不同，所谓不同类型的节点其本质还是一样的，都是<code>VNode</code>类的实例，只是在实例化时传入的属性参数不同罢了。最后探究了<code>VNode</code>的作用，有了数据变化前后的<code>VNode</code>，我们才能进行后续的<code>DOM-Diff</code>找出差异，最终做到只更新有差异的视图，从而达到尽可能少的操作真实<code>DOM</code>的目的，以节省性能。</p>\n<h5 id=\"vue虚拟dom的diff\"><a href=\"#vue虚拟dom的diff\" class=\"headerlink\" title=\"vue虚拟dom的diff\"></a>vue虚拟dom的diff</h5><p>在上一篇文章介绍<code>VNode</code>的时候我们说了，<code>VNode</code>最大的用途就是在数据变化前后生成真实<code>DOM</code>对应的虚拟<code>DOM</code>节点，然后就可以对比新旧两份<code>VNode</code>，找出差异所在，然后更新有差异的<code>DOM</code>节点，最终达到以最少操作真实<code>DOM</code>更新视图的目的。而对比新旧两份<code>VNode</code>并找出差异的过程就是所谓的<code>DOM-Diff</code>过程。<code>DOM-Diff</code>算法是整个虚拟<code>DOM</code>的核心所在，那么接下来，我们就以源码出发，深入研究一下<code>Vue</code>中的<code>DOM-Diff</code>过程是怎样的。</p>\n<p>在<code>Vue</code>中，把 <code>DOM-Diff</code>过程叫做<code>patch</code>过程。patch,意为“补丁”，即指对旧的<code>VNode</code>修补，打补丁从而得到新的<code>VNode</code>，非常形象哈。那不管叫什么，其本质都是把对比新旧两份<code>VNode</code>的过程。我们在下面研究<code>patch</code>过程的时候，一定把握住这样一个思想：所谓旧的<code>VNode</code>(即<code>oldVNode</code>)就是数据变化之前视图所对应的虚拟<code>DOM</code>节点，而新的<code>VNode</code>是数据变化之后将要渲染的新的视图所对应的虚拟<code>DOM</code>节点，所以我们要以生成的新的<code>VNode</code>为基准，对比旧的<code>oldVNode</code>，如果新的<code>VNode</code>上有的节点而旧的<code>oldVNode</code>上没有，那么就在旧的<code>oldVNode</code>上加上去；如果新的<code>VNode</code>上没有的节点而旧的<code>oldVNode</code>上有，那么就在旧的<code>oldVNode</code>上去掉；如果某些节点在新的<code>VNode</code>和旧的<code>oldVNode</code>上都有，那么就以新的<code>VNode</code>为准，更新旧的<code>oldVNode</code>，从而让新旧<code>VNode</code>相同。</p>\n<p>总之一句话：<strong>以新的VNode为基准，改造旧的oldVNode使之成为跟新的VNode一样，这就是patch过程要干的事</strong>。</p>\n<p>说了这么多，听起来感觉好像很复杂的样子，其实不然，我们仔细想想，整个<code>patch</code>无非就是干三件事：</p>\n<ul>\n<li>创建节点：新的<code>VNode</code>中有而旧的<code>oldVNode</code>中没有，就在旧的<code>oldVNode</code>中创建。</li>\n<li>删除节点：新的<code>VNode</code>中没有而旧的<code>oldVNode</code>中有，就从旧的<code>oldVNode</code>中删除。</li>\n<li>更新节点：新的<code>VNode</code>和旧的<code>oldVNode</code>中都有，就以新的<code>VNode</code>为准，更新旧的<code>oldVNode</code>。</li>\n</ul>\n<p>OK，到这里，你就对<code>Vue</code>中的<code>patch</code>过程理解了一半了，接下来，我们就逐个分析，看<code>Vue</code>对于以上三件事都是怎么做的。</p>\n<h6 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h6><p>上篇文章中我们分析了，<code>VNode</code>类可以描述6种类型的节点，而实际上只有3种类型的节点能够被创建并插入到<code>DOM</code>中，它们分别是：元素节点、文本节点、注释节点。所以<code>Vue</code>在创建节点的时候会判断在新的<code>VNode</code>中有而旧的<code>oldVNode</code>中没有的这个节点是属于哪种类型的节点，从而调用不同的方法创建并插入到<code>DOM</code>中。</p>\n<p>其实判断起来也不难，因为这三种类型的节点其特点非常明显，在源码中是怎么判断的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 源码位置: /src/core/vdom/patch.js</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createElm</span> (<span class=\"hljs-params\">vnode, parentElm, refElm</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">const</span> data = vnode.data<br>    <span class=\"hljs-keyword\">const</span> children = vnode.children<br>    <span class=\"hljs-keyword\">const</span> tag = vnode.tag<br>    <span class=\"hljs-keyword\">if</span> (isDef(tag)) &#123;<br>      \tvnode.elm = nodeOps.createElement(tag, vnode)   <span class=\"hljs-comment\">// 创建元素节点</span><br>        createChildren(vnode, children, insertedVnodeQueue) <span class=\"hljs-comment\">// 创建元素节点的子节点</span><br>        insert(parentElm, vnode.elm, refElm)       <span class=\"hljs-comment\">// 插入到DOM中</span><br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isTrue(vnode.isComment)) &#123;<br>      vnode.elm = nodeOps.createComment(vnode.text)  <span class=\"hljs-comment\">// 创建注释节点</span><br>      insert(parentElm, vnode.elm, refElm)           <span class=\"hljs-comment\">// 插入到DOM中</span><br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      vnode.elm = nodeOps.createTextNode(vnode.text)  <span class=\"hljs-comment\">// 创建文本节点</span><br>      insert(parentElm, vnode.elm, refElm)           <span class=\"hljs-comment\">// 插入到DOM中</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>从上面代码中，我们可以看出：</p>\n<ul>\n<li>判断是否为元素节点只需判断该<code>VNode</code>节点是否有<code>tag</code>标签即可。如果有<code>tag</code>属性即认为是元素节点，则调用<code>createElement</code>方法创建元素节点，通常元素节点还会有子节点，那就递归遍历创建所有子节点，将所有子节点创建好之后<code>insert</code>插入到当前元素节点里面，最后把当前元素节点插入到<code>DOM</code>中。</li>\n<li>判断是否为注释节点，只需判断<code>VNode</code>的<code>isComment</code>属性是否为<code>true</code>即可，若为<code>true</code>则为注释节点，则调用<code>createComment</code>方法创建注释节点，再插入到<code>DOM</code>中。</li>\n<li>如果既不是元素节点，也不是注释节点，那就认为是文本节点，则调用<code>createTextNode</code>方法创建文本节点，再插入到<code>DOM</code>中。</li>\n</ul>\n<blockquote>\n<p>代码中的<code>nodeOps</code>是<code>Vue</code>为了跨平台兼容性，对所有节点操作进行了封装，例如<code>nodeOps.createTextNode()</code>在浏览器端等同于<code>document.createTextNode()</code></p>\n</blockquote>\n<p>以上就完成了创建节点的操作，其完整流程图如下：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425121000760.png\" alt=\"image-20210425121000760\"></p>\n<h6 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h6><p>如果某些节点再新的<code>VNode</code>中没有而在旧的<code>oldVNode</code>中有，那么就需要把这些节点从旧的<code>oldVNode</code>中删除。删除节点非常简单，只需在要删除节点的父元素上调用<code>removeChild</code>方法即可。源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">removeNode</span> (<span class=\"hljs-params\">el</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">const</span> parent = nodeOps.parentNode(el)  <span class=\"hljs-comment\">// 获取父节点</span><br>    <span class=\"hljs-keyword\">if</span> (isDef(parent)) &#123;<br>      nodeOps.removeChild(parent, el)  <span class=\"hljs-comment\">// 调用父节点的removeChild方法</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"更新节点\"><a href=\"#更新节点\" class=\"headerlink\" title=\"更新节点\"></a>更新节点</h6><p>创建节点和删除节点都比较简单，而更新节点就相对较为复杂一点了，其实也不算多复杂，只要理清逻辑就能理解了。</p>\n<p>更新节点就是当某些节点在新的<code>VNode</code>和旧的<code>oldVNode</code>中都有时，我们就需要细致比较一下，找出不一样的地方进行更新。</p>\n<p>介绍更新节点之前，我们先介绍一个小的概念，就是什么是静态节点？我们看个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>我是不会变化的文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>面这个节点里面只包含了纯文字，没有任何可变的变量，这也就是说，不管数据再怎么变化，只要这个节点第一次渲染了，那么它以后就永远不会发生变化，这是因为它不包含任何变量，所以数据发生任何变化都与它无关。我们把这种节点称之为静态节点。</p>\n<p>OK，有了这个概念以后，我们开始更新节点。更新节点的时候我们需要对以下3种情况进行判断并分别处理：</p>\n<ol>\n<li><p>如果<code>VNode</code>和<code>oldVNode</code>均为静态节点</p>\n<p>我们说了，静态节点无论数据发生任何变化都与它无关，所以都为静态节点的话则直接跳过，无需处理。</p>\n</li>\n<li><p>如果<code>VNode</code>是文本节点</p>\n<p>如果<code>VNode</code>是文本节点即表示这个节点内只包含纯文本，那么只需看<code>oldVNode</code>是否也是文本节点，如果是，那就比较两个文本是否不同，如果不同则把<code>oldVNode</code>里的文本改成跟<code>VNode</code>的文本一样。如果<code>oldVNode</code>不是文本节点，那么不论它是什么，直接调用<code>setTextNode</code>方法把它改成文本节点，并且文本内容跟<code>VNode</code>相同。</p>\n</li>\n<li><p>如果<code>VNode</code>是元素节点</p>\n<p>如果<code>VNode</code>是元素节点，则又细分以下两种情况：</p>\n<ul>\n<li><p>该节点包含子节点</p>\n<p>如果新的节点内包含了子节点，那么此时要看旧的节点是否包含子节点，如果旧的节点里也包含了子节点，那就需要递归对比更新子节点；如果旧的节点里不包含子节点，那么这个旧节点有可能是空节点或者是文本节点，如果旧的节点是空节点就把新的节点里的子节点创建一份然后插入到旧的节点里面，如果旧的节点是文本节点，则把文本清空，然后把新的节点里的子节点创建一份然后插入到旧的节点里面。</p>\n</li>\n<li><p>该节点不包含子节点</p>\n<p>如果该节点不包含子节点，同时它又不是文本节点，那就说明该节点是个空节点，那就好办了，不管旧节点之前里面都有啥，直接清空即可。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>OK，处理完以上3种情况，更新节点就算基本完成了，接下来我们看下源码中具体是怎么实现的，源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 更新节点</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">patchVnode</span> (<span class=\"hljs-params\">oldVnode, vnode, insertedVnodeQueue, removeOnly</span>) </span>&#123;<br>  <span class=\"hljs-comment\">// vnode与oldVnode是否完全一样？若是，退出程序</span><br>  <span class=\"hljs-keyword\">if</span> (oldVnode === vnode) &#123;<br>    <span class=\"hljs-keyword\">return</span><br>  &#125;<br>  <span class=\"hljs-keyword\">const</span> elm = vnode.elm = oldVnode.elm<br><br>  <span class=\"hljs-comment\">// vnode与oldVnode是否都是静态节点？若是，退出程序</span><br>  <span class=\"hljs-keyword\">if</span> (isTrue(vnode.isStatic) &amp;&amp;<br>    isTrue(oldVnode.isStatic) &amp;&amp;<br>    vnode.key === oldVnode.key &amp;&amp;<br>    (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))<br>  ) &#123;<br>    <span class=\"hljs-keyword\">return</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">const</span> oldCh = oldVnode.children<br>  <span class=\"hljs-keyword\">const</span> ch = vnode.children<br>  <span class=\"hljs-comment\">// vnode有text属性？若没有：</span><br>  <span class=\"hljs-keyword\">if</span> (isUndef(vnode.text)) &#123;<br>    <span class=\"hljs-comment\">// vnode的子节点与oldVnode的子节点是否都存在？</span><br>    <span class=\"hljs-keyword\">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;<br>      <span class=\"hljs-comment\">// 若都存在，判断子节点是否相同，不同则更新子节点</span><br>      <span class=\"hljs-keyword\">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)<br>    &#125;<br>    <span class=\"hljs-comment\">// 若只有vnode的子节点存在</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isDef(ch)) &#123;<br>      <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">       * 判断oldVnode是否有文本？</span><br><span class=\"hljs-comment\">       * 若没有，则把vnode的子节点添加到真实DOM中</span><br><span class=\"hljs-comment\">       * 若有，则清空Dom中的文本，再把vnode的子节点添加到真实DOM中</span><br><span class=\"hljs-comment\">       */</span><br>      <span class=\"hljs-keyword\">if</span> (isDef(oldVnode.text)) nodeOps.setTextContent(elm, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>      addVnodes(elm, <span class=\"hljs-literal\">null</span>, ch, <span class=\"hljs-number\">0</span>, ch.length - <span class=\"hljs-number\">1</span>, insertedVnodeQueue)<br>    &#125;<br>    <span class=\"hljs-comment\">// 若只有oldnode的子节点存在</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isDef(oldCh)) &#123;<br>      <span class=\"hljs-comment\">// 清空DOM中的子节点</span><br>      removeVnodes(elm, oldCh, <span class=\"hljs-number\">0</span>, oldCh.length - <span class=\"hljs-number\">1</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">// 若vnode和oldnode都没有子节点，但是oldnode中有文本</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isDef(oldVnode.text)) &#123;<br>      <span class=\"hljs-comment\">// 清空oldnode文本</span><br>      nodeOps.setTextContent(elm, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">// 上面两个判断一句话概括就是，如果vnode中既没有text，也没有子节点，那么对应的oldnode中有什么就清空什么</span><br>  &#125;<br>  <span class=\"hljs-comment\">// 若有，vnode的text属性与oldVnode的text属性是否相同？</span><br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (oldVnode.text !== vnode.text) &#123;<br>    <span class=\"hljs-comment\">// 若不相同：则用vnode的text替换真实DOM的文本</span><br>    nodeOps.setTextContent(elm, vnode.text)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上面代码里注释已经写得很清晰了，接下来我们画流程图来梳理一下整个过程，流程图如下：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425121148769.png\" alt=\"image-20210425121148769\"></p>\n<p>通过对照着流程图以及代码，相信更新节点这部分逻辑你很容易就能理解了。s</p>\n<p>另外，你可能注意到了，如果新旧<code>VNode</code>里都包含了子节点，那么对于子节点的更新在代码里调用了<code>updateChildren</code>方法，而这个方法的逻辑到底是怎样的我们放在下一篇文章中展开学习。</p>\n<h6 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h6><p>在本篇文章中我们介绍了<code>Vue</code>中的<code>DOM-Diff</code>算法：patch过程。我们先介绍了算法的整个思想流程，然后通过梳理算法思想，了解了整个<code>patch</code>过程干了三件事，分别是：创建节点，删除节点，更新节点。并且对每件事情都对照源码展开了细致的学习，画出了其逻辑流程图。另外对于更新节点中，如果新旧<code>VNode</code>里都包含了子节点，我们就需要细致的去更新子节点，关于更新子节点的过程我们在下一篇文章中展开学习。</p>\n<p>在上一篇文章中，我们了解了<code>Vue</code>中的<code>patch</code>过程，即<code>DOM-Diff</code>算法。并且知道了在<code>patch</code>过程中基本会干三件事，分别是：创建节点，删除节点和更新节点。创建节点和删除节点都比较简单，而更新节点因为要处理各种可能出现的情况所以逻辑略微复杂一些，但是没关系，我们通过分析过程，对照源码，画逻辑流程图来帮助我们理解了其中的过程。最后我们还遗留了一个问题，那就是在更新节点过程中，新旧<code>VNode</code>可能都包含有子节点，对于子节点的对比更新会有额外的一些逻辑，那么在本篇文章中我们就来学习在<code>Vue</code>中是怎么对比更新子节点的。</p>\n<h6 id=\"更新子节点：\"><a href=\"#更新子节点：\" class=\"headerlink\" title=\"更新子节点：\"></a>更新子节点：</h6><p>当新的<code>VNode</code>与旧的<code>oldVNode</code>都是元素节点并且都包含子节点时，那么这两个节点的<code>VNode</code>实例上的<code>children</code>属性就是所包含的子节点数组。我们把新的<code>VNode</code>上的子节点数组记为<code>newChildren</code>，把旧的<code>oldVNode</code>上的子节点数组记为<code>oldChildren</code>，我们把<code>newChildren</code>里面的元素与<code>oldChildren</code>里的元素一一进行对比，对比两个子节点数组肯定是要通过循环，外层循环<code>newChildren</code>数组，内层循环<code>oldChildren</code>数组，每循环外层<code>newChildren</code>数组里的一个子节点，就去内层<code>oldChildren</code>数组里找看有没有与之相同的子节点，伪代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; newChildren.length; i++) &#123;<br>  <span class=\"hljs-keyword\">const</span> newChild = newChildren[i];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; oldChildren.length; j++) &#123;<br>    <span class=\"hljs-keyword\">const</span> oldChild = oldChildren[j];<br>    <span class=\"hljs-keyword\">if</span> (newChild === oldChild) &#123;<br>      <span class=\"hljs-comment\">// ...</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>那么以上这个过程将会存在以下四种情况：</p>\n<ul>\n<li><p>创建子节点</p>\n<p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找不到与之相同的子节点，那么说明<code>newChildren</code>里面的这个子节点是之前没有的，是需要此次新增的节点，那么就创建子节点。</p>\n</li>\n<li><p>删除子节点</p>\n<p>如果把<code>newChildren</code>里面的每一个子节点都循环完毕后，发现在<code>oldChildren</code>还有未处理的子节点，那就说明这些未处理的子节点是需要被废弃的，那么就将这些节点删除。</p>\n</li>\n<li><p>移动子节点</p>\n<p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找到了与之相同的子节点，但是所处的位置不同，这说明此次变化需要调整该子节点的位置，那就以<code>newChildren</code>里子节点的位置为基准，调整<code>oldChildren</code>里该节点的位置，使之与在<code>newChildren</code>里的位置相同。</p>\n</li>\n<li><p>更新节点</p>\n<p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找到了与之相同的子节点，并且所处的位置也相同，那么就更新<code>oldChildren</code>里该节点，使之与<code>newChildren</code>里的该节点相同。</p>\n</li>\n</ul>\n<p>OK，到这里，逻辑就相对清晰了，接下来我们只需分门别类的处理这四种情况就好了。</p>\n<h6 id=\"创建子节点\"><a href=\"#创建子节点\" class=\"headerlink\" title=\"创建子节点\"></a>创建子节点</h6><p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找不到与之相同的子节点，那么说明<code>newChildren</code>里面的这个子节点是之前没有的，是需要此次新增的节点，那么我们就创建这个节点，创建好之后再把它插入到<code>DOM</code>中合适的位置。</p>\n<p>创建节点这个很容易，我们在上一篇文章的第三章已经介绍过了，这里就不再赘述了。</p>\n<p>那么创建好之后如何插入到<code>DOM</code>中的合适的位置呢？显然，把节点插入到<code>DOM</code>中是很容易的，找到合适的位置是关键。接下来我们分析一下如何找这个合适的位置。我们看下面这个图：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425133824295.png\" alt=\"image-20210425133824295\"></p>\n<p>上图中左边是新的<code>VNode</code>，右边是旧的<code>oldVNode</code>，同时也是真实的<code>DOM</code>。这个图意思是当我们循环<code>newChildren</code>数组里面的子节点，前两个子节点都在<code>oldChildren</code>里找到了与之对应的子节点，那么我们将其处理，处理过后把它们标志为已处理，当循环到<code>newChildren</code>数组里第三个子节点时，发现在<code>oldChildren</code>里找不到与之对应的子节点，那么我们就需要创建这个节点，创建好之后我们发现这个节点本是<code>newChildren</code>数组里左起第三个子节点，那么我们就把创建好的节点插入到真实<code>DOM</code>里的第三个节点位置，也就是所有已处理节点之后，OK，此时我们拍手称快，所有已处理节点之后就是我们要找的合适的位置，但是真的是这样吗？我们再来看下面这个图：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425134249593.png\" alt=\"image-20210425134249593\"></p>\n<p>假如我们按照上面的方法把第三个节点插入到所有已处理节点之后，此时如果第四个节点也在<code>oldChildren</code>里找不到与之对应的节点，也是需要创建的节点，那么当我们把第四个节点也按照上面的说的插入到已处理节点之后，发现怎么插入到第三个位置了，可明明这个节点在<code>newChildren</code>数组里是第四个啊！</p>\n<p>这就是问题所在，其实，我们应该把新创建的节点插入到所有未处理节点之前，这样以来逻辑才正确。后面不管有多少个新增的节点，每一个都插入到所有未处理节点之前，位置才不会错。</p>\n<p>所以，<strong>合适的位置是所有未处理节点之前，而并非所有已处理节点之后</strong>。</p>\n<h6 id=\"删除子节点\"><a href=\"#删除子节点\" class=\"headerlink\" title=\"删除子节点\"></a>删除子节点</h6><p>如果把<code>newChildren</code>里面的每一个子节点都循环一遍，能在<code>oldChildren</code>数组里找到的就处理它，找不到的就新增，直到把<code>newChildren</code>里面所有子节点都过一遍后，发现在<code>oldChildren</code>还存在未处理的子节点，那就说明这些未处理的子节点是需要被废弃的，那么就将这些节点删除。</p>\n<p>删除节点这个也很容易，我们在上一篇文章的第四章已经介绍过了，这里就不再赘述了。</p>\n<h6 id=\"更新子节点\"><a href=\"#更新子节点\" class=\"headerlink\" title=\"更新子节点\"></a>更新子节点</h6><p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找到了与之相同的子节点，并且所处的位置也相同，那么就更新<code>oldChildren</code>里该节点，使之与<code>newChildren</code>里的该节点相同。</p>\n<p>关于更新节点，我们在上一篇文章的第五章已经介绍过了，这里就不再赘述了。</p>\n<h6 id=\"移动子节点\"><a href=\"#移动子节点\" class=\"headerlink\" title=\"移动子节点\"></a>移动子节点</h6><p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找到了与之相同的子节点，但是所处的位置不同，这说明此次变化需要调整该子节点的位置，那就以<code>newChildren</code>里子节点的位置为基准，调整<code>oldChildren</code>里该节点的位置，使之与在<code>newChildren</code>里的位置相同。</p>\n<p>同样，移动一个节点不难，关键在于该移动到哪，或者说关键在于移动到哪个位置，这个位置才是关键。我们看下图：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425134557748.png\" alt=\"image-20210425134557748\"></p>\n<p>在上图中，绿色的两个节点是相同节点但是所处位置不同，即<code>newChildren</code>里面的第三个子节点与真实<code>DOM</code>即<code>oldChildren</code>里面的第四个子节点相同但是所处位置不同，按照上面所说的，我们应该以<code>newChildren</code>里子节点的位置为基准，调整<code>oldChildren</code>里该节点的位置，所以我们应该把真实<code>DOM</code>即<code>oldChildren</code>里面的第四个节点移动到第三个节点的位置，通过上图中的标注我们不难发现，<strong>所有未处理节点之前就是我们要移动的目的位置</strong>。如果此时你说那可不可以移动到所有已处理节点之后呢？那就又回到了更新节点时所遇到的那个问题了：如果前面有新增的节点呢？</p>\n<h6 id=\"回到源码\"><a href=\"#回到源码\" class=\"headerlink\" title=\"回到源码\"></a>回到源码</h6><p>OK，以上就是更新子节点时所要考虑的所有情况了，分析完以后，我们回到源码里看看实际情况是不是我们分析的这样子的，源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 源码位置： /src/core/vdom/patch.js</span><br><br><span class=\"hljs-keyword\">if</span> (isUndef(idxInOld)) &#123;    <span class=\"hljs-comment\">// 如果在oldChildren里找不到当前循环的newChildren里的子节点</span><br>    <span class=\"hljs-comment\">// 新增节点并插入到合适位置</span><br>    createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"hljs-literal\">false</span>, newCh, newStartIdx)<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 如果在oldChildren里找到了当前循环的newChildren里的子节点</span><br>    vnodeToMove = oldCh[idxInOld]<br>    <span class=\"hljs-comment\">// 如果两个节点相同</span><br>    <span class=\"hljs-keyword\">if</span> (sameVnode(vnodeToMove, newStartVnode)) &#123;<br>        <span class=\"hljs-comment\">// 调用patchVnode更新节点</span><br>        patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue)<br>        oldCh[idxInOld] = <span class=\"hljs-literal\">undefined</span><br>        <span class=\"hljs-comment\">// canmove表示是否需要移动节点，如果为true表示需要移动，则移动节点，如果为false则不用移动</span><br>        canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>以上代码中，首先判断在<code>oldChildren</code>里能否找到当前循环的<code>newChildren</code>里的子节点，如果找不到，那就是新增节点并插入到合适位置；如果找到了，先对比两个节点是否相同，若相同则先调用<code>patchVnode</code>更新节点，更新完之后再看是否需要移动节点，注意，源码里在判断是否需要移动子节点时用了简写的方式，下面这两种写法是等价的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)<br><span class=\"hljs-comment\">// 等同于</span><br><span class=\"hljs-keyword\">if</span>(canMove)&#123;<br>    nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们看到，源码里的实现跟我们分析的是一样一样的。</p>\n<h6 id=\"总结：：\"><a href=\"#总结：：\" class=\"headerlink\" title=\"总结：：\"></a>总结：：</h6><p>本篇文章我们分析了<code>Vue</code>在更新子节点时是外层循环<code>newChildren</code>数组，内层循环<code>oldChildren</code>数组，把<code>newChildren</code>数组里的每一个元素分别与<code>oldChildren</code>数组里的每一个元素匹配，根据不同情况作出创建子节点、删除子节点、更新子节点以及移动子节点的操作。并且我们对不同情况的不同操作都进行了深入分析，分析之后我们回到源码验证我们分析的正确性，发现我们的分析跟源码的实现是一致的。</p>\n<p>最后，我们再思考一个问题：这样双层循环虽然能解决问题，但是如果节点数量很多，这样循环算法的时间复杂度会不会很高？有没有什么可以优化的办法？答案当然是有的，并且<code>Vue</code>也意识到了这点，也进行了优化，那么下篇文章我们就来分析当节点数量很多时<code>Vue</code>是怎么优化算法的。</p>\n<h6 id=\"优化更新子节点\"><a href=\"#优化更新子节点\" class=\"headerlink\" title=\"优化更新子节点\"></a>优化更新子节点</h6><p>在上一篇文章中，我们介绍了当新的<code>VNode</code>与旧的<code>oldVNode</code>都是元素节点并且都包含子节点时，<code>Vue</code>对子节点是</p>\n<p>先外层循环<code>newChildren</code>数组，再内层循环<code>oldChildren</code>数组，每循环外层<code>newChildren</code>数组里的一个子节点，就去内层<code>oldChildren</code>数组里找看有没有与之相同的子节点，最后根据不同的情况作出不同的操作。</p>\n<p>在上一篇文章的结尾我们也说了，这种方法虽然能够解决问题，但是还存在可优化的地方。比如当包含的子节点数量很多时，这样循环算法的时间复杂度就会变的很大，不利于性能提升。当然，<code>Vue</code>也意识到了这点，并对此也进行了优化，那么本篇文章，就来学习一下关于子节点更新的优化问题<code>Vue</code>是如何做的。</p>\n<h6 id=\"优化策略介绍：\"><a href=\"#优化策略介绍：\" class=\"headerlink\" title=\"优化策略介绍：\"></a>优化策略介绍：</h6><p>假如我们现有一份新的<code>newChildren</code>数组和旧的<code>oldChildren</code>数组，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">newChildren = [<span class=\"hljs-string\">&#x27;新子节点1&#x27;</span>,<span class=\"hljs-string\">&#x27;新子节点2&#x27;</span>,<span class=\"hljs-string\">&#x27;新子节点3&#x27;</span>,<span class=\"hljs-string\">&#x27;新子节点4&#x27;</span>]<br>oldChildren = [<span class=\"hljs-string\">&#x27;旧子节点1&#x27;</span>,<span class=\"hljs-string\">&#x27;旧子节点2&#x27;</span>,<span class=\"hljs-string\">&#x27;旧子节点3&#x27;</span>,<span class=\"hljs-string\">&#x27;旧子节点4&#x27;</span>]<br></code></pre></td></tr></table></figure>\n\n<p>如果按照优化之前的解决方案，那么我们接下来的操作应该是这样的：先循环<code>newChildren</code>数组，拿到第一个新子节点1，然后用第一个新子节点1去跟<code>oldChildren</code>数组里的旧子节点逐一对比，如果运气好一点，刚好<code>oldChildren</code>数组里的第一个旧子节点1与第一个新子节点1相同，那就皆大欢喜，直接处理，不用再往下循环了。那如果运气坏一点，直到循环到<code>oldChildren</code>数组里的第四个旧子节点4才与第一个新子节点1相同，那此时就会多循环了4次。我们不妨把情况再设想的极端一点，如果<code>newChildren</code>数组和<code>oldChildren</code>数组里前三个节点都没有变化，只是第四个节点发生了变化，那么我们就会循环16次，只有在第16次循环的时候才发现新节点4与旧节点4相同，进行更新，如下图所示：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425135252298.png\" alt=\"image-20210425135252298\">    </p>\n<p>上面例子中只有四个子节点，好像还看不出来有什么缺陷，但是当子节点数量很多的时候，算法的时间复杂度就会非常高，很不利于性能提升。</p>\n<p>那么我们该怎么优化呢？其实我们可以这样想，我们不要按顺序去循环<code>newChildren</code>和<code>oldChildren</code>这两个数组，可以先比较这两个数组里特殊位置的子节点，比如：</p>\n<ul>\n<li><p>先把<code>newChildren</code>数组里的所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作；</p>\n</li>\n<li><p>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作；</p>\n</li>\n<li><p>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</p>\n</li>\n<li><p>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</p>\n</li>\n<li><p>最后四种情况都试完如果还不同，那就按照之前循环的方式来查找节点。上面例子中只有四个子节点，好像还看不出来有什么缺陷，但是当子节点数量很多的时候，算法的时间复杂度就会非常高，很不利于性能提升。</p>\n<p>那么我们该怎么优化呢？其实我们可以这样想，我们不要按顺序去循环<code>newChildren</code>和<code>oldChildren</code>这两个数组，可以先比较这两个数组里特殊位置的子节点，比如：</p>\n<ul>\n<li>先把<code>newChildren</code>数组里的所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作；</li>\n<li>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作；</li>\n<li>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</li>\n<li>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</li>\n<li>最后四种情况都试完如果还不同，那就按照之前循环的方式来查找节点。</li>\n</ul>\n</li>\n</ul>\n<p>其过程如下图所示：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425135454618.png\" alt=\"image-20210425135454618\"></p>\n<p>在上图中，我们把：</p>\n<ul>\n<li><code>newChildren</code>数组里的所有未处理子节点的第一个子节点称为：新前；</li>\n<li><code>newChildren</code>数组里的所有未处理子节点的最后一个子节点称为：新后；</li>\n<li><code>oldChildren</code>数组里的所有未处理子节点的第一个子节点称为：旧前；</li>\n<li><code>oldChildren</code>数组里的所有未处理子节点的最后一个子节点称为：旧后；</li>\n</ul>\n<p>OK，有了以上概念以后，下面我们就来看看其具体是如何实施的。</p>\n<h6 id=\"新前与旧前\"><a href=\"#新前与旧前\" class=\"headerlink\" title=\"新前与旧前\"></a>新前与旧前</h6><p>把<code>newChildren</code>数组里的所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那好极了，直接进入之前文章中说的更新节点的操作并且由于新前与旧前两个节点的位置也相同，无需进行节点移动操作；如果不同，没关系，再尝试后面三种情况。</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425135923348.png\" alt=\"image-20210425135923348\"></p>\n<h6 id=\"新后与旧后\"><a href=\"#新后与旧后\" class=\"headerlink\" title=\"新后与旧后\"></a>新后与旧后</h6><p>把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作并且由于新后与旧后两个节点的位置也相同，无需进行节点移动操作；如果不同，继续往后尝试。</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140013890.png\" alt=\"image-20210425140013890\"></p>\n<h5 id=\"新后与旧前\"><a href=\"#新后与旧前\" class=\"headerlink\" title=\"新后与旧前\"></a>新后与旧前</h5><p>把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140051237.png\" alt=\"image-20210425140051237\"></p>\n<p>此时，出现了移动节点的操作，移动节点最关键的地方在于找准要移动的位置。我们一再强调，<strong>更新节点要以新<code>VNode</code>为基准，然后操作旧的<code>oldVNode</code>，使之最后旧的<code>oldVNode</code>与新的<code>VNode</code>相同</strong>。那么现在的情况是：<code>newChildren</code>数组里的最后一个子节点与<code>oldChildren</code>数组里的第一个子节点相同，那么我们就应该在<code>oldChildren</code>数组里把第一个子节点移动到最后一个子节点的位置，如下图：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140208880.png\" alt=\"image-20210425140208880\"></p>\n<p>从图中不难看出，我们要把<code>oldChildren</code>数组里把第一个子节点移动到数组中<strong>所有未处理节点之后</strong>。</p>\n<p>如果对比之后发现这两个节点仍不是同一个节点，那就继续尝试最后一种情况。</p>\n<h6 id=\"新前与旧后\"><a href=\"#新前与旧后\" class=\"headerlink\" title=\"新前与旧后\"></a>新前与旧后</h6><p>把<code>newChildren</code>数组里所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140311007.png\" alt=\"image-20210425140311007\"></p>\n<p>同样，这种情况的节点移动位置逻辑与“新后与旧前”的逻辑类似，那就是<code>newChildren</code>数组里的第一个子节点与<code>oldChildren</code>数组里的最后一个子节点相同，那么我们就应该在<code>oldChildren</code>数组里把最后一个子节点移动到第一个子节点的位置，如下图：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140415224.png\" alt=\"image-20210425140415224\"></p>\n<p>从图中不难看出，我们要把<code>oldChildren</code>数组里把最后一个子节点移动到数组中<strong>所有未处理节点之前</strong>。</p>\n<p>OK，以上就是子节点对比更新优化策略种的4种情况，如果以上4种情况逐个试遍之后要是还没找到相同的节点，那就再通过之前的循环方式查找。</p>\n<h6 id=\"回到源码：：\"><a href=\"#回到源码：：\" class=\"headerlink\" title=\"回到源码：：\"></a>回到源码：：</h6><p>思路分析完，逻辑理清之后，我们再回到源码里看看，验证一下源码实现的逻辑是否跟我们分析的一样。源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 循环更新子节点</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateChildren</span> (<span class=\"hljs-params\">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> oldStartIdx = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">// oldChildren开始索引</span><br>    <span class=\"hljs-keyword\">let</span> oldEndIdx = oldCh.length - <span class=\"hljs-number\">1</span>   <span class=\"hljs-comment\">// oldChildren结束索引</span><br>    <span class=\"hljs-keyword\">let</span> oldStartVnode = oldCh[<span class=\"hljs-number\">0</span>]        <span class=\"hljs-comment\">// oldChildren中所有未处理节点中的第一个</span><br>    <span class=\"hljs-keyword\">let</span> oldEndVnode = oldCh[oldEndIdx]   <span class=\"hljs-comment\">// oldChildren中所有未处理节点中的最后一个</span><br><br>    <span class=\"hljs-keyword\">let</span> newStartIdx = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">// newChildren开始索引</span><br>    <span class=\"hljs-keyword\">let</span> newEndIdx = newCh.length - <span class=\"hljs-number\">1</span>   <span class=\"hljs-comment\">// newChildren结束索引</span><br>    <span class=\"hljs-keyword\">let</span> newStartVnode = newCh[<span class=\"hljs-number\">0</span>]        <span class=\"hljs-comment\">// newChildren中所有未处理节点中的第一个</span><br>    <span class=\"hljs-keyword\">let</span> newEndVnode = newCh[newEndIdx]  <span class=\"hljs-comment\">// newChildren中所有未处理节点中的最后一个</span><br><br>    <span class=\"hljs-keyword\">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm<br><br>    <span class=\"hljs-comment\">// removeOnly is a special flag used only by &lt;transition-group&gt;</span><br>    <span class=\"hljs-comment\">// to ensure removed elements stay in correct relative positions</span><br>    <span class=\"hljs-comment\">// during leaving transitions</span><br>    <span class=\"hljs-keyword\">const</span> canMove = !removeOnly<br><br>    <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&#x27;production&#x27;</span>) &#123;<br>      checkDuplicateKeys(newCh)<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 以&quot;新前&quot;、&quot;新后&quot;、&quot;旧前&quot;、&quot;旧后&quot;的方式开始比对节点</span><br>    <span class=\"hljs-keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;<br>      <span class=\"hljs-keyword\">if</span> (isUndef(oldStartVnode)) &#123;<br>        oldStartVnode = oldCh[++oldStartIdx] <span class=\"hljs-comment\">// 如果oldStartVnode不存在，则直接跳过，比对下一个</span><br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isUndef(oldEndVnode)) &#123;<br>        oldEndVnode = oldCh[--oldEndIdx]<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;<br>        <span class=\"hljs-comment\">// 如果新前与旧前节点相同，就把两个节点进行patch更新</span><br>        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)<br>        oldStartVnode = oldCh[++oldStartIdx]<br>        newStartVnode = newCh[++newStartIdx]<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;<br>        <span class=\"hljs-comment\">// 如果新后与旧后节点相同，就把两个节点进行patch更新</span><br>        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)<br>        oldEndVnode = oldCh[--oldEndIdx]<br>        newEndVnode = newCh[--newEndIdx]<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class=\"hljs-comment\">// Vnode moved right</span><br>        <span class=\"hljs-comment\">// 如果新后与旧前节点相同，先把两个节点进行patch更新，然后把旧前节点移动到oldChilren中所有未处理节点之后</span><br>        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)<br>        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))<br>        oldStartVnode = oldCh[++oldStartIdx]<br>        newEndVnode = newCh[--newEndIdx]<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class=\"hljs-comment\">// Vnode moved left</span><br>        <span class=\"hljs-comment\">// 如果新前与旧后节点相同，先把两个节点进行patch更新，然后把旧后节点移动到oldChilren中所有未处理节点之前</span><br>        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)<br>        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)<br>        oldEndVnode = oldCh[--oldEndIdx]<br>        newStartVnode = newCh[++newStartIdx]<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 如果不属于以上四种情况，就进行常规的循环比对patch</span><br>        <span class=\"hljs-keyword\">if</span> (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)<br>        idxInOld = isDef(newStartVnode.key)<br>          ? oldKeyToIdx[newStartVnode.key]<br>          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)<br>        <span class=\"hljs-comment\">// 如果在oldChildren里找不到当前循环的newChildren里的子节点</span><br>        <span class=\"hljs-keyword\">if</span> (isUndef(idxInOld)) &#123; <span class=\"hljs-comment\">// New element</span><br>          <span class=\"hljs-comment\">// 新增节点并插入到合适位置</span><br>          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"hljs-literal\">false</span>, newCh, newStartIdx)<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>          <span class=\"hljs-comment\">// 如果在oldChildren里找到了当前循环的newChildren里的子节点</span><br>          vnodeToMove = oldCh[idxInOld]<br>          <span class=\"hljs-comment\">// 如果两个节点相同</span><br>          <span class=\"hljs-keyword\">if</span> (sameVnode(vnodeToMove, newStartVnode)) &#123;<br>            <span class=\"hljs-comment\">// 调用patchVnode更新节点</span><br>            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue)<br>            oldCh[idxInOld] = <span class=\"hljs-literal\">undefined</span><br>            <span class=\"hljs-comment\">// canmove表示是否需要移动节点，如果为true表示需要移动，则移动节点，如果为false则不用移动</span><br>            canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)<br>          &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// same key but different element. treat as new element</span><br>            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"hljs-literal\">false</span>, newCh, newStartIdx)<br>          &#125;<br>        &#125;<br>        newStartVnode = newCh[++newStartIdx]<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (oldStartIdx &gt; oldEndIdx) &#123;<br>      <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">       * 如果oldChildren比newChildren先循环完毕，</span><br><span class=\"hljs-comment\">       * 那么newChildren里面剩余的节点都是需要新增的节点，</span><br><span class=\"hljs-comment\">       * 把[newStartIdx, newEndIdx]之间的所有节点都插入到DOM中</span><br><span class=\"hljs-comment\">       */</span><br>      refElm = isUndef(newCh[newEndIdx + <span class=\"hljs-number\">1</span>]) ? <span class=\"hljs-literal\">null</span> : newCh[newEndIdx + <span class=\"hljs-number\">1</span>].elm<br>      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (newStartIdx &gt; newEndIdx) &#123;<br>      <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">       * 如果newChildren比oldChildren先循环完毕，</span><br><span class=\"hljs-comment\">       * 那么oldChildren里面剩余的节点都是需要删除的节点，</span><br><span class=\"hljs-comment\">       * 把[oldStartIdx, oldEndIdx]之间的所有节点都删除</span><br><span class=\"hljs-comment\">       */</span><br>      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>读源码之前，我们先有这样一个概念：那就是在我们前面所说的优化策略中，节点有可能是从前面对比，也有可能是从后面对比，对比成功就会进行更新处理，也就是说我们有可能处理第一个，也有可能处理最后一个，那么我们在循环的时候就不能简单从前往后或从后往前循环，而是要从两边向中间循环。</p>\n<p>那么该如何从两边向中间循环呢？请看下图：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140631885.png\" alt=\"image-20210425140631885\"></p>\n<p>首先，我们先准备4个变量：</p>\n<ul>\n<li><strong>newStartIdx:</strong><code>newChildren</code>数组里开始位置的下标；</li>\n<li><strong>newEndIdx:</strong><code>newChildren</code>数组里结束位置的下标；</li>\n<li><strong>oldStartIdx:</strong><code>oldChildren</code>数组里开始位置的下标；</li>\n<li><strong>oldEndIdx:</strong><code>oldChildren</code>数组里结束位置的下标；</li>\n</ul>\n<p>在循环的时候，每处理一个节点，就将下标向图中箭头所指的方向移动一个位置，开始位置所表示的节点被处理后，就向后移动一个位置；结束位置所表示的节点被处理后，就向前移动一个位置；由于我们的优化策略都是新旧节点两两更新的，所以一次更新将会移动两个节点。说的再直白一点就是：<code>newStartIdx</code>和<code>oldStartIdx</code>只能往后移动（只会加），<code>newEndIdx</code>和<code>oldEndIdx</code>只能往前移动（只会减）。</p>\n<p>当开始位置大于结束位置时，表示所有节点都已经遍历过了。</p>\n<p>OK，有了这个概念后，我们开始读源码：</p>\n<ol>\n<li>如果<code>oldStartVnode</code>不存在，则直接跳过，将<code>oldStartIdx</code>加1，比对下一个</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 以&quot;新前&quot;、&quot;新后&quot;、&quot;旧前&quot;、&quot;旧后&quot;的方式开始比对节点</span><br><span class=\"hljs-keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;<br>\t<span class=\"hljs-keyword\">if</span> (isUndef(oldStartVnode)) &#123;<br>        oldStartVnode = oldCh[++oldStartIdx]<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果<code>oldEndVnode</code>不存在，则直接跳过，将<code>oldEndIdx</code>减1，比对前一个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isUndef(oldEndVnode)) &#123;<br>    oldEndVnode = oldCh[--oldEndIdx]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果新前与旧前节点相同，就把两个节点进行<code>patch</code>更新，同时<code>oldStartIdx</code>和<code>newStartIdx</code>都加1，后移一个位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;<br>    patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)<br>    oldStartVnode = oldCh[++oldStartIdx]<br>    newStartVnode = newCh[++newStartIdx]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果新后与旧后节点相同，就把两个节点进行<code>patch</code>更新，同时<code>oldEndIdx</code>和<code>newEndIdx</code>都减1，前移一个位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;<br>    patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)<br>    oldEndVnode = oldCh[--oldEndIdx]<br>    newEndVnode = newCh[--newEndIdx]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果新后与旧前节点相同，先把两个节点进行<code>patch</code>更新，然后把旧前节点移动到<code>oldChilren</code>中所有未处理节点之后，最后把<code>oldStartIdx</code>加1，后移一个位置，<code>newEndIdx</code>减1，前移一个位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123;<br>    patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)<br>    canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))<br>    oldStartVnode = oldCh[++oldStartIdx]<br>    newEndVnode = newCh[--newEndIdx]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果新前与旧后节点相同，先把两个节点进行<code>patch</code>更新，然后把旧后节点移动到<code>oldChilren</code>中所有未处理节点之前，最后把<code>newStartIdx</code>加1，后移一个位置，<code>oldEndIdx</code>减1，前移一个位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class=\"hljs-comment\">// Vnode moved left</span><br>    patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)<br>    canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)<br>    oldEndVnode = oldCh[--oldEndIdx]<br>    newStartVnode = newCh[++newStartIdx]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果不属于以上四种情况，就进行常规的循环比对<code>patch</code></p>\n<p>如果在循环中，<code>oldStartIdx</code>大于<code>oldEndIdx</code>了，那就表示<code>oldChildren</code>比<code>newChildren</code>先循环完毕，那么<code>newChildren</code>里面剩余的节点都是需要新增的节点，把<code>[newStartIdx, newEndIdx]</code>之间的所有节点都插入到<code>DOM</code>中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (oldStartIdx &gt; oldEndIdx) &#123;<br>    refElm = isUndef(newCh[newEndIdx + <span class=\"hljs-number\">1</span>]) ? <span class=\"hljs-literal\">null</span> : newCh[newEndIdx + <span class=\"hljs-number\">1</span>].elm<br>    addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果在循环中，<code>newStartIdx</code>大于<code>newEndIdx</code>了，那就表示<code>newChildren</code>比<code>oldChildren</code>先循环完毕，那么<code>oldChildren</code>里面剩余的节点都是需要删除的节点，把<code>[oldStartIdx, oldEndIdx]</code>之间的所有节点都删除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (newStartIdx &gt; newEndIdx) &#123;<br>    removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>OK,处理完毕，可见源码中的处理逻辑跟我们之前分析的逻辑是一样的。</p>\n<h6 id=\"总结：-1\"><a href=\"#总结：-1\" class=\"headerlink\" title=\"总结：\"></a>总结：</h6><p>本篇文章中，我们介绍了<code>Vue</code>中子节点更新的优化策略，发现<code>Vue</code>为了避免双重循环数据量大时间复杂度升高带来的性能问题，而选择了从子节点数组中的4个特殊位置互相比对，分别是：新前与旧前，新后与旧后，新后与旧前，新前与旧后。对于每一种情况我们都通过图文的形式对其逻辑进行了分析。最后我们回到源码，通过阅读源码来验证我们分析的是否正确。幸运的是我们之前每一步的分析都在源码中找到了相应的实现，得以验证我们的分析没有错。以上就是<code>Vue</code>中的<code>patch</code>过程，即<code>DOM-Diff</code>算法所有内容了，到这里相信你再读这部分源码的时候就有比较清晰的思路了。</p>\n<p>撸码一时爽，一直撸码一直爽！！！</p>\n","more":"<p>虚拟DOM，这个名词作为当下的前端开发人员你一定不会陌生，至少会略有耳闻，但不会闻所未闻吧。这也是现在求职面试考察中非常高频的一个考点了。因为在当下的前端三大框架中关于虚拟DOM或多或少都有所涉及，那么接下来，我们就从源码角度出发，看看<code>Vue</code>中的虚拟DOM时怎样的。</p>\n<h4 id=\"虚拟DOM简介\"><a href=\"#虚拟DOM简介\" class=\"headerlink\" title=\"虚拟DOM简介\"></a>虚拟DOM简介</h4><p>由于本系列文章是针对<code>Vue</code>源码深入学习的，所以着重分析在<code>Vue</code>中对虚拟DOM是如何实现的，而对于虚拟DOM本身这个概念不做大篇幅的展开讨论，仅从以下几个问题简单介绍：</p>\n<p>1.什么是虚拟DOM？</p>\n<p>所谓虚拟DOM，就是用一个<code>JS</code>对象来描述一个<code>DOM</code>节点，像如下示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;a&quot;</span> id=<span class=\"hljs-string\">&quot;b&quot;</span>&gt;我是内容&lt;/div&gt;<br><br>&#123;<br>  tag:<span class=\"hljs-string\">&#x27;div&#x27;</span>,        <span class=\"hljs-comment\">// 元素标签</span><br>  attrs:&#123;           <span class=\"hljs-comment\">// 属性</span><br>    class:&#x27;a&#x27;,<br>    id:<span class=\"hljs-string\">&#x27;b&#x27;</span><br>  &#125;,<br>  text:<span class=\"hljs-string\">&#x27;我是内容&#x27;</span>,  <span class=\"hljs-comment\">// 文本内容</span><br>  children:[]       <span class=\"hljs-comment\">// 子元素</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们把组成一个<code>DOM</code>节点的必要东西通过一个<code>JS</code>对象表示出来，那么这个<code>JS</code>对象就可以用来描述这个<code>DOM</code>节点，我们把这个<code>JS</code>对象就称为是这个真实<code>DOM</code>节点的虚拟<code>DOM</code>节点</p>\n<p>2.为什么要有虚拟DOM？</p>\n<p>我们知道，<code>Vue</code>是数据驱动视图的，数据发生变化视图就要随之更新，在更新视图的时候难免要操作<code>DOM</code>,而操作真实<code>DOM</code>又是非常耗费性能的，这是因为浏览器的标准就把 <code>DOM</code> 设计的非常复杂，所以一个真正的 <code>DOM</code> 元素是非常庞大的，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;div&#x27;</span>)<br><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;&#x27;</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> div) &#123;<br>  str += key + <span class=\"hljs-string\">&#x27;&#x27;</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(str)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210422112653087.png\" alt=\"image-20210422112653087\"></p>\n<p>上图中我们打印一个简单的空<code>div</code>标签，就打印出这么多东西，更不用说复杂的、深嵌套的<code>DOM</code>节点了。由此可见，直接操作真实<code>DOM</code>是非常消耗性能的。</p>\n<p>那么有没有什么解决方案呢？当然是有的。我们可以用<code>JS</code>的计算性能来换取操作<code>DOM</code>所消耗的性能。</p>\n<p>既然我们逃不掉操作<code>DOM</code>这道坎,但是我们可以尽可能少的操作<code>DOM</code>。那如何在更新视图的时候尽可能少的操作<code>DOM</code>呢？最直观的思路就是我们不要盲目的去更新视图，而是通过对比数据变化前后的状态，计算出视图中哪些地方需要更新，只更新需要更新的地方，而不需要更新的地方则不需关心，这样我们就可以尽可能少的操作<code>DOM</code>了。这也就是上面所说的用<code>JS</code>的计算性能来换取操作<code>DOM</code>的性能。</p>\n<p>我们可以用<code>JS</code>模拟出一个<code>DOM</code>节点，称之为虚拟<code>DOM</code>节点。当数据发生变化时，我们对比变化前后的虚拟<code>DOM</code>节点，通过<code>DOM-Diff</code>算法计算出需要更新的地方，然后去更新需要更新的视图。</p>\n<p>这就是虚拟<code>DOM</code>产生的原因以及最大的用途。</p>\n<h5 id=\"Vue中的虚拟DOM\"><a href=\"#Vue中的虚拟DOM\" class=\"headerlink\" title=\"Vue中的虚拟DOM\"></a>Vue中的虚拟DOM</h5><p>前文我们介绍了虚拟<code>DOM</code>的概念以及为什么要有虚拟<code>DOM</code>，那么在<code>Vue</code>中虚拟<code>DOM</code>是怎么实现的呢？接下来，我们从源码出发，深入学习一下。</p>\n<h6 id=\"VNode类\"><a href=\"#VNode类\" class=\"headerlink\" title=\"VNode类\"></a>VNode类</h6><p>我们说了，虚拟<code>DOM</code>就是用<code>JS</code>来描述一个真实的<code>DOM</code>节点。而在<code>Vue</code>中就存在了一个<code>VNode</code>类，通过这个类，我们就可以实例化出不同类型的虚拟<code>DOM</code>节点，源码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VNode</span> </span>&#123;<br>  <span class=\"hljs-keyword\">constructor</span> (<br>    tag?: string,<br>    data?: VNodeData,<br>    children?: ?Array&lt;VNode&gt;,<br>    text?: string,<br>    elm?: Node,<br>    context?: Component,<br>    componentOptions?: VNodeComponentOptions,<br>    asyncFactory?: Function<br>  ) &#123;<br>    <span class=\"hljs-built_in\">this</span>.tag = tag                                <span class=\"hljs-comment\">/*当前节点的标签名*/</span><br>    <span class=\"hljs-built_in\">this</span>.data = data        <span class=\"hljs-comment\">/*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/</span><br>    <span class=\"hljs-built_in\">this</span>.children = children  <span class=\"hljs-comment\">/*当前节点的子节点，是一个数组*/</span><br>    <span class=\"hljs-built_in\">this</span>.text = text     <span class=\"hljs-comment\">/*当前节点的文本*/</span><br>    <span class=\"hljs-built_in\">this</span>.elm = elm       <span class=\"hljs-comment\">/*当前虚拟节点对应的真实dom节点*/</span><br>    <span class=\"hljs-built_in\">this</span>.ns = <span class=\"hljs-literal\">undefined</span>            <span class=\"hljs-comment\">/*当前节点的名字空间*/</span><br>    <span class=\"hljs-built_in\">this</span>.context = context          <span class=\"hljs-comment\">/*当前组件节点对应的Vue实例*/</span><br>    <span class=\"hljs-built_in\">this</span>.fnContext = <span class=\"hljs-literal\">undefined</span>       <span class=\"hljs-comment\">/*函数式组件对应的Vue实例*/</span><br>    <span class=\"hljs-built_in\">this</span>.fnOptions = <span class=\"hljs-literal\">undefined</span><br>    <span class=\"hljs-built_in\">this</span>.fnScopeId = <span class=\"hljs-literal\">undefined</span><br>    <span class=\"hljs-built_in\">this</span>.key = data &amp;&amp; data.key           <span class=\"hljs-comment\">/*节点的key属性，被当作节点的标志，用以优化*/</span><br>    <span class=\"hljs-built_in\">this</span>.componentOptions = componentOptions   <span class=\"hljs-comment\">/*组件的option选项*/</span><br>    <span class=\"hljs-built_in\">this</span>.componentInstance = <span class=\"hljs-literal\">undefined</span>       <span class=\"hljs-comment\">/*当前节点对应的组件的实例*/</span><br>    <span class=\"hljs-built_in\">this</span>.parent = <span class=\"hljs-literal\">undefined</span>           <span class=\"hljs-comment\">/*当前节点的父节点*/</span><br>    <span class=\"hljs-built_in\">this</span>.raw = <span class=\"hljs-literal\">false</span>         <span class=\"hljs-comment\">/*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/</span><br>    <span class=\"hljs-built_in\">this</span>.isStatic = <span class=\"hljs-literal\">false</span>         <span class=\"hljs-comment\">/*静态节点标志*/</span><br>    <span class=\"hljs-built_in\">this</span>.isRootInsert = <span class=\"hljs-literal\">true</span>      <span class=\"hljs-comment\">/*是否作为跟节点插入*/</span><br>    <span class=\"hljs-built_in\">this</span>.isComment = <span class=\"hljs-literal\">false</span>             <span class=\"hljs-comment\">/*是否为注释节点*/</span><br>    <span class=\"hljs-built_in\">this</span>.isCloned = <span class=\"hljs-literal\">false</span>           <span class=\"hljs-comment\">/*是否为克隆节点*/</span><br>    <span class=\"hljs-built_in\">this</span>.isOnce = <span class=\"hljs-literal\">false</span>                <span class=\"hljs-comment\">/*是否有v-once指令*/</span><br>    <span class=\"hljs-built_in\">this</span>.asyncFactory = asyncFactory<br>    <span class=\"hljs-built_in\">this</span>.asyncMeta = <span class=\"hljs-literal\">undefined</span><br>    <span class=\"hljs-built_in\">this</span>.isAsyncPlaceholder = <span class=\"hljs-literal\">false</span><br>  &#125;<br><br>  get child (): Component | <span class=\"hljs-keyword\">void</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.componentInstance<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从上面的代码中可以看出：<code>VNode</code>类中包含了描述一个真实<code>DOM</code>节点所需要的一系列属性，如<code>tag</code>表示节点的标签名，<code>text</code>表示节点中包含的文本，<code>children</code>表示该节点包含的子节点等。通过属性之间不同的搭配，就可以描述出各种类型的真实<code>DOM</code>节点。</p>\n<h5 id=\"VNode的类型\"><a href=\"#VNode的类型\" class=\"headerlink\" title=\"VNode的类型\"></a>VNode的类型</h5><p>上一小节最后我们说了，通过属性之间不同的搭配，<code>VNode</code>类可以描述出各种类型的真实<code>DOM</code>节点。那么它都可以描述出哪些类型的节点呢？通过阅读源码，可以发现通过不同属性的搭配，可以描述出以下几种类型的节点。</p>\n<ul>\n<li>注释节点</li>\n<li>文本节点</li>\n<li>元素节点</li>\n<li>组件节点</li>\n<li>函数式组件节点</li>\n<li>克隆节点</li>\n</ul>\n<p>1.注释节点</p>\n<p>描述起来相对就非常简单了，它只需两个属性就够了，源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 创建注释节点</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> createEmptyVNode = <span class=\"hljs-function\">(<span class=\"hljs-params\">text: string = <span class=\"hljs-string\">&#x27;&#x27;</span></span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> VNode()<br>  node.text = text<br>  node.isComment = <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-keyword\">return</span> node<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从上面代码中可以看到，描述一个注释节点只需两个属性，分别是：<code>text</code>和<code>isComment</code>。其中<code>text</code>属性表示具体的注释信息，<code>isComment</code>是一个标志，用来标识一个节点是否是注释节点。</p>\n<p>2.文本节点</p>\n<p>文本节点描述起来比注释节点更简单，因为它只需要一个属性，那就是<code>text</code>属性，用来表示具体的文本信息。源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 创建文本节点</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createTextVNode</span> (<span class=\"hljs-params\">val: string | number</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> VNode(<span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-built_in\">String</span>(val))<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3.克隆节点</p>\n<p>克隆节点就是把一个已经存在的节点复制一份出来，它主要是为了做模板编译优化时使用，这个后面我们会说到。关于克隆节点的描述，源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 创建克隆节点</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cloneVNode</span> (<span class=\"hljs-params\">vnode: VNode</span>): <span class=\"hljs-title\">VNode</span> </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> cloned = <span class=\"hljs-keyword\">new</span> VNode(<br>    vnode.tag,<br>    vnode.data,<br>    vnode.children,<br>    vnode.text,<br>    vnode.elm,<br>    vnode.context,<br>    vnode.componentOptions,<br>    vnode.asyncFactory<br>  )<br>  cloned.ns = vnode.ns<br>  cloned.isStatic = vnode.isStatic<br>  cloned.key = vnode.key<br>  cloned.isComment = vnode.isComment<br>  cloned.fnContext = vnode.fnContext<br>  cloned.fnOptions = vnode.fnOptions<br>  cloned.fnScopeId = vnode.fnScopeId<br>  cloned.asyncMeta = vnode.asyncMeta<br>  cloned.isCloned = <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-keyword\">return</span> cloned<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从上面代码中可以看到，克隆节点就是把已有节点的属性全部复制到新节点中，而现有节点和新克隆得到的节点之间唯一的不同就是克隆得到的节点<code>isCloned</code>为<code>true</code></p>\n<p>4.元素节点</p>\n<p>相比之下，元素节点更贴近于我们通常看到的真实<code>DOM</code>节点，它有描述节点标签名词的<code>tag</code>属性，描述节点属性如<code>class</code>、<code>attributes</code>等的<code>data</code>属性，有描述包含的子节点信息的<code>children</code>属性等。由于元素节点所包含的情况相比而言比较复杂，源码中没有像前三种节点一样直接写死（当然也不可能写死），那就举个简单例子说明一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 真实DOM节点</span><br>&lt;div id=<span class=\"hljs-string\">&#x27;a&#x27;</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>难凉热血<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>&lt;/div&gt;<br><br><span class=\"hljs-comment\">// VNode节点</span><br>&#123;<br>  tag:<span class=\"hljs-string\">&#x27;div&#x27;</span>,<br>  data:&#123;&#125;,<br>  children:[<br>    &#123;<br>      tag:<span class=\"hljs-string\">&#x27;span&#x27;</span>,<br>      text:<span class=\"hljs-string\">&#x27;难凉热血&#x27;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们可以看到，真实<code>DOM</code>节点中:<code>div</code>标签里面包含了一个<code>span</code>标签，而<code>span</code>标签里面有一段文本。反应到<code>VNode</code>节点上就如上所示:<code>tag</code>表示标签名，<code>data</code>表示标签的属性<code>id</code>等，<code>children</code>表示子节点数组。</p>\n<p>5.组件节点</p>\n<p>组件节点除了有元素节点具有的属性之外，它还有两个特有的属性：</p>\n<ul>\n<li>componentOptions :组件的option选项，如组件的<code>props</code>等</li>\n<li>componentInstance :当前组件节点对应的<code>Vue</code>实例</li>\n</ul>\n<p>6.函数式组件节点</p>\n<p>函数式组件节点相较于组件节点，它又有两个特有的属性：</p>\n<ul>\n<li>fnContext:函数式组件对应的Vue实例</li>\n<li>fnOptions: 组件的option选项</li>\n</ul>\n<p>以上就是<code>VNode</code>可以描述的多种节点类型，它们本质上都是<code>VNode</code>类的实例，只是在实例化的时候传入的属性参数不同而已。</p>\n<h6 id=\"VNode的作用\"><a href=\"#VNode的作用\" class=\"headerlink\" title=\"VNode的作用:\"></a>VNode的作用:</h6><p>说了这么多，那么<code>VNode</code>在<code>Vue</code>的整个虚拟<code>DOM</code>过程起了什么作用呢？</p>\n<p>其实<code>VNode</code>的作用是相当大的。我们在视图渲染之前，把写好的<code>template</code>模板先编译成<code>VNode</code>并缓存下来，等到数据发生变化页面需要重新渲染的时候，我们把数据发生变化后生成的<code>VNode</code>与前一次缓存下来的<code>VNode</code>进行对比，找出差异，然后有差异的<code>VNode</code>对应的真实<code>DOM</code>节点就是需要重新渲染的节点，最后根据有差异的<code>VNode</code>创建出真实的<code>DOM</code>节点再插入到视图中，最终完成一次视图更新。</p>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><p>本章首先介绍了虚拟<code>DOM</code>的一些基本概念和为什么要有虚拟<code>DOM</code>，其实说白了就是以<code>JS</code>的计算性能来换取操作真实<code>DOM</code>所消耗的性能。接着从源码角度我们知道了在<code>Vue</code>中是通过<code>VNode</code>类来实例化出不同类型的虚拟<code>DOM</code>节点，并且学习了不同类型节点生成的属性的不同，所谓不同类型的节点其本质还是一样的，都是<code>VNode</code>类的实例，只是在实例化时传入的属性参数不同罢了。最后探究了<code>VNode</code>的作用，有了数据变化前后的<code>VNode</code>，我们才能进行后续的<code>DOM-Diff</code>找出差异，最终做到只更新有差异的视图，从而达到尽可能少的操作真实<code>DOM</code>的目的，以节省性能。</p>\n<h5 id=\"vue虚拟dom的diff\"><a href=\"#vue虚拟dom的diff\" class=\"headerlink\" title=\"vue虚拟dom的diff\"></a>vue虚拟dom的diff</h5><p>在上一篇文章介绍<code>VNode</code>的时候我们说了，<code>VNode</code>最大的用途就是在数据变化前后生成真实<code>DOM</code>对应的虚拟<code>DOM</code>节点，然后就可以对比新旧两份<code>VNode</code>，找出差异所在，然后更新有差异的<code>DOM</code>节点，最终达到以最少操作真实<code>DOM</code>更新视图的目的。而对比新旧两份<code>VNode</code>并找出差异的过程就是所谓的<code>DOM-Diff</code>过程。<code>DOM-Diff</code>算法是整个虚拟<code>DOM</code>的核心所在，那么接下来，我们就以源码出发，深入研究一下<code>Vue</code>中的<code>DOM-Diff</code>过程是怎样的。</p>\n<p>在<code>Vue</code>中，把 <code>DOM-Diff</code>过程叫做<code>patch</code>过程。patch,意为“补丁”，即指对旧的<code>VNode</code>修补，打补丁从而得到新的<code>VNode</code>，非常形象哈。那不管叫什么，其本质都是把对比新旧两份<code>VNode</code>的过程。我们在下面研究<code>patch</code>过程的时候，一定把握住这样一个思想：所谓旧的<code>VNode</code>(即<code>oldVNode</code>)就是数据变化之前视图所对应的虚拟<code>DOM</code>节点，而新的<code>VNode</code>是数据变化之后将要渲染的新的视图所对应的虚拟<code>DOM</code>节点，所以我们要以生成的新的<code>VNode</code>为基准，对比旧的<code>oldVNode</code>，如果新的<code>VNode</code>上有的节点而旧的<code>oldVNode</code>上没有，那么就在旧的<code>oldVNode</code>上加上去；如果新的<code>VNode</code>上没有的节点而旧的<code>oldVNode</code>上有，那么就在旧的<code>oldVNode</code>上去掉；如果某些节点在新的<code>VNode</code>和旧的<code>oldVNode</code>上都有，那么就以新的<code>VNode</code>为准，更新旧的<code>oldVNode</code>，从而让新旧<code>VNode</code>相同。</p>\n<p>总之一句话：<strong>以新的VNode为基准，改造旧的oldVNode使之成为跟新的VNode一样，这就是patch过程要干的事</strong>。</p>\n<p>说了这么多，听起来感觉好像很复杂的样子，其实不然，我们仔细想想，整个<code>patch</code>无非就是干三件事：</p>\n<ul>\n<li>创建节点：新的<code>VNode</code>中有而旧的<code>oldVNode</code>中没有，就在旧的<code>oldVNode</code>中创建。</li>\n<li>删除节点：新的<code>VNode</code>中没有而旧的<code>oldVNode</code>中有，就从旧的<code>oldVNode</code>中删除。</li>\n<li>更新节点：新的<code>VNode</code>和旧的<code>oldVNode</code>中都有，就以新的<code>VNode</code>为准，更新旧的<code>oldVNode</code>。</li>\n</ul>\n<p>OK，到这里，你就对<code>Vue</code>中的<code>patch</code>过程理解了一半了，接下来，我们就逐个分析，看<code>Vue</code>对于以上三件事都是怎么做的。</p>\n<h6 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h6><p>上篇文章中我们分析了，<code>VNode</code>类可以描述6种类型的节点，而实际上只有3种类型的节点能够被创建并插入到<code>DOM</code>中，它们分别是：元素节点、文本节点、注释节点。所以<code>Vue</code>在创建节点的时候会判断在新的<code>VNode</code>中有而旧的<code>oldVNode</code>中没有的这个节点是属于哪种类型的节点，从而调用不同的方法创建并插入到<code>DOM</code>中。</p>\n<p>其实判断起来也不难，因为这三种类型的节点其特点非常明显，在源码中是怎么判断的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 源码位置: /src/core/vdom/patch.js</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createElm</span> (<span class=\"hljs-params\">vnode, parentElm, refElm</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">const</span> data = vnode.data<br>    <span class=\"hljs-keyword\">const</span> children = vnode.children<br>    <span class=\"hljs-keyword\">const</span> tag = vnode.tag<br>    <span class=\"hljs-keyword\">if</span> (isDef(tag)) &#123;<br>      \tvnode.elm = nodeOps.createElement(tag, vnode)   <span class=\"hljs-comment\">// 创建元素节点</span><br>        createChildren(vnode, children, insertedVnodeQueue) <span class=\"hljs-comment\">// 创建元素节点的子节点</span><br>        insert(parentElm, vnode.elm, refElm)       <span class=\"hljs-comment\">// 插入到DOM中</span><br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isTrue(vnode.isComment)) &#123;<br>      vnode.elm = nodeOps.createComment(vnode.text)  <span class=\"hljs-comment\">// 创建注释节点</span><br>      insert(parentElm, vnode.elm, refElm)           <span class=\"hljs-comment\">// 插入到DOM中</span><br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      vnode.elm = nodeOps.createTextNode(vnode.text)  <span class=\"hljs-comment\">// 创建文本节点</span><br>      insert(parentElm, vnode.elm, refElm)           <span class=\"hljs-comment\">// 插入到DOM中</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>从上面代码中，我们可以看出：</p>\n<ul>\n<li>判断是否为元素节点只需判断该<code>VNode</code>节点是否有<code>tag</code>标签即可。如果有<code>tag</code>属性即认为是元素节点，则调用<code>createElement</code>方法创建元素节点，通常元素节点还会有子节点，那就递归遍历创建所有子节点，将所有子节点创建好之后<code>insert</code>插入到当前元素节点里面，最后把当前元素节点插入到<code>DOM</code>中。</li>\n<li>判断是否为注释节点，只需判断<code>VNode</code>的<code>isComment</code>属性是否为<code>true</code>即可，若为<code>true</code>则为注释节点，则调用<code>createComment</code>方法创建注释节点，再插入到<code>DOM</code>中。</li>\n<li>如果既不是元素节点，也不是注释节点，那就认为是文本节点，则调用<code>createTextNode</code>方法创建文本节点，再插入到<code>DOM</code>中。</li>\n</ul>\n<blockquote>\n<p>代码中的<code>nodeOps</code>是<code>Vue</code>为了跨平台兼容性，对所有节点操作进行了封装，例如<code>nodeOps.createTextNode()</code>在浏览器端等同于<code>document.createTextNode()</code></p>\n</blockquote>\n<p>以上就完成了创建节点的操作，其完整流程图如下：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425121000760.png\" alt=\"image-20210425121000760\"></p>\n<h6 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h6><p>如果某些节点再新的<code>VNode</code>中没有而在旧的<code>oldVNode</code>中有，那么就需要把这些节点从旧的<code>oldVNode</code>中删除。删除节点非常简单，只需在要删除节点的父元素上调用<code>removeChild</code>方法即可。源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">removeNode</span> (<span class=\"hljs-params\">el</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">const</span> parent = nodeOps.parentNode(el)  <span class=\"hljs-comment\">// 获取父节点</span><br>    <span class=\"hljs-keyword\">if</span> (isDef(parent)) &#123;<br>      nodeOps.removeChild(parent, el)  <span class=\"hljs-comment\">// 调用父节点的removeChild方法</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"更新节点\"><a href=\"#更新节点\" class=\"headerlink\" title=\"更新节点\"></a>更新节点</h6><p>创建节点和删除节点都比较简单，而更新节点就相对较为复杂一点了，其实也不算多复杂，只要理清逻辑就能理解了。</p>\n<p>更新节点就是当某些节点在新的<code>VNode</code>和旧的<code>oldVNode</code>中都有时，我们就需要细致比较一下，找出不一样的地方进行更新。</p>\n<p>介绍更新节点之前，我们先介绍一个小的概念，就是什么是静态节点？我们看个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>我是不会变化的文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>面这个节点里面只包含了纯文字，没有任何可变的变量，这也就是说，不管数据再怎么变化，只要这个节点第一次渲染了，那么它以后就永远不会发生变化，这是因为它不包含任何变量，所以数据发生任何变化都与它无关。我们把这种节点称之为静态节点。</p>\n<p>OK，有了这个概念以后，我们开始更新节点。更新节点的时候我们需要对以下3种情况进行判断并分别处理：</p>\n<ol>\n<li><p>如果<code>VNode</code>和<code>oldVNode</code>均为静态节点</p>\n<p>我们说了，静态节点无论数据发生任何变化都与它无关，所以都为静态节点的话则直接跳过，无需处理。</p>\n</li>\n<li><p>如果<code>VNode</code>是文本节点</p>\n<p>如果<code>VNode</code>是文本节点即表示这个节点内只包含纯文本，那么只需看<code>oldVNode</code>是否也是文本节点，如果是，那就比较两个文本是否不同，如果不同则把<code>oldVNode</code>里的文本改成跟<code>VNode</code>的文本一样。如果<code>oldVNode</code>不是文本节点，那么不论它是什么，直接调用<code>setTextNode</code>方法把它改成文本节点，并且文本内容跟<code>VNode</code>相同。</p>\n</li>\n<li><p>如果<code>VNode</code>是元素节点</p>\n<p>如果<code>VNode</code>是元素节点，则又细分以下两种情况：</p>\n<ul>\n<li><p>该节点包含子节点</p>\n<p>如果新的节点内包含了子节点，那么此时要看旧的节点是否包含子节点，如果旧的节点里也包含了子节点，那就需要递归对比更新子节点；如果旧的节点里不包含子节点，那么这个旧节点有可能是空节点或者是文本节点，如果旧的节点是空节点就把新的节点里的子节点创建一份然后插入到旧的节点里面，如果旧的节点是文本节点，则把文本清空，然后把新的节点里的子节点创建一份然后插入到旧的节点里面。</p>\n</li>\n<li><p>该节点不包含子节点</p>\n<p>如果该节点不包含子节点，同时它又不是文本节点，那就说明该节点是个空节点，那就好办了，不管旧节点之前里面都有啥，直接清空即可。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>OK，处理完以上3种情况，更新节点就算基本完成了，接下来我们看下源码中具体是怎么实现的，源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 更新节点</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">patchVnode</span> (<span class=\"hljs-params\">oldVnode, vnode, insertedVnodeQueue, removeOnly</span>) </span>&#123;<br>  <span class=\"hljs-comment\">// vnode与oldVnode是否完全一样？若是，退出程序</span><br>  <span class=\"hljs-keyword\">if</span> (oldVnode === vnode) &#123;<br>    <span class=\"hljs-keyword\">return</span><br>  &#125;<br>  <span class=\"hljs-keyword\">const</span> elm = vnode.elm = oldVnode.elm<br><br>  <span class=\"hljs-comment\">// vnode与oldVnode是否都是静态节点？若是，退出程序</span><br>  <span class=\"hljs-keyword\">if</span> (isTrue(vnode.isStatic) &amp;&amp;<br>    isTrue(oldVnode.isStatic) &amp;&amp;<br>    vnode.key === oldVnode.key &amp;&amp;<br>    (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))<br>  ) &#123;<br>    <span class=\"hljs-keyword\">return</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">const</span> oldCh = oldVnode.children<br>  <span class=\"hljs-keyword\">const</span> ch = vnode.children<br>  <span class=\"hljs-comment\">// vnode有text属性？若没有：</span><br>  <span class=\"hljs-keyword\">if</span> (isUndef(vnode.text)) &#123;<br>    <span class=\"hljs-comment\">// vnode的子节点与oldVnode的子节点是否都存在？</span><br>    <span class=\"hljs-keyword\">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;<br>      <span class=\"hljs-comment\">// 若都存在，判断子节点是否相同，不同则更新子节点</span><br>      <span class=\"hljs-keyword\">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)<br>    &#125;<br>    <span class=\"hljs-comment\">// 若只有vnode的子节点存在</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isDef(ch)) &#123;<br>      <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">       * 判断oldVnode是否有文本？</span><br><span class=\"hljs-comment\">       * 若没有，则把vnode的子节点添加到真实DOM中</span><br><span class=\"hljs-comment\">       * 若有，则清空Dom中的文本，再把vnode的子节点添加到真实DOM中</span><br><span class=\"hljs-comment\">       */</span><br>      <span class=\"hljs-keyword\">if</span> (isDef(oldVnode.text)) nodeOps.setTextContent(elm, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>      addVnodes(elm, <span class=\"hljs-literal\">null</span>, ch, <span class=\"hljs-number\">0</span>, ch.length - <span class=\"hljs-number\">1</span>, insertedVnodeQueue)<br>    &#125;<br>    <span class=\"hljs-comment\">// 若只有oldnode的子节点存在</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isDef(oldCh)) &#123;<br>      <span class=\"hljs-comment\">// 清空DOM中的子节点</span><br>      removeVnodes(elm, oldCh, <span class=\"hljs-number\">0</span>, oldCh.length - <span class=\"hljs-number\">1</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">// 若vnode和oldnode都没有子节点，但是oldnode中有文本</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isDef(oldVnode.text)) &#123;<br>      <span class=\"hljs-comment\">// 清空oldnode文本</span><br>      nodeOps.setTextContent(elm, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">// 上面两个判断一句话概括就是，如果vnode中既没有text，也没有子节点，那么对应的oldnode中有什么就清空什么</span><br>  &#125;<br>  <span class=\"hljs-comment\">// 若有，vnode的text属性与oldVnode的text属性是否相同？</span><br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (oldVnode.text !== vnode.text) &#123;<br>    <span class=\"hljs-comment\">// 若不相同：则用vnode的text替换真实DOM的文本</span><br>    nodeOps.setTextContent(elm, vnode.text)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上面代码里注释已经写得很清晰了，接下来我们画流程图来梳理一下整个过程，流程图如下：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425121148769.png\" alt=\"image-20210425121148769\"></p>\n<p>通过对照着流程图以及代码，相信更新节点这部分逻辑你很容易就能理解了。s</p>\n<p>另外，你可能注意到了，如果新旧<code>VNode</code>里都包含了子节点，那么对于子节点的更新在代码里调用了<code>updateChildren</code>方法，而这个方法的逻辑到底是怎样的我们放在下一篇文章中展开学习。</p>\n<h6 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h6><p>在本篇文章中我们介绍了<code>Vue</code>中的<code>DOM-Diff</code>算法：patch过程。我们先介绍了算法的整个思想流程，然后通过梳理算法思想，了解了整个<code>patch</code>过程干了三件事，分别是：创建节点，删除节点，更新节点。并且对每件事情都对照源码展开了细致的学习，画出了其逻辑流程图。另外对于更新节点中，如果新旧<code>VNode</code>里都包含了子节点，我们就需要细致的去更新子节点，关于更新子节点的过程我们在下一篇文章中展开学习。</p>\n<p>在上一篇文章中，我们了解了<code>Vue</code>中的<code>patch</code>过程，即<code>DOM-Diff</code>算法。并且知道了在<code>patch</code>过程中基本会干三件事，分别是：创建节点，删除节点和更新节点。创建节点和删除节点都比较简单，而更新节点因为要处理各种可能出现的情况所以逻辑略微复杂一些，但是没关系，我们通过分析过程，对照源码，画逻辑流程图来帮助我们理解了其中的过程。最后我们还遗留了一个问题，那就是在更新节点过程中，新旧<code>VNode</code>可能都包含有子节点，对于子节点的对比更新会有额外的一些逻辑，那么在本篇文章中我们就来学习在<code>Vue</code>中是怎么对比更新子节点的。</p>\n<h6 id=\"更新子节点：\"><a href=\"#更新子节点：\" class=\"headerlink\" title=\"更新子节点：\"></a>更新子节点：</h6><p>当新的<code>VNode</code>与旧的<code>oldVNode</code>都是元素节点并且都包含子节点时，那么这两个节点的<code>VNode</code>实例上的<code>children</code>属性就是所包含的子节点数组。我们把新的<code>VNode</code>上的子节点数组记为<code>newChildren</code>，把旧的<code>oldVNode</code>上的子节点数组记为<code>oldChildren</code>，我们把<code>newChildren</code>里面的元素与<code>oldChildren</code>里的元素一一进行对比，对比两个子节点数组肯定是要通过循环，外层循环<code>newChildren</code>数组，内层循环<code>oldChildren</code>数组，每循环外层<code>newChildren</code>数组里的一个子节点，就去内层<code>oldChildren</code>数组里找看有没有与之相同的子节点，伪代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; newChildren.length; i++) &#123;<br>  <span class=\"hljs-keyword\">const</span> newChild = newChildren[i];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; oldChildren.length; j++) &#123;<br>    <span class=\"hljs-keyword\">const</span> oldChild = oldChildren[j];<br>    <span class=\"hljs-keyword\">if</span> (newChild === oldChild) &#123;<br>      <span class=\"hljs-comment\">// ...</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>那么以上这个过程将会存在以下四种情况：</p>\n<ul>\n<li><p>创建子节点</p>\n<p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找不到与之相同的子节点，那么说明<code>newChildren</code>里面的这个子节点是之前没有的，是需要此次新增的节点，那么就创建子节点。</p>\n</li>\n<li><p>删除子节点</p>\n<p>如果把<code>newChildren</code>里面的每一个子节点都循环完毕后，发现在<code>oldChildren</code>还有未处理的子节点，那就说明这些未处理的子节点是需要被废弃的，那么就将这些节点删除。</p>\n</li>\n<li><p>移动子节点</p>\n<p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找到了与之相同的子节点，但是所处的位置不同，这说明此次变化需要调整该子节点的位置，那就以<code>newChildren</code>里子节点的位置为基准，调整<code>oldChildren</code>里该节点的位置，使之与在<code>newChildren</code>里的位置相同。</p>\n</li>\n<li><p>更新节点</p>\n<p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找到了与之相同的子节点，并且所处的位置也相同，那么就更新<code>oldChildren</code>里该节点，使之与<code>newChildren</code>里的该节点相同。</p>\n</li>\n</ul>\n<p>OK，到这里，逻辑就相对清晰了，接下来我们只需分门别类的处理这四种情况就好了。</p>\n<h6 id=\"创建子节点\"><a href=\"#创建子节点\" class=\"headerlink\" title=\"创建子节点\"></a>创建子节点</h6><p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找不到与之相同的子节点，那么说明<code>newChildren</code>里面的这个子节点是之前没有的，是需要此次新增的节点，那么我们就创建这个节点，创建好之后再把它插入到<code>DOM</code>中合适的位置。</p>\n<p>创建节点这个很容易，我们在上一篇文章的第三章已经介绍过了，这里就不再赘述了。</p>\n<p>那么创建好之后如何插入到<code>DOM</code>中的合适的位置呢？显然，把节点插入到<code>DOM</code>中是很容易的，找到合适的位置是关键。接下来我们分析一下如何找这个合适的位置。我们看下面这个图：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425133824295.png\" alt=\"image-20210425133824295\"></p>\n<p>上图中左边是新的<code>VNode</code>，右边是旧的<code>oldVNode</code>，同时也是真实的<code>DOM</code>。这个图意思是当我们循环<code>newChildren</code>数组里面的子节点，前两个子节点都在<code>oldChildren</code>里找到了与之对应的子节点，那么我们将其处理，处理过后把它们标志为已处理，当循环到<code>newChildren</code>数组里第三个子节点时，发现在<code>oldChildren</code>里找不到与之对应的子节点，那么我们就需要创建这个节点，创建好之后我们发现这个节点本是<code>newChildren</code>数组里左起第三个子节点，那么我们就把创建好的节点插入到真实<code>DOM</code>里的第三个节点位置，也就是所有已处理节点之后，OK，此时我们拍手称快，所有已处理节点之后就是我们要找的合适的位置，但是真的是这样吗？我们再来看下面这个图：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425134249593.png\" alt=\"image-20210425134249593\"></p>\n<p>假如我们按照上面的方法把第三个节点插入到所有已处理节点之后，此时如果第四个节点也在<code>oldChildren</code>里找不到与之对应的节点，也是需要创建的节点，那么当我们把第四个节点也按照上面的说的插入到已处理节点之后，发现怎么插入到第三个位置了，可明明这个节点在<code>newChildren</code>数组里是第四个啊！</p>\n<p>这就是问题所在，其实，我们应该把新创建的节点插入到所有未处理节点之前，这样以来逻辑才正确。后面不管有多少个新增的节点，每一个都插入到所有未处理节点之前，位置才不会错。</p>\n<p>所以，<strong>合适的位置是所有未处理节点之前，而并非所有已处理节点之后</strong>。</p>\n<h6 id=\"删除子节点\"><a href=\"#删除子节点\" class=\"headerlink\" title=\"删除子节点\"></a>删除子节点</h6><p>如果把<code>newChildren</code>里面的每一个子节点都循环一遍，能在<code>oldChildren</code>数组里找到的就处理它，找不到的就新增，直到把<code>newChildren</code>里面所有子节点都过一遍后，发现在<code>oldChildren</code>还存在未处理的子节点，那就说明这些未处理的子节点是需要被废弃的，那么就将这些节点删除。</p>\n<p>删除节点这个也很容易，我们在上一篇文章的第四章已经介绍过了，这里就不再赘述了。</p>\n<h6 id=\"更新子节点\"><a href=\"#更新子节点\" class=\"headerlink\" title=\"更新子节点\"></a>更新子节点</h6><p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找到了与之相同的子节点，并且所处的位置也相同，那么就更新<code>oldChildren</code>里该节点，使之与<code>newChildren</code>里的该节点相同。</p>\n<p>关于更新节点，我们在上一篇文章的第五章已经介绍过了，这里就不再赘述了。</p>\n<h6 id=\"移动子节点\"><a href=\"#移动子节点\" class=\"headerlink\" title=\"移动子节点\"></a>移动子节点</h6><p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找到了与之相同的子节点，但是所处的位置不同，这说明此次变化需要调整该子节点的位置，那就以<code>newChildren</code>里子节点的位置为基准，调整<code>oldChildren</code>里该节点的位置，使之与在<code>newChildren</code>里的位置相同。</p>\n<p>同样，移动一个节点不难，关键在于该移动到哪，或者说关键在于移动到哪个位置，这个位置才是关键。我们看下图：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425134557748.png\" alt=\"image-20210425134557748\"></p>\n<p>在上图中，绿色的两个节点是相同节点但是所处位置不同，即<code>newChildren</code>里面的第三个子节点与真实<code>DOM</code>即<code>oldChildren</code>里面的第四个子节点相同但是所处位置不同，按照上面所说的，我们应该以<code>newChildren</code>里子节点的位置为基准，调整<code>oldChildren</code>里该节点的位置，所以我们应该把真实<code>DOM</code>即<code>oldChildren</code>里面的第四个节点移动到第三个节点的位置，通过上图中的标注我们不难发现，<strong>所有未处理节点之前就是我们要移动的目的位置</strong>。如果此时你说那可不可以移动到所有已处理节点之后呢？那就又回到了更新节点时所遇到的那个问题了：如果前面有新增的节点呢？</p>\n<h6 id=\"回到源码\"><a href=\"#回到源码\" class=\"headerlink\" title=\"回到源码\"></a>回到源码</h6><p>OK，以上就是更新子节点时所要考虑的所有情况了，分析完以后，我们回到源码里看看实际情况是不是我们分析的这样子的，源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 源码位置： /src/core/vdom/patch.js</span><br><br><span class=\"hljs-keyword\">if</span> (isUndef(idxInOld)) &#123;    <span class=\"hljs-comment\">// 如果在oldChildren里找不到当前循环的newChildren里的子节点</span><br>    <span class=\"hljs-comment\">// 新增节点并插入到合适位置</span><br>    createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"hljs-literal\">false</span>, newCh, newStartIdx)<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 如果在oldChildren里找到了当前循环的newChildren里的子节点</span><br>    vnodeToMove = oldCh[idxInOld]<br>    <span class=\"hljs-comment\">// 如果两个节点相同</span><br>    <span class=\"hljs-keyword\">if</span> (sameVnode(vnodeToMove, newStartVnode)) &#123;<br>        <span class=\"hljs-comment\">// 调用patchVnode更新节点</span><br>        patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue)<br>        oldCh[idxInOld] = <span class=\"hljs-literal\">undefined</span><br>        <span class=\"hljs-comment\">// canmove表示是否需要移动节点，如果为true表示需要移动，则移动节点，如果为false则不用移动</span><br>        canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>以上代码中，首先判断在<code>oldChildren</code>里能否找到当前循环的<code>newChildren</code>里的子节点，如果找不到，那就是新增节点并插入到合适位置；如果找到了，先对比两个节点是否相同，若相同则先调用<code>patchVnode</code>更新节点，更新完之后再看是否需要移动节点，注意，源码里在判断是否需要移动子节点时用了简写的方式，下面这两种写法是等价的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)<br><span class=\"hljs-comment\">// 等同于</span><br><span class=\"hljs-keyword\">if</span>(canMove)&#123;<br>    nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们看到，源码里的实现跟我们分析的是一样一样的。</p>\n<h6 id=\"总结：：\"><a href=\"#总结：：\" class=\"headerlink\" title=\"总结：：\"></a>总结：：</h6><p>本篇文章我们分析了<code>Vue</code>在更新子节点时是外层循环<code>newChildren</code>数组，内层循环<code>oldChildren</code>数组，把<code>newChildren</code>数组里的每一个元素分别与<code>oldChildren</code>数组里的每一个元素匹配，根据不同情况作出创建子节点、删除子节点、更新子节点以及移动子节点的操作。并且我们对不同情况的不同操作都进行了深入分析，分析之后我们回到源码验证我们分析的正确性，发现我们的分析跟源码的实现是一致的。</p>\n<p>最后，我们再思考一个问题：这样双层循环虽然能解决问题，但是如果节点数量很多，这样循环算法的时间复杂度会不会很高？有没有什么可以优化的办法？答案当然是有的，并且<code>Vue</code>也意识到了这点，也进行了优化，那么下篇文章我们就来分析当节点数量很多时<code>Vue</code>是怎么优化算法的。</p>\n<h6 id=\"优化更新子节点\"><a href=\"#优化更新子节点\" class=\"headerlink\" title=\"优化更新子节点\"></a>优化更新子节点</h6><p>在上一篇文章中，我们介绍了当新的<code>VNode</code>与旧的<code>oldVNode</code>都是元素节点并且都包含子节点时，<code>Vue</code>对子节点是</p>\n<p>先外层循环<code>newChildren</code>数组，再内层循环<code>oldChildren</code>数组，每循环外层<code>newChildren</code>数组里的一个子节点，就去内层<code>oldChildren</code>数组里找看有没有与之相同的子节点，最后根据不同的情况作出不同的操作。</p>\n<p>在上一篇文章的结尾我们也说了，这种方法虽然能够解决问题，但是还存在可优化的地方。比如当包含的子节点数量很多时，这样循环算法的时间复杂度就会变的很大，不利于性能提升。当然，<code>Vue</code>也意识到了这点，并对此也进行了优化，那么本篇文章，就来学习一下关于子节点更新的优化问题<code>Vue</code>是如何做的。</p>\n<h6 id=\"优化策略介绍：\"><a href=\"#优化策略介绍：\" class=\"headerlink\" title=\"优化策略介绍：\"></a>优化策略介绍：</h6><p>假如我们现有一份新的<code>newChildren</code>数组和旧的<code>oldChildren</code>数组，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">newChildren = [<span class=\"hljs-string\">&#x27;新子节点1&#x27;</span>,<span class=\"hljs-string\">&#x27;新子节点2&#x27;</span>,<span class=\"hljs-string\">&#x27;新子节点3&#x27;</span>,<span class=\"hljs-string\">&#x27;新子节点4&#x27;</span>]<br>oldChildren = [<span class=\"hljs-string\">&#x27;旧子节点1&#x27;</span>,<span class=\"hljs-string\">&#x27;旧子节点2&#x27;</span>,<span class=\"hljs-string\">&#x27;旧子节点3&#x27;</span>,<span class=\"hljs-string\">&#x27;旧子节点4&#x27;</span>]<br></code></pre></td></tr></table></figure>\n\n<p>如果按照优化之前的解决方案，那么我们接下来的操作应该是这样的：先循环<code>newChildren</code>数组，拿到第一个新子节点1，然后用第一个新子节点1去跟<code>oldChildren</code>数组里的旧子节点逐一对比，如果运气好一点，刚好<code>oldChildren</code>数组里的第一个旧子节点1与第一个新子节点1相同，那就皆大欢喜，直接处理，不用再往下循环了。那如果运气坏一点，直到循环到<code>oldChildren</code>数组里的第四个旧子节点4才与第一个新子节点1相同，那此时就会多循环了4次。我们不妨把情况再设想的极端一点，如果<code>newChildren</code>数组和<code>oldChildren</code>数组里前三个节点都没有变化，只是第四个节点发生了变化，那么我们就会循环16次，只有在第16次循环的时候才发现新节点4与旧节点4相同，进行更新，如下图所示：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425135252298.png\" alt=\"image-20210425135252298\">    </p>\n<p>上面例子中只有四个子节点，好像还看不出来有什么缺陷，但是当子节点数量很多的时候，算法的时间复杂度就会非常高，很不利于性能提升。</p>\n<p>那么我们该怎么优化呢？其实我们可以这样想，我们不要按顺序去循环<code>newChildren</code>和<code>oldChildren</code>这两个数组，可以先比较这两个数组里特殊位置的子节点，比如：</p>\n<ul>\n<li><p>先把<code>newChildren</code>数组里的所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作；</p>\n</li>\n<li><p>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作；</p>\n</li>\n<li><p>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</p>\n</li>\n<li><p>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</p>\n</li>\n<li><p>最后四种情况都试完如果还不同，那就按照之前循环的方式来查找节点。上面例子中只有四个子节点，好像还看不出来有什么缺陷，但是当子节点数量很多的时候，算法的时间复杂度就会非常高，很不利于性能提升。</p>\n<p>那么我们该怎么优化呢？其实我们可以这样想，我们不要按顺序去循环<code>newChildren</code>和<code>oldChildren</code>这两个数组，可以先比较这两个数组里特殊位置的子节点，比如：</p>\n<ul>\n<li>先把<code>newChildren</code>数组里的所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作；</li>\n<li>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作；</li>\n<li>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</li>\n<li>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</li>\n<li>最后四种情况都试完如果还不同，那就按照之前循环的方式来查找节点。</li>\n</ul>\n</li>\n</ul>\n<p>其过程如下图所示：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425135454618.png\" alt=\"image-20210425135454618\"></p>\n<p>在上图中，我们把：</p>\n<ul>\n<li><code>newChildren</code>数组里的所有未处理子节点的第一个子节点称为：新前；</li>\n<li><code>newChildren</code>数组里的所有未处理子节点的最后一个子节点称为：新后；</li>\n<li><code>oldChildren</code>数组里的所有未处理子节点的第一个子节点称为：旧前；</li>\n<li><code>oldChildren</code>数组里的所有未处理子节点的最后一个子节点称为：旧后；</li>\n</ul>\n<p>OK，有了以上概念以后，下面我们就来看看其具体是如何实施的。</p>\n<h6 id=\"新前与旧前\"><a href=\"#新前与旧前\" class=\"headerlink\" title=\"新前与旧前\"></a>新前与旧前</h6><p>把<code>newChildren</code>数组里的所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那好极了，直接进入之前文章中说的更新节点的操作并且由于新前与旧前两个节点的位置也相同，无需进行节点移动操作；如果不同，没关系，再尝试后面三种情况。</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425135923348.png\" alt=\"image-20210425135923348\"></p>\n<h6 id=\"新后与旧后\"><a href=\"#新后与旧后\" class=\"headerlink\" title=\"新后与旧后\"></a>新后与旧后</h6><p>把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作并且由于新后与旧后两个节点的位置也相同，无需进行节点移动操作；如果不同，继续往后尝试。</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140013890.png\" alt=\"image-20210425140013890\"></p>\n<h5 id=\"新后与旧前\"><a href=\"#新后与旧前\" class=\"headerlink\" title=\"新后与旧前\"></a>新后与旧前</h5><p>把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140051237.png\" alt=\"image-20210425140051237\"></p>\n<p>此时，出现了移动节点的操作，移动节点最关键的地方在于找准要移动的位置。我们一再强调，<strong>更新节点要以新<code>VNode</code>为基准，然后操作旧的<code>oldVNode</code>，使之最后旧的<code>oldVNode</code>与新的<code>VNode</code>相同</strong>。那么现在的情况是：<code>newChildren</code>数组里的最后一个子节点与<code>oldChildren</code>数组里的第一个子节点相同，那么我们就应该在<code>oldChildren</code>数组里把第一个子节点移动到最后一个子节点的位置，如下图：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140208880.png\" alt=\"image-20210425140208880\"></p>\n<p>从图中不难看出，我们要把<code>oldChildren</code>数组里把第一个子节点移动到数组中<strong>所有未处理节点之后</strong>。</p>\n<p>如果对比之后发现这两个节点仍不是同一个节点，那就继续尝试最后一种情况。</p>\n<h6 id=\"新前与旧后\"><a href=\"#新前与旧后\" class=\"headerlink\" title=\"新前与旧后\"></a>新前与旧后</h6><p>把<code>newChildren</code>数组里所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140311007.png\" alt=\"image-20210425140311007\"></p>\n<p>同样，这种情况的节点移动位置逻辑与“新后与旧前”的逻辑类似，那就是<code>newChildren</code>数组里的第一个子节点与<code>oldChildren</code>数组里的最后一个子节点相同，那么我们就应该在<code>oldChildren</code>数组里把最后一个子节点移动到第一个子节点的位置，如下图：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140415224.png\" alt=\"image-20210425140415224\"></p>\n<p>从图中不难看出，我们要把<code>oldChildren</code>数组里把最后一个子节点移动到数组中<strong>所有未处理节点之前</strong>。</p>\n<p>OK，以上就是子节点对比更新优化策略种的4种情况，如果以上4种情况逐个试遍之后要是还没找到相同的节点，那就再通过之前的循环方式查找。</p>\n<h6 id=\"回到源码：：\"><a href=\"#回到源码：：\" class=\"headerlink\" title=\"回到源码：：\"></a>回到源码：：</h6><p>思路分析完，逻辑理清之后，我们再回到源码里看看，验证一下源码实现的逻辑是否跟我们分析的一样。源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 循环更新子节点</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateChildren</span> (<span class=\"hljs-params\">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> oldStartIdx = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">// oldChildren开始索引</span><br>    <span class=\"hljs-keyword\">let</span> oldEndIdx = oldCh.length - <span class=\"hljs-number\">1</span>   <span class=\"hljs-comment\">// oldChildren结束索引</span><br>    <span class=\"hljs-keyword\">let</span> oldStartVnode = oldCh[<span class=\"hljs-number\">0</span>]        <span class=\"hljs-comment\">// oldChildren中所有未处理节点中的第一个</span><br>    <span class=\"hljs-keyword\">let</span> oldEndVnode = oldCh[oldEndIdx]   <span class=\"hljs-comment\">// oldChildren中所有未处理节点中的最后一个</span><br><br>    <span class=\"hljs-keyword\">let</span> newStartIdx = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">// newChildren开始索引</span><br>    <span class=\"hljs-keyword\">let</span> newEndIdx = newCh.length - <span class=\"hljs-number\">1</span>   <span class=\"hljs-comment\">// newChildren结束索引</span><br>    <span class=\"hljs-keyword\">let</span> newStartVnode = newCh[<span class=\"hljs-number\">0</span>]        <span class=\"hljs-comment\">// newChildren中所有未处理节点中的第一个</span><br>    <span class=\"hljs-keyword\">let</span> newEndVnode = newCh[newEndIdx]  <span class=\"hljs-comment\">// newChildren中所有未处理节点中的最后一个</span><br><br>    <span class=\"hljs-keyword\">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm<br><br>    <span class=\"hljs-comment\">// removeOnly is a special flag used only by &lt;transition-group&gt;</span><br>    <span class=\"hljs-comment\">// to ensure removed elements stay in correct relative positions</span><br>    <span class=\"hljs-comment\">// during leaving transitions</span><br>    <span class=\"hljs-keyword\">const</span> canMove = !removeOnly<br><br>    <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&#x27;production&#x27;</span>) &#123;<br>      checkDuplicateKeys(newCh)<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 以&quot;新前&quot;、&quot;新后&quot;、&quot;旧前&quot;、&quot;旧后&quot;的方式开始比对节点</span><br>    <span class=\"hljs-keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;<br>      <span class=\"hljs-keyword\">if</span> (isUndef(oldStartVnode)) &#123;<br>        oldStartVnode = oldCh[++oldStartIdx] <span class=\"hljs-comment\">// 如果oldStartVnode不存在，则直接跳过，比对下一个</span><br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isUndef(oldEndVnode)) &#123;<br>        oldEndVnode = oldCh[--oldEndIdx]<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;<br>        <span class=\"hljs-comment\">// 如果新前与旧前节点相同，就把两个节点进行patch更新</span><br>        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)<br>        oldStartVnode = oldCh[++oldStartIdx]<br>        newStartVnode = newCh[++newStartIdx]<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;<br>        <span class=\"hljs-comment\">// 如果新后与旧后节点相同，就把两个节点进行patch更新</span><br>        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)<br>        oldEndVnode = oldCh[--oldEndIdx]<br>        newEndVnode = newCh[--newEndIdx]<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class=\"hljs-comment\">// Vnode moved right</span><br>        <span class=\"hljs-comment\">// 如果新后与旧前节点相同，先把两个节点进行patch更新，然后把旧前节点移动到oldChilren中所有未处理节点之后</span><br>        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)<br>        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))<br>        oldStartVnode = oldCh[++oldStartIdx]<br>        newEndVnode = newCh[--newEndIdx]<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class=\"hljs-comment\">// Vnode moved left</span><br>        <span class=\"hljs-comment\">// 如果新前与旧后节点相同，先把两个节点进行patch更新，然后把旧后节点移动到oldChilren中所有未处理节点之前</span><br>        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)<br>        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)<br>        oldEndVnode = oldCh[--oldEndIdx]<br>        newStartVnode = newCh[++newStartIdx]<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 如果不属于以上四种情况，就进行常规的循环比对patch</span><br>        <span class=\"hljs-keyword\">if</span> (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)<br>        idxInOld = isDef(newStartVnode.key)<br>          ? oldKeyToIdx[newStartVnode.key]<br>          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)<br>        <span class=\"hljs-comment\">// 如果在oldChildren里找不到当前循环的newChildren里的子节点</span><br>        <span class=\"hljs-keyword\">if</span> (isUndef(idxInOld)) &#123; <span class=\"hljs-comment\">// New element</span><br>          <span class=\"hljs-comment\">// 新增节点并插入到合适位置</span><br>          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"hljs-literal\">false</span>, newCh, newStartIdx)<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>          <span class=\"hljs-comment\">// 如果在oldChildren里找到了当前循环的newChildren里的子节点</span><br>          vnodeToMove = oldCh[idxInOld]<br>          <span class=\"hljs-comment\">// 如果两个节点相同</span><br>          <span class=\"hljs-keyword\">if</span> (sameVnode(vnodeToMove, newStartVnode)) &#123;<br>            <span class=\"hljs-comment\">// 调用patchVnode更新节点</span><br>            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue)<br>            oldCh[idxInOld] = <span class=\"hljs-literal\">undefined</span><br>            <span class=\"hljs-comment\">// canmove表示是否需要移动节点，如果为true表示需要移动，则移动节点，如果为false则不用移动</span><br>            canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)<br>          &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// same key but different element. treat as new element</span><br>            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class=\"hljs-literal\">false</span>, newCh, newStartIdx)<br>          &#125;<br>        &#125;<br>        newStartVnode = newCh[++newStartIdx]<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (oldStartIdx &gt; oldEndIdx) &#123;<br>      <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">       * 如果oldChildren比newChildren先循环完毕，</span><br><span class=\"hljs-comment\">       * 那么newChildren里面剩余的节点都是需要新增的节点，</span><br><span class=\"hljs-comment\">       * 把[newStartIdx, newEndIdx]之间的所有节点都插入到DOM中</span><br><span class=\"hljs-comment\">       */</span><br>      refElm = isUndef(newCh[newEndIdx + <span class=\"hljs-number\">1</span>]) ? <span class=\"hljs-literal\">null</span> : newCh[newEndIdx + <span class=\"hljs-number\">1</span>].elm<br>      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (newStartIdx &gt; newEndIdx) &#123;<br>      <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">       * 如果newChildren比oldChildren先循环完毕，</span><br><span class=\"hljs-comment\">       * 那么oldChildren里面剩余的节点都是需要删除的节点，</span><br><span class=\"hljs-comment\">       * 把[oldStartIdx, oldEndIdx]之间的所有节点都删除</span><br><span class=\"hljs-comment\">       */</span><br>      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>读源码之前，我们先有这样一个概念：那就是在我们前面所说的优化策略中，节点有可能是从前面对比，也有可能是从后面对比，对比成功就会进行更新处理，也就是说我们有可能处理第一个，也有可能处理最后一个，那么我们在循环的时候就不能简单从前往后或从后往前循环，而是要从两边向中间循环。</p>\n<p>那么该如何从两边向中间循环呢？请看下图：</p>\n<p><img src=\"C:\\Users\\梁超\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210425140631885.png\" alt=\"image-20210425140631885\"></p>\n<p>首先，我们先准备4个变量：</p>\n<ul>\n<li><strong>newStartIdx:</strong><code>newChildren</code>数组里开始位置的下标；</li>\n<li><strong>newEndIdx:</strong><code>newChildren</code>数组里结束位置的下标；</li>\n<li><strong>oldStartIdx:</strong><code>oldChildren</code>数组里开始位置的下标；</li>\n<li><strong>oldEndIdx:</strong><code>oldChildren</code>数组里结束位置的下标；</li>\n</ul>\n<p>在循环的时候，每处理一个节点，就将下标向图中箭头所指的方向移动一个位置，开始位置所表示的节点被处理后，就向后移动一个位置；结束位置所表示的节点被处理后，就向前移动一个位置；由于我们的优化策略都是新旧节点两两更新的，所以一次更新将会移动两个节点。说的再直白一点就是：<code>newStartIdx</code>和<code>oldStartIdx</code>只能往后移动（只会加），<code>newEndIdx</code>和<code>oldEndIdx</code>只能往前移动（只会减）。</p>\n<p>当开始位置大于结束位置时，表示所有节点都已经遍历过了。</p>\n<p>OK，有了这个概念后，我们开始读源码：</p>\n<ol>\n<li>如果<code>oldStartVnode</code>不存在，则直接跳过，将<code>oldStartIdx</code>加1，比对下一个</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 以&quot;新前&quot;、&quot;新后&quot;、&quot;旧前&quot;、&quot;旧后&quot;的方式开始比对节点</span><br><span class=\"hljs-keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;<br>\t<span class=\"hljs-keyword\">if</span> (isUndef(oldStartVnode)) &#123;<br>        oldStartVnode = oldCh[++oldStartIdx]<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果<code>oldEndVnode</code>不存在，则直接跳过，将<code>oldEndIdx</code>减1，比对前一个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isUndef(oldEndVnode)) &#123;<br>    oldEndVnode = oldCh[--oldEndIdx]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果新前与旧前节点相同，就把两个节点进行<code>patch</code>更新，同时<code>oldStartIdx</code>和<code>newStartIdx</code>都加1，后移一个位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;<br>    patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)<br>    oldStartVnode = oldCh[++oldStartIdx]<br>    newStartVnode = newCh[++newStartIdx]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果新后与旧后节点相同，就把两个节点进行<code>patch</code>更新，同时<code>oldEndIdx</code>和<code>newEndIdx</code>都减1，前移一个位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;<br>    patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)<br>    oldEndVnode = oldCh[--oldEndIdx]<br>    newEndVnode = newCh[--newEndIdx]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果新后与旧前节点相同，先把两个节点进行<code>patch</code>更新，然后把旧前节点移动到<code>oldChilren</code>中所有未处理节点之后，最后把<code>oldStartIdx</code>加1，后移一个位置，<code>newEndIdx</code>减1，前移一个位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123;<br>    patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)<br>    canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))<br>    oldStartVnode = oldCh[++oldStartIdx]<br>    newEndVnode = newCh[--newEndIdx]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果新前与旧后节点相同，先把两个节点进行<code>patch</code>更新，然后把旧后节点移动到<code>oldChilren</code>中所有未处理节点之前，最后把<code>newStartIdx</code>加1，后移一个位置，<code>oldEndIdx</code>减1，前移一个位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class=\"hljs-comment\">// Vnode moved left</span><br>    patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)<br>    canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)<br>    oldEndVnode = oldCh[--oldEndIdx]<br>    newStartVnode = newCh[++newStartIdx]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果不属于以上四种情况，就进行常规的循环比对<code>patch</code></p>\n<p>如果在循环中，<code>oldStartIdx</code>大于<code>oldEndIdx</code>了，那就表示<code>oldChildren</code>比<code>newChildren</code>先循环完毕，那么<code>newChildren</code>里面剩余的节点都是需要新增的节点，把<code>[newStartIdx, newEndIdx]</code>之间的所有节点都插入到<code>DOM</code>中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (oldStartIdx &gt; oldEndIdx) &#123;<br>    refElm = isUndef(newCh[newEndIdx + <span class=\"hljs-number\">1</span>]) ? <span class=\"hljs-literal\">null</span> : newCh[newEndIdx + <span class=\"hljs-number\">1</span>].elm<br>    addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果在循环中，<code>newStartIdx</code>大于<code>newEndIdx</code>了，那就表示<code>newChildren</code>比<code>oldChildren</code>先循环完毕，那么<code>oldChildren</code>里面剩余的节点都是需要删除的节点，把<code>[oldStartIdx, oldEndIdx]</code>之间的所有节点都删除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (newStartIdx &gt; newEndIdx) &#123;<br>    removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>OK,处理完毕，可见源码中的处理逻辑跟我们之前分析的逻辑是一样的。</p>\n<h6 id=\"总结：-1\"><a href=\"#总结：-1\" class=\"headerlink\" title=\"总结：\"></a>总结：</h6><p>本篇文章中，我们介绍了<code>Vue</code>中子节点更新的优化策略，发现<code>Vue</code>为了避免双重循环数据量大时间复杂度升高带来的性能问题，而选择了从子节点数组中的4个特殊位置互相比对，分别是：新前与旧前，新后与旧后，新后与旧前，新前与旧后。对于每一种情况我们都通过图文的形式对其逻辑进行了分析。最后我们回到源码，通过阅读源码来验证我们分析的是否正确。幸运的是我们之前每一步的分析都在源码中找到了相应的实现，得以验证我们的分析没有错。以上就是<code>Vue</code>中的<code>patch</code>过程，即<code>DOM-Diff</code>算法所有内容了，到这里相信你再读这部分源码的时候就有比较清晰的思路了。</p>\n<p>撸码一时爽，一直撸码一直爽！！！</p>\n","categories":[],"tags":[{"name":"vue源码理解——虚拟DOM篇","path":"api/tags/vue源码理解——虚拟DOM篇.json"}]}