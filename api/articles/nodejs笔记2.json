{"title":"nodejs-2","slug":"nodejs笔记2","date":"2020-09-18T11:19:35.000Z","updated":"2021-09-09T10:03:32.333Z","comments":true,"path":"api/articles/nodejs笔记2.json","excerpt":null,"covers":null,"content":"<h1 id=\"nodejs笔记2\"><a href=\"#nodejs笔记2\" class=\"headerlink\" title=\"nodejs笔记2\"></a>nodejs笔记2</h1><h2 id=\"web应用架构\"><a href=\"#web应用架构\" class=\"headerlink\" title=\"web应用架构\"></a>web应用架构</h2><p>client-客户端，一般指浏览器，浏览器可以通过http协议向服务器请求数据。</p>\n<p>server-服务端，一般指web服务器，可以接收客户请求，并向客户端发送响应数据。</p>\n<h5 id=\"http-server\"><a href=\"#http-server\" class=\"headerlink\" title=\"http server\"></a>http server</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//支持web服务的http</span><br><br>*<span class=\"hljs-keyword\">const</span>* http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;http&#x27;</span>)<br><br>*<span class=\"hljs-keyword\">let</span>* count=<span class=\"hljs-number\">0</span><br><br><span class=\"hljs-comment\">//创建一个服务,如果有url访问到了这个服务，回调函数执行</span><br><br><span class=\"hljs-comment\">// 回调函数中，第一个形参request代表的是请求对象，里面存放了请求信息</span><br><br><span class=\"hljs-comment\">// 第二个参数response：响应对象</span><br><br>*<span class=\"hljs-keyword\">var</span>* serve=http.createServer((*request*,*response*)*=&gt;*&#123;<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;有人访问&#x27;</span>+(++count))<br><br>  <span class=\"hljs-comment\">//设置响应头；200是成功 编码 类型</span><br><br>  *response*.writeHead(<span class=\"hljs-number\">200</span>,&#123;<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>:<span class=\"hljs-string\">&#x27;text/html;charset=utf-8&#x27;</span>&#125;)<br><br>  <span class=\"hljs-comment\">// 响应对象中添加数据</span><br><br>  *response*.write(<span class=\"hljs-string\">&#x27;我是相应内容&#x27;</span>,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>)<br><br>  <span class=\"hljs-comment\">// 结束</span><br><br>  *response*.end()<br><br>&#125;)<br><br><span class=\"hljs-comment\">// 把服务监听3000端口</span><br><br>serve.listen(<span class=\"hljs-string\">&#x27;3000&#x27;</span>,(*err*)*=&gt;*&#123;<br><br>  <span class=\"hljs-keyword\">if</span>(*err*) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">console</span>.log(*err*)<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;serve listen at 3000&#x27;</span>)<br><br>&#125;)<br><br><span class=\"hljs-comment\">// url ：http：协议</span><br><br><span class=\"hljs-comment\">// 域名：或者 ip DFS服务器</span><br><br><span class=\"hljs-comment\">// 端口：80默认</span><br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h5><p>http域名或者IP</p>\n<p>端口号</p>\n<p>相对路径</p>\n<h5 id=\"nodejs-http-server\"><a href=\"#nodejs-http-server\" class=\"headerlink\" title=\"nodejs http server\"></a>nodejs http server</h5><p>加载http包</p>\n<p>http.createServer((request,response)=&gt;{</p>\n<p>回调函数</p>\n<p>request：请求对象</p>\n<p>response：响应对象</p>\n<p>server.listen(‘3000’)</p>\n<p>})</p>\n<h5 id=\"http工作原理-过程\"><a href=\"#http工作原理-过程\" class=\"headerlink\" title=\"http工作原理  (过程)\"></a>http工作原理  (过程)</h5><ul>\n<li><p>1  客户端连接到web服务器</p>\n</li>\n<li><p>2  发送http请求</p>\n</li>\n<li><p>3   服务器接收解释请求并返回http响应</p>\n</li>\n<li><p>4  释放连接tcp连接</p>\n</li>\n</ul>\n<h5 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h5><ul>\n<li>专注于文件路径</li>\n</ul>\n<h5 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h5><ul>\n<li>专注于处理url地址</li>\n</ul>\n<h5 id=\"querystring\"><a href=\"#querystring\" class=\"headerlink\" title=\"querystring\"></a>querystring</h5><ul>\n<li>专注于url中使用get请求后面解析参数</li>\n</ul>\n<h5 id=\"解析url\"><a href=\"#解析url\" class=\"headerlink\" title=\"解析url\"></a>解析url</h5><blockquote>\n<p>new  URL(request.url,’http://${request.headers.host}’)</p>\n</blockquote>\n<h5 id=\"get-set\"><a href=\"#get-set\" class=\"headerlink\" title=\"get   set\"></a>get   set</h5><ul>\n<li>get 参数，是拼接在url后面；post参数body</li>\n<li>浏览器地址栏中访问的url</li>\n</ul>\n<h5 id=\"nodejs区分get-post\"><a href=\"#nodejs区分get-post\" class=\"headerlink\" title=\"nodejs区分get post\"></a>nodejs区分get post</h5><p>request.method</p>\n<p>nodejs 从get  post  获取参数数据</p>\n<ul>\n<li>get  获取参数  分析url  </li>\n<li>post获取参数</li>\n</ul>\n<h5 id=\"创建express项目\"><a href=\"#创建express项目\" class=\"headerlink\" title=\"创建express项目\"></a>创建express项目</h5><ul>\n<li>安装一个创建express项目的工具（express生成器）–express-generator</li>\n</ul>\n<p>安装命令：</p>\n<blockquote>\n<p>npm install express-generator -g</p>\n</blockquote>\n<p>全局安装：</p>\n<ul>\n<li>使用这个工具生成一个express项目</li>\n</ul>\n<p>命令是：</p>\n<blockquote>\n<p>express –view=ejs myprogramName </p>\n</blockquote>\n<ul>\n<li><p>myprogramName是项目的名字</p>\n</li>\n<li><p>–view=ejs 设置项目的页面使用的模板引擎；设置模版引擎为ejs pug</p>\n</li>\n<li><p>创建完成项目文件之后； </p>\n</li>\n<li><p>cd myprogramName 命令窗口前面的路径定位到项目文件</p>\n</li>\n<li><p>D:\\work\\Lesson\\202002\\2-165\\Day08\\my1</p>\n</li>\n</ul>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<p>会在my1这个文件夹下寻找package.json，获取dependencies里面的包；并且全部安装；</p>\n<ul>\n<li>启动项目</li>\n</ul>\n<blockquote>\n<p>SET DEBUG=my1:* &amp; npm start</p>\n</blockquote>\n<ul>\n<li>默认是在3000端口号： localhost:3000 127.0.0.1:3000</li>\n</ul>\n<h5 id=\"项目文件：\"><a href=\"#项目文件：\" class=\"headerlink\" title=\"项目文件：\"></a>项目文件：</h5><ul>\n<li><p>bin/www 可以修改服务的端口号：</p>\n</li>\n<li><p>node_modules 所有局部安装的包</p>\n</li>\n<li><p>pulic 存放静态文件的；</p>\n</li>\n<li><p>routes 路由</p>\n</li>\n<li><p>views 页面</p>\n</li>\n<li><p>app.js 启动js</p>\n</li>\n<li><p>package.json npm配置文件</p>\n</li>\n</ul>\n<p>npm i 就是安装的dependencies下的包</p>\n<p>npm start 就是运行的scripts下面start命令</p>\n<h5 id=\"app-js-文件\"><a href=\"#app-js-文件\" class=\"headerlink\" title=\"app.js 文件\"></a>app.js 文件</h5><h5 id=\"路由：\"><a href=\"#路由：\" class=\"headerlink\" title=\"路由：\"></a>路由：</h5><ul>\n<li><p>在routes文件夹下 写路由文件</p>\n</li>\n<li><p>app.js中启用路由：</p>\n</li>\n</ul>\n<h5 id=\"响应返回页面\"><a href=\"#响应返回页面\" class=\"headerlink\" title=\"响应返回页面\"></a>响应返回页面</h5><p>在路由中，使用res.render(“list”)；</p>\n<p>-页面必须放在views下；而且后缀名必须是.ejs</p>\n<h5 id=\"怎么获取url传递的数据：\"><a href=\"#怎么获取url传递的数据：\" class=\"headerlink\" title=\"怎么获取url传递的数据：\"></a>怎么获取url传递的数据：</h5><ul>\n<li><p>get 参数: 在路由 req.query 属性，存放了所有get请求的参数：</p>\n</li>\n<li><p>post 数据 req.body 存储</p>\n</li>\n</ul>\n<h5 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h5><p>req.params</p>\n<h5 id=\"路由的路径是可以用正则表达式\"><a href=\"#路由的路径是可以用正则表达式\" class=\"headerlink\" title=\"路由的路径是可以用正则表达式\"></a>路由的路径是可以用正则表达式</h5><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><ul>\n<li><p>npm i express-generator -g 如果安装过了，不用再安装</p>\n</li>\n<li><p>生成一个项目</p>\n</li>\n</ul>\n<blockquote>\n<p>express –view=ejs xiaou</p>\n</blockquote>\n<blockquote>\n<p>cd xiaou</p>\n</blockquote>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<blockquote>\n<p>npm start</p>\n</blockquote>\n<ul>\n<li><p>把index.html复制到views，并且要ejs后缀；</p>\n</li>\n<li><p>设计一个路由： 设计url地址；访问这个url，</p>\n</li>\n<li><p>routes文件夹下创建一个新的路由文件index.js</p>\n</li>\n</ul>\n<h5 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node.js\"></a>node.js</h5><ul>\n<li>单线程</li>\n<li>非阻塞</li>\n<li>事件驱动</li>\n</ul>\n<h5 id=\"模块化commonJS\"><a href=\"#模块化commonJS\" class=\"headerlink\" title=\"模块化commonJS\"></a>模块化commonJS</h5><ul>\n<li>定义模块：</li>\n</ul>\n<p>modules.exporys{}</p>\n<p>modules.exporys.xxx=xx</p>\n<p>exports.xxx=xx</p>\n<ul>\n<li>加载模块：</li>\n</ul>\n<p>通过js（模块）的加载路径：</p>\n<p>const mymoudule=require(‘模块’)</p>\n<p>通过js（模块）的标识：核心模块（nodejs自带的    ）</p>\n<p>const http=require(‘http’)</p>\n<h5 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h5><ul>\n<li>初始化</li>\n<li>绑定事件</li>\n<li>触发事件</li>\n<li>传值：</li>\n</ul>\n<h5 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h5><ul>\n<li>包：</li>\n<li>全局安装    -g   本地安装</li>\n<li>依赖   和   开发依赖：</li>\n</ul>\n<p>依赖：express   简写–save    -S</p>\n<p>开发依赖：less  简写  –save-dev   -D</p>\n<h5 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h5><h5 id=\"nodejs-http\"><a href=\"#nodejs-http\" class=\"headerlink\" title=\"nodejs  http\"></a>nodejs  http</h5><ul>\n<li><p><a href=\"http://www.ddd.com/\">http://www.ddd.com:80</a>   默认是80</p>\n<h5 id=\"http四个步骤：\"><a href=\"#http四个步骤：\" class=\"headerlink\" title=\"http四个步骤：\"></a>http四个步骤：</h5><ul>\n<li>客户端向服务端发起的连接</li>\n<li>客户端向服务器发送的数据</li>\n<li>服务器响应客户端</li>\n<li>客户端结束连接</li>\n</ul>\n<h5 id=\"nodejs下的一些小模块\"><a href=\"#nodejs下的一些小模块\" class=\"headerlink\" title=\"nodejs下的一些小模块\"></a>nodejs下的一些小模块</h5><ul>\n<li>path</li>\n<li>url</li>\n<li>queryString</li>\n</ul>\n<h5 id=\"express\"><a href=\"#express\" class=\"headerlink\" title=\"express\"></a>express</h5><p>基于nodejs的一个web开发框架：</p>\n<h5 id=\"创建esperss项目的步骤\"><a href=\"#创建esperss项目的步骤\" class=\"headerlink\" title=\"创建esperss项目的步骤\"></a>创建esperss项目的步骤</h5><ul>\n<li>全局安装espress项目生成器</li>\n</ul>\n</li>\n</ul>\n<p>命令：npm i express-generator -g</p>\n<p>创建express项目的基础框架</p>\n<blockquote>\n<p>express –view=ejs xiaou</p>\n</blockquote>\n<blockquote>\n<p>cd xiaou</p>\n</blockquote>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<blockquote>\n<p>npm start</p>\n</blockquote>\n<h5 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h5><p>在routes创建新的路由文件product.js</p>\n<p>路由地址的匹配</p>\n<p>正则</p>\n<p>动态路由</p>\n<h5 id=\"路由返回数据\"><a href=\"#路由返回数据\" class=\"headerlink\" title=\"路由返回数据\"></a>路由返回数据</h5><ul>\n<li>字符串：res.send()</li>\n<li>页面：res.render(‘文件路径’)；文件夹是是固定的views文件夹</li>\n<li>json  res.json({})</li>\n</ul>\n<h5 id=\"中间件：\"><a href=\"#中间件：\" class=\"headerlink\" title=\"中间件：\"></a>中间件：</h5><p>每个请求都会经过中间件的检查过滤</p>\n<p>1、中间件就是一种功能的封装方式，就是封装在程序中处理http请求的功能，  </p>\n<p>2、中间件是在管道中执行</p>\n<p>3、中间件有一个next()函数，如果不调用next函数，请求就在这个中间件中终止了，</p>\n<p>4、中间件和路由处理器的参数中都有回调函数，这个函数有2,3,4个参数</p>\n<p>如果有两个参数就是req和res；</p>\n<p>如果有三个参数就是req,res和next</p>\n<p>如果有四个参数就是err，req，res，next</p>\n<p>5、如果不调用next ，管道就会终止，不会再有处理器做后续响应，应该向客户端发送一个响应</p>\n<p>6、如果调用了next，不应该发送响应到客户端，如果发送了，则后面发送的响应都会被忽略</p>\n<p>7、中间件的第一个参数可以是路径，如果忽略则全部都匹配</p>\n<h5 id=\"ejs\"><a href=\"#ejs\" class=\"headerlink\" title=\"ejs\"></a>ejs</h5><p>res.render(‘页面的相对路径‘，data)  第二个参数是数据。传递给页面    的数据</p>\n<p>第二个参数是传递给页面中的模板引擎数据</p>\n<p>模板引擎中的语法</p>\n<p>&lt;%# 注释%&gt;</p>\n<h5 id=\"art-template-模板引擎\"><a href=\"#art-template-模板引擎\" class=\"headerlink\" title=\"art -template  模板引擎\"></a>art -template  模板引擎</h5><ul>\n<li><p>espress项目中，使用arttemplate模板引擎</p>\n</li>\n<li><p>安装arttemplate包和express下的支持包</p>\n</li>\n<li><p>npm  i art - template  -S</p>\n</li>\n<li><p>npm  i express-art - template  -S</p>\n</li>\n</ul>\n<h2 id=\"MySql\"><a href=\"#MySql\" class=\"headerlink\" title=\"MySql\"></a>MySql</h2><ul>\n<li>数据库：存储文件：</li>\n<li>MySQl:服务类的程序：</li>\n</ul>\n<h3 id=\"常见数据库\"><a href=\"#常见数据库\" class=\"headerlink\" title=\"常见数据库\"></a>常见数据库</h3><ul>\n<li>Oracle</li>\n<li>mysql</li>\n<li>ms sql server</li>\n<li>mongodb</li>\n</ul>\n<h3 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h3><ul>\n<li>关系数据库</li>\n<li>非关系数据库</li>\n</ul>\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><ul>\n<li>第一范式（1NF）：要求数据库表的每一列都是不可分割的原子数据项</li>\n<li>第二范式（2NF）：在1NF的基础上，非主键属性必须完全依赖于主键</li>\n<li>第三范式（3NF）：在2NF基础上，任何非主键属性不依赖于其它非主键属性（在2NF基础上消除传递依赖）</li>\n<li>反范式：</li>\n</ul>\n<h3 id=\"mysql-语法：sql语法\"><a href=\"#mysql-语法：sql语法\" class=\"headerlink\" title=\"mysql 语法：sql语法\"></a>mysql 语法：sql语法</h3><ul>\n<li>DDL  DML</li>\n</ul>\n<h3 id=\"数据库：database\"><a href=\"#数据库：database\" class=\"headerlink\" title=\"数据库：database\"></a>数据库：database</h3><pre><code>-   创建数据库：\n&gt;create database if not exists xiaou ;</code></pre>\n<h3 id=\"表：table\"><a href=\"#表：table\" class=\"headerlink\" title=\"表：table\"></a>表：table</h3><ul>\n<li>创建表：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> (<br>  <span class=\"hljs-string\">`cardid`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`name`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`age`</span> <span class=\"hljs-built_in\">INT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`address`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`height`</span> <span class=\"hljs-built_in\">FLOAT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`createby`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`createtime`</span> <span class=\"hljs-built_in\">DATE</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`updateby`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`updatetime`</span> <span class=\"hljs-built_in\">DATE</span> <span class=\"hljs-literal\">NULL</span>,<br>  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`cardid`</span>));<br><br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>修改表：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> <br><span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">COLUMN</span> <span class=\"hljs-string\">`disc`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-string\">`tel`</span>;<br><br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> <br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">COLUMN</span> <span class=\"hljs-string\">`disc`</span>;<br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除表、删除数据库\"><a href=\"#删除表、删除数据库\" class=\"headerlink\" title=\"删除表、删除数据库\"></a>删除表、删除数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">table</span> stud;<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">database</span> ujiuye;<br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"中文：\"><a href=\"#中文：\" class=\"headerlink\" title=\"中文：\"></a>中文：</h3><p>修改字段编码为urf8  ;utf8-general-ci;</p>\n<h3 id=\"插入数据：\"><a href=\"#插入数据：\" class=\"headerlink\" title=\"插入数据：\"></a>插入数据：</h3><ul>\n<li><p>insert into </p>\n</li>\n<li><p>格式<br><strong>全部列添加数据：</strong><br>insert into table_name (id,name,age,<code>drop</code>) values(10,’zs’,100,’eer’);<br>如果对所有的列添加数据： 前面的（列名、）是可以省略的；<br>insert into table_name values(10,’zs’,100,’eer’);</p>\n</li>\n</ul>\n<p><strong>部分列添加数据：</strong><br>insert into table_name (id,name) values(10,’zs’);</p>\n<h3 id=\"修改数据：\"><a href=\"#修改数据：\" class=\"headerlink\" title=\"修改数据：\"></a>修改数据：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">update</span> xiaou.user <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">name</span>=<span class=\"hljs-string\">&#x27;zs2000&#x27;</span>,age=<span class=\"hljs-number\">2000</span> <span class=\"hljs-keyword\">where</span> address=<span class=\"hljs-string\">&#x27;上海&#x27;</span>;<br></code></pre></td></tr></table></figure>\n","more":"<h1 id=\"nodejs笔记2\"><a href=\"#nodejs笔记2\" class=\"headerlink\" title=\"nodejs笔记2\"></a>nodejs笔记2</h1><h2 id=\"web应用架构\"><a href=\"#web应用架构\" class=\"headerlink\" title=\"web应用架构\"></a>web应用架构</h2><p>client-客户端，一般指浏览器，浏览器可以通过http协议向服务器请求数据。</p>\n<p>server-服务端，一般指web服务器，可以接收客户请求，并向客户端发送响应数据。</p>\n<h5 id=\"http-server\"><a href=\"#http-server\" class=\"headerlink\" title=\"http server\"></a>http server</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//支持web服务的http</span><br><br>*<span class=\"hljs-keyword\">const</span>* http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;http&#x27;</span>)<br><br>*<span class=\"hljs-keyword\">let</span>* count=<span class=\"hljs-number\">0</span><br><br><span class=\"hljs-comment\">//创建一个服务,如果有url访问到了这个服务，回调函数执行</span><br><br><span class=\"hljs-comment\">// 回调函数中，第一个形参request代表的是请求对象，里面存放了请求信息</span><br><br><span class=\"hljs-comment\">// 第二个参数response：响应对象</span><br><br>*<span class=\"hljs-keyword\">var</span>* serve=http.createServer((*request*,*response*)*=&gt;*&#123;<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;有人访问&#x27;</span>+(++count))<br><br>  <span class=\"hljs-comment\">//设置响应头；200是成功 编码 类型</span><br><br>  *response*.writeHead(<span class=\"hljs-number\">200</span>,&#123;<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>:<span class=\"hljs-string\">&#x27;text/html;charset=utf-8&#x27;</span>&#125;)<br><br>  <span class=\"hljs-comment\">// 响应对象中添加数据</span><br><br>  *response*.write(<span class=\"hljs-string\">&#x27;我是相应内容&#x27;</span>,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>)<br><br>  <span class=\"hljs-comment\">// 结束</span><br><br>  *response*.end()<br><br>&#125;)<br><br><span class=\"hljs-comment\">// 把服务监听3000端口</span><br><br>serve.listen(<span class=\"hljs-string\">&#x27;3000&#x27;</span>,(*err*)*=&gt;*&#123;<br><br>  <span class=\"hljs-keyword\">if</span>(*err*) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">console</span>.log(*err*)<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;serve listen at 3000&#x27;</span>)<br><br>&#125;)<br><br><span class=\"hljs-comment\">// url ：http：协议</span><br><br><span class=\"hljs-comment\">// 域名：或者 ip DFS服务器</span><br><br><span class=\"hljs-comment\">// 端口：80默认</span><br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h5><p>http域名或者IP</p>\n<p>端口号</p>\n<p>相对路径</p>\n<h5 id=\"nodejs-http-server\"><a href=\"#nodejs-http-server\" class=\"headerlink\" title=\"nodejs http server\"></a>nodejs http server</h5><p>加载http包</p>\n<p>http.createServer((request,response)=&gt;{</p>\n<p>回调函数</p>\n<p>request：请求对象</p>\n<p>response：响应对象</p>\n<p>server.listen(‘3000’)</p>\n<p>})</p>\n<h5 id=\"http工作原理-过程\"><a href=\"#http工作原理-过程\" class=\"headerlink\" title=\"http工作原理  (过程)\"></a>http工作原理  (过程)</h5><ul>\n<li><p>1  客户端连接到web服务器</p>\n</li>\n<li><p>2  发送http请求</p>\n</li>\n<li><p>3   服务器接收解释请求并返回http响应</p>\n</li>\n<li><p>4  释放连接tcp连接</p>\n</li>\n</ul>\n<h5 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h5><ul>\n<li>专注于文件路径</li>\n</ul>\n<h5 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h5><ul>\n<li>专注于处理url地址</li>\n</ul>\n<h5 id=\"querystring\"><a href=\"#querystring\" class=\"headerlink\" title=\"querystring\"></a>querystring</h5><ul>\n<li>专注于url中使用get请求后面解析参数</li>\n</ul>\n<h5 id=\"解析url\"><a href=\"#解析url\" class=\"headerlink\" title=\"解析url\"></a>解析url</h5><blockquote>\n<p>new  URL(request.url,’http://${request.headers.host}’)</p>\n</blockquote>\n<h5 id=\"get-set\"><a href=\"#get-set\" class=\"headerlink\" title=\"get   set\"></a>get   set</h5><ul>\n<li>get 参数，是拼接在url后面；post参数body</li>\n<li>浏览器地址栏中访问的url</li>\n</ul>\n<h5 id=\"nodejs区分get-post\"><a href=\"#nodejs区分get-post\" class=\"headerlink\" title=\"nodejs区分get post\"></a>nodejs区分get post</h5><p>request.method</p>\n<p>nodejs 从get  post  获取参数数据</p>\n<ul>\n<li>get  获取参数  分析url  </li>\n<li>post获取参数</li>\n</ul>\n<h5 id=\"创建express项目\"><a href=\"#创建express项目\" class=\"headerlink\" title=\"创建express项目\"></a>创建express项目</h5><ul>\n<li>安装一个创建express项目的工具（express生成器）–express-generator</li>\n</ul>\n<p>安装命令：</p>\n<blockquote>\n<p>npm install express-generator -g</p>\n</blockquote>\n<p>全局安装：</p>\n<ul>\n<li>使用这个工具生成一个express项目</li>\n</ul>\n<p>命令是：</p>\n<blockquote>\n<p>express –view=ejs myprogramName </p>\n</blockquote>\n<ul>\n<li><p>myprogramName是项目的名字</p>\n</li>\n<li><p>–view=ejs 设置项目的页面使用的模板引擎；设置模版引擎为ejs pug</p>\n</li>\n<li><p>创建完成项目文件之后； </p>\n</li>\n<li><p>cd myprogramName 命令窗口前面的路径定位到项目文件</p>\n</li>\n<li><p>D:\\work\\Lesson\\202002\\2-165\\Day08\\my1</p>\n</li>\n</ul>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<p>会在my1这个文件夹下寻找package.json，获取dependencies里面的包；并且全部安装；</p>\n<ul>\n<li>启动项目</li>\n</ul>\n<blockquote>\n<p>SET DEBUG=my1:* &amp; npm start</p>\n</blockquote>\n<ul>\n<li>默认是在3000端口号： localhost:3000 127.0.0.1:3000</li>\n</ul>\n<h5 id=\"项目文件：\"><a href=\"#项目文件：\" class=\"headerlink\" title=\"项目文件：\"></a>项目文件：</h5><ul>\n<li><p>bin/www 可以修改服务的端口号：</p>\n</li>\n<li><p>node_modules 所有局部安装的包</p>\n</li>\n<li><p>pulic 存放静态文件的；</p>\n</li>\n<li><p>routes 路由</p>\n</li>\n<li><p>views 页面</p>\n</li>\n<li><p>app.js 启动js</p>\n</li>\n<li><p>package.json npm配置文件</p>\n</li>\n</ul>\n<p>npm i 就是安装的dependencies下的包</p>\n<p>npm start 就是运行的scripts下面start命令</p>\n<h5 id=\"app-js-文件\"><a href=\"#app-js-文件\" class=\"headerlink\" title=\"app.js 文件\"></a>app.js 文件</h5><h5 id=\"路由：\"><a href=\"#路由：\" class=\"headerlink\" title=\"路由：\"></a>路由：</h5><ul>\n<li><p>在routes文件夹下 写路由文件</p>\n</li>\n<li><p>app.js中启用路由：</p>\n</li>\n</ul>\n<h5 id=\"响应返回页面\"><a href=\"#响应返回页面\" class=\"headerlink\" title=\"响应返回页面\"></a>响应返回页面</h5><p>在路由中，使用res.render(“list”)；</p>\n<p>-页面必须放在views下；而且后缀名必须是.ejs</p>\n<h5 id=\"怎么获取url传递的数据：\"><a href=\"#怎么获取url传递的数据：\" class=\"headerlink\" title=\"怎么获取url传递的数据：\"></a>怎么获取url传递的数据：</h5><ul>\n<li><p>get 参数: 在路由 req.query 属性，存放了所有get请求的参数：</p>\n</li>\n<li><p>post 数据 req.body 存储</p>\n</li>\n</ul>\n<h5 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h5><p>req.params</p>\n<h5 id=\"路由的路径是可以用正则表达式\"><a href=\"#路由的路径是可以用正则表达式\" class=\"headerlink\" title=\"路由的路径是可以用正则表达式\"></a>路由的路径是可以用正则表达式</h5><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><ul>\n<li><p>npm i express-generator -g 如果安装过了，不用再安装</p>\n</li>\n<li><p>生成一个项目</p>\n</li>\n</ul>\n<blockquote>\n<p>express –view=ejs xiaou</p>\n</blockquote>\n<blockquote>\n<p>cd xiaou</p>\n</blockquote>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<blockquote>\n<p>npm start</p>\n</blockquote>\n<ul>\n<li><p>把index.html复制到views，并且要ejs后缀；</p>\n</li>\n<li><p>设计一个路由： 设计url地址；访问这个url，</p>\n</li>\n<li><p>routes文件夹下创建一个新的路由文件index.js</p>\n</li>\n</ul>\n<h5 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node.js\"></a>node.js</h5><ul>\n<li>单线程</li>\n<li>非阻塞</li>\n<li>事件驱动</li>\n</ul>\n<h5 id=\"模块化commonJS\"><a href=\"#模块化commonJS\" class=\"headerlink\" title=\"模块化commonJS\"></a>模块化commonJS</h5><ul>\n<li>定义模块：</li>\n</ul>\n<p>modules.exporys{}</p>\n<p>modules.exporys.xxx=xx</p>\n<p>exports.xxx=xx</p>\n<ul>\n<li>加载模块：</li>\n</ul>\n<p>通过js（模块）的加载路径：</p>\n<p>const mymoudule=require(‘模块’)</p>\n<p>通过js（模块）的标识：核心模块（nodejs自带的    ）</p>\n<p>const http=require(‘http’)</p>\n<h5 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h5><ul>\n<li>初始化</li>\n<li>绑定事件</li>\n<li>触发事件</li>\n<li>传值：</li>\n</ul>\n<h5 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h5><ul>\n<li>包：</li>\n<li>全局安装    -g   本地安装</li>\n<li>依赖   和   开发依赖：</li>\n</ul>\n<p>依赖：express   简写–save    -S</p>\n<p>开发依赖：less  简写  –save-dev   -D</p>\n<h5 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h5><h5 id=\"nodejs-http\"><a href=\"#nodejs-http\" class=\"headerlink\" title=\"nodejs  http\"></a>nodejs  http</h5><ul>\n<li><p><a href=\"http://www.ddd.com/\">http://www.ddd.com:80</a>   默认是80</p>\n<h5 id=\"http四个步骤：\"><a href=\"#http四个步骤：\" class=\"headerlink\" title=\"http四个步骤：\"></a>http四个步骤：</h5><ul>\n<li>客户端向服务端发起的连接</li>\n<li>客户端向服务器发送的数据</li>\n<li>服务器响应客户端</li>\n<li>客户端结束连接</li>\n</ul>\n<h5 id=\"nodejs下的一些小模块\"><a href=\"#nodejs下的一些小模块\" class=\"headerlink\" title=\"nodejs下的一些小模块\"></a>nodejs下的一些小模块</h5><ul>\n<li>path</li>\n<li>url</li>\n<li>queryString</li>\n</ul>\n<h5 id=\"express\"><a href=\"#express\" class=\"headerlink\" title=\"express\"></a>express</h5><p>基于nodejs的一个web开发框架：</p>\n<h5 id=\"创建esperss项目的步骤\"><a href=\"#创建esperss项目的步骤\" class=\"headerlink\" title=\"创建esperss项目的步骤\"></a>创建esperss项目的步骤</h5><ul>\n<li>全局安装espress项目生成器</li>\n</ul>\n</li>\n</ul>\n<p>命令：npm i express-generator -g</p>\n<p>创建express项目的基础框架</p>\n<blockquote>\n<p>express –view=ejs xiaou</p>\n</blockquote>\n<blockquote>\n<p>cd xiaou</p>\n</blockquote>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<blockquote>\n<p>npm start</p>\n</blockquote>\n<h5 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h5><p>在routes创建新的路由文件product.js</p>\n<p>路由地址的匹配</p>\n<p>正则</p>\n<p>动态路由</p>\n<h5 id=\"路由返回数据\"><a href=\"#路由返回数据\" class=\"headerlink\" title=\"路由返回数据\"></a>路由返回数据</h5><ul>\n<li>字符串：res.send()</li>\n<li>页面：res.render(‘文件路径’)；文件夹是是固定的views文件夹</li>\n<li>json  res.json({})</li>\n</ul>\n<h5 id=\"中间件：\"><a href=\"#中间件：\" class=\"headerlink\" title=\"中间件：\"></a>中间件：</h5><p>每个请求都会经过中间件的检查过滤</p>\n<p>1、中间件就是一种功能的封装方式，就是封装在程序中处理http请求的功能，  </p>\n<p>2、中间件是在管道中执行</p>\n<p>3、中间件有一个next()函数，如果不调用next函数，请求就在这个中间件中终止了，</p>\n<p>4、中间件和路由处理器的参数中都有回调函数，这个函数有2,3,4个参数</p>\n<p>如果有两个参数就是req和res；</p>\n<p>如果有三个参数就是req,res和next</p>\n<p>如果有四个参数就是err，req，res，next</p>\n<p>5、如果不调用next ，管道就会终止，不会再有处理器做后续响应，应该向客户端发送一个响应</p>\n<p>6、如果调用了next，不应该发送响应到客户端，如果发送了，则后面发送的响应都会被忽略</p>\n<p>7、中间件的第一个参数可以是路径，如果忽略则全部都匹配</p>\n<h5 id=\"ejs\"><a href=\"#ejs\" class=\"headerlink\" title=\"ejs\"></a>ejs</h5><p>res.render(‘页面的相对路径‘，data)  第二个参数是数据。传递给页面    的数据</p>\n<p>第二个参数是传递给页面中的模板引擎数据</p>\n<p>模板引擎中的语法</p>\n<p>&lt;%# 注释%&gt;</p>\n<h5 id=\"art-template-模板引擎\"><a href=\"#art-template-模板引擎\" class=\"headerlink\" title=\"art -template  模板引擎\"></a>art -template  模板引擎</h5><ul>\n<li><p>espress项目中，使用arttemplate模板引擎</p>\n</li>\n<li><p>安装arttemplate包和express下的支持包</p>\n</li>\n<li><p>npm  i art - template  -S</p>\n</li>\n<li><p>npm  i express-art - template  -S</p>\n</li>\n</ul>\n<h2 id=\"MySql\"><a href=\"#MySql\" class=\"headerlink\" title=\"MySql\"></a>MySql</h2><ul>\n<li>数据库：存储文件：</li>\n<li>MySQl:服务类的程序：</li>\n</ul>\n<h3 id=\"常见数据库\"><a href=\"#常见数据库\" class=\"headerlink\" title=\"常见数据库\"></a>常见数据库</h3><ul>\n<li>Oracle</li>\n<li>mysql</li>\n<li>ms sql server</li>\n<li>mongodb</li>\n</ul>\n<h3 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h3><ul>\n<li>关系数据库</li>\n<li>非关系数据库</li>\n</ul>\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><ul>\n<li>第一范式（1NF）：要求数据库表的每一列都是不可分割的原子数据项</li>\n<li>第二范式（2NF）：在1NF的基础上，非主键属性必须完全依赖于主键</li>\n<li>第三范式（3NF）：在2NF基础上，任何非主键属性不依赖于其它非主键属性（在2NF基础上消除传递依赖）</li>\n<li>反范式：</li>\n</ul>\n<h3 id=\"mysql-语法：sql语法\"><a href=\"#mysql-语法：sql语法\" class=\"headerlink\" title=\"mysql 语法：sql语法\"></a>mysql 语法：sql语法</h3><ul>\n<li>DDL  DML</li>\n</ul>\n<h3 id=\"数据库：database\"><a href=\"#数据库：database\" class=\"headerlink\" title=\"数据库：database\"></a>数据库：database</h3><pre><code>-   创建数据库：\n&gt;create database if not exists xiaou ;</code></pre>\n<h3 id=\"表：table\"><a href=\"#表：table\" class=\"headerlink\" title=\"表：table\"></a>表：table</h3><ul>\n<li>创建表：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> (<br>  <span class=\"hljs-string\">`cardid`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`name`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`age`</span> <span class=\"hljs-built_in\">INT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`address`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`height`</span> <span class=\"hljs-built_in\">FLOAT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`createby`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`createtime`</span> <span class=\"hljs-built_in\">DATE</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`updateby`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`updatetime`</span> <span class=\"hljs-built_in\">DATE</span> <span class=\"hljs-literal\">NULL</span>,<br>  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`cardid`</span>));<br><br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>修改表：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> <br><span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">COLUMN</span> <span class=\"hljs-string\">`disc`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-string\">`tel`</span>;<br><br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> <br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">COLUMN</span> <span class=\"hljs-string\">`disc`</span>;<br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除表、删除数据库\"><a href=\"#删除表、删除数据库\" class=\"headerlink\" title=\"删除表、删除数据库\"></a>删除表、删除数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">table</span> stud;<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">database</span> ujiuye;<br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"中文：\"><a href=\"#中文：\" class=\"headerlink\" title=\"中文：\"></a>中文：</h3><p>修改字段编码为urf8  ;utf8-general-ci;</p>\n<h3 id=\"插入数据：\"><a href=\"#插入数据：\" class=\"headerlink\" title=\"插入数据：\"></a>插入数据：</h3><ul>\n<li><p>insert into </p>\n</li>\n<li><p>格式<br><strong>全部列添加数据：</strong><br>insert into table_name (id,name,age,<code>drop</code>) values(10,’zs’,100,’eer’);<br>如果对所有的列添加数据： 前面的（列名、）是可以省略的；<br>insert into table_name values(10,’zs’,100,’eer’);</p>\n</li>\n</ul>\n<p><strong>部分列添加数据：</strong><br>insert into table_name (id,name) values(10,’zs’);</p>\n<h3 id=\"修改数据：\"><a href=\"#修改数据：\" class=\"headerlink\" title=\"修改数据：\"></a>修改数据：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">update</span> xiaou.user <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">name</span>=<span class=\"hljs-string\">&#x27;zs2000&#x27;</span>,age=<span class=\"hljs-number\">2000</span> <span class=\"hljs-keyword\">where</span> address=<span class=\"hljs-string\">&#x27;上海&#x27;</span>;<br></code></pre></td></tr></table></figure>\n","categories":[],"tags":[]}