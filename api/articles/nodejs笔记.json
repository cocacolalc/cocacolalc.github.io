{"title":"nodejs-1","slug":"nodejs笔记","date":"2020-09-18T11:14:53.000Z","updated":"2021-09-14T03:19:27.156Z","comments":true,"path":"api/articles/nodejs笔记.json","excerpt":null,"covers":["https://images.weserv.nl/?url=https://gitee.com/cocacolalc/imgs-hexo/raw/master/img/photo-1625051939433-b1291104952c.jpg"],"cover":"https://images.weserv.nl/?url=https://gitee.com/cocacolalc/imgs-hexo/raw/master/img/photo-1625051939433-b1291104952c.jpg","content":"<p><img src=\"https://images.weserv.nl/?url=https://gitee.com/cocacolalc/imgs-hexo/raw/master/img/photo-1625051939433-b1291104952c.jpg\" alt=\"img\"></p>\n<h1 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node js\"></a>node js</h1><p>nodejs是基于google v8引擎，在服务器端支持javascript的一种运行环境。</p>\n<p>特点：单线程、非阻塞I/O、事件驱动</p>\n<h4 id=\"node运行js文件的路径：\"><a href=\"#node运行js文件的路径：\" class=\"headerlink\" title=\"node运行js文件的路径：\"></a>node运行js文件的路径：</h4><p>相对路径：node命令前面的路径（运行路径）</p>\n<p>绝对路径        </p>\n<h4 id=\"顶层对象\"><a href=\"#顶层对象\" class=\"headerlink\" title=\"顶层对象\"></a>顶层对象</h4><p>浏览器里是window，node里是global，ES6中提到同义顶层对象用globalThis，</p>\n<p>ES6中将顶层对象的属性与全局变量逐步脱钩。</p>\n<h4 id=\"默认的全局变量\"><a href=\"#默认的全局变量\" class=\"headerlink\" title=\"默认的全局变量\"></a>默认的全局变量</h4><p>__filename当前js文件带有完整绝对路径的文件名</p>\n<p>__dirname获得当前执行文件所在目录的完整目录名</p>\n<h4 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h4><p>Buffer 被引入用以帮助开发者处理二进制数据，在此生态系统中传统上只处理字符串而不是二进制数据。</p>\n<p>1、指定大小：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> buffer=Buffer.alloc(<span class=\"hljs-number\">20</span>);<span class=\"hljs-comment\">//length</span><br><span class=\"hljs-comment\">//&lt;Buffer 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>2、</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> buf2=Buffer.from(<span class=\"hljs-string\">&quot;this is buffer&quot;</span>);<span class=\"hljs-comment\">//string</span><br><span class=\"hljs-comment\">//&lt;Buffer 74 68 69 73 20 69 73 20 62 75 66 66 65 72&gt;</span><br><span class=\"hljs-keyword\">var</span> s=buf2.toString(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br><span class=\"hljs-comment\">//this is buffer</span><br>buf2.write();<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h4><p>多个js文件的引用方式。</p>\n<p>模块：按照特定的格式写出来的js文件。</p>\n<p>特定的格式：为了引用，模块化规范。</p>\n<p>nodejs里用的是commonjs规范。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sub</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-built_in\">module</span>.exports=&#123;sum,sub&#125;;<span class=\"hljs-comment\">//导出</span><br><span class=\"hljs-built_in\">exports</span>.sum=sum;<span class=\"hljs-comment\">//exports只能用这种方式</span><br><br><br><span class=\"hljs-comment\">//引用</span><br><span class=\"hljs-keyword\">let</span> &#123;sum,sub&#125;=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;路径&quot;</span>);<br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"事件模块\"><a href=\"#事件模块\" class=\"headerlink\" title=\"事件模块\"></a>事件模块</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//内置模块http、fs、events，核心模块</span><br><span class=\"hljs-keyword\">let</span> http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;http&quot;</span>);<br><span class=\"hljs-keyword\">let</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><br><br><span class=\"hljs-comment\">//events是内置的处理事件的模块 EventEmitter</span><br><span class=\"hljs-comment\">//events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。</span><br><span class=\"hljs-comment\">//1、加载事件模块</span><br><span class=\"hljs-keyword\">let</span> EventEmitter=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;events&quot;</span>).EventEmitter;<br><span class=\"hljs-number\">2</span>、实例化一个事件对象<br><span class=\"hljs-keyword\">let</span> event=<span class=\"hljs-keyword\">new</span> EventEmitter();<br><span class=\"hljs-comment\">//3、实例提供里两个方法：</span><br>event.on(<span class=\"hljs-string\">&quot;event1&quot;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>)=&gt;</span>&#123;<span class=\"hljs-comment\">//为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。</span><br>  <span class=\"hljs-built_in\">console</span>.log(args)；<br>&#125;)<br><span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    event.emit(<span class=\"hljs-string\">&quot;event1&quot;</span>,<span class=\"hljs-string\">&quot;a&quot;</span>,<span class=\"hljs-string\">&quot;b&quot;</span>,<span class=\"hljs-string\">&quot;c&quot;</span>)<span class=\"hljs-comment\">//触发事件emit(event, [arg1], [arg2], [...])</span><br>&#125;, <span class=\"hljs-number\">1000</span>)<br>event.addListener(<span class=\"hljs-string\">&#x27;event1&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)<br>&#125;)<br>event.on(<span class=\"hljs-string\">&quot;e2&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    event.removeAllListeners(<span class=\"hljs-string\">&#x27;event1&#x27;</span>)<span class=\"hljs-comment\">//只清除一个event.removeListener(&#x27;event1&#x27;,fn)</span><br>&#125;)<br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    event.emit(<span class=\"hljs-string\">&#x27;e2&#x27;</span>)<br>&#125;,<span class=\"hljs-number\">4000</span>)<br><span class=\"hljs-comment\">//实例event提供的方法：</span><br>on(event,函数名)<span class=\"hljs-comment\">//绑定</span><br>addListener(event,函数名)<span class=\"hljs-comment\">//添加</span><br>once(event,函数名)<span class=\"hljs-comment\">//只一次</span><br>removeListener(event,函数名)<span class=\"hljs-comment\">//移除</span><br><span class=\"hljs-comment\">//移除某个监听函数，必须在添加监视的时候，是通过函数名添加，如果是一个匿名函数添加监听不能移除</span><br>removeAllListeners(event)<span class=\"hljs-comment\">//移除所有</span><br>emit(event, [arg1], [arg2], [...])<span class=\"hljs-comment\">//触发</span><br><br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h4><p>模块：按照CommonJS规范写的js文件；</p>\n<p>包：包含js文件和其他附带信息的整体；</p>\n<p>npm：包的管理工具：</p>\n<p>​    1、根据包的名字，下载并按照npmjs.com</p>\n<p>​    2、解决了包之间的依赖关系</p>\n<p>命令</p>\n<p>​    安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">npm install 包<br><br><span class=\"hljs-keyword\">let</span> x=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;包&#x27;</span>)<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Nodejs的文件系统\"><a href=\"#Nodejs的文件系统\" class=\"headerlink\" title=\"Nodejs的文件系统\"></a>Nodejs的文件系统</h4><p>读取文件信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br>fs.stat(<span class=\"hljs-string\">&quot;文件路径&quot;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,stats</span>)=&gt;</span>&#123;<br>  <span class=\"hljs-keyword\">if</span>(err)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;错误&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(stats.isFile()) <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;这是文件&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span>(stats.isDirectory()) <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;这是文件夹&quot;</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(stats)<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>读取文件内容</p>\n<p>​    两个参数：文件路径、回调函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.readFile(<span class=\"hljs-string\">&#x27;文件路径&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,data</span>)=&gt;</span>&#123;&#125;)<span class=\"hljs-comment\">//异步</span><br><span class=\"hljs-keyword\">var</span> data=fs.readFileSync(<span class=\"hljs-string\">&quot;文件路径&quot;</span>，<span class=\"hljs-string\">&quot;编码方式&quot;</span>)；<span class=\"hljs-comment\">//同步读取文件</span><br><br></code></pre></td></tr></table></figure>\n\n<p>读取文件的相对地址：参照物不是当前文件，而是node的启动路径。</p>\n<p>写入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.writeFile(<span class=\"hljs-string\">&quot;文件路径&quot;</span>,<span class=\"hljs-string\">&quot;写入内容&quot;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<span class=\"hljs-comment\">//覆盖之前内容</span><br>fs.writeFileSync()<br><br></code></pre></td></tr></table></figure>\n\n<p>追加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.appendFile(<span class=\"hljs-string\">&quot;文件路径&quot;</span>,<span class=\"hljs-string\">&quot;写入内容&quot;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br>fs.appendFileSync(path,data)<br><br></code></pre></td></tr></table></figure>\n\n<p>异步通过err形参接收错误信息</p>\n<p>同步如果发生错误直接报异常，程序可能中断</p>\n<p>写入文件的方法，当文件名不存在的时候，会自动创建文件，如果文件夹也不存在会报错</p>\n<p>修改文件方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.rename(<span class=\"hljs-string\">&#x27;oldpath&#x27;</span>,<span class=\"hljs-string\">&#x27;newpath&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br>fs.renameSync(<span class=\"hljs-string\">&quot;oldpath&quot;</span>,<span class=\"hljs-string\">&quot;newpath&quot;</span>)<br><br></code></pre></td></tr></table></figure>\n\n<p>删除文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.unlink(path,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br>fs.unlinkSync(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br><br></code></pre></td></tr></table></figure>\n\n<p>创建文件夹</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.mkdir(path,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>读取目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.readdir(path,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,files</span>)=&gt;</span>&#123;&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>删除目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.rmdir(path,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>读取文件流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><span class=\"hljs-comment\">//对于某个文件创建一个读取流</span><br><span class=\"hljs-keyword\">var</span> readStream = fs.createReadStream(<span class=\"hljs-string\">&quot;fs.js&quot;</span>);<br><span class=\"hljs-comment\">//设置读取流的编码</span><br>readStream.setEncoding(<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>);<br><span class=\"hljs-comment\">//绑定一个事件（data事件名）</span><br><span class=\"hljs-comment\">//data这个事件，每次读取一个小块内容的时候，都会触发data事件；</span><br><span class=\"hljs-comment\">//在回调函数中，能够设置一个形参chunk，接收每次读取那一小块内容；</span><br><span class=\"hljs-keyword\">var</span> data = <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-number\">0</span>;<br>readStream.on(<span class=\"hljs-string\">&quot;data&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> &#123;<br>    data += chunk;<br>    <span class=\"hljs-built_in\">console</span>.log(++index);<br>&#125;)<br><span class=\"hljs-comment\">//end事件代表所有内容读取完成</span><br>readStream.on(<span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">//这里代表data里面才是完整的数据</span><br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>写入文件流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><span class=\"hljs-keyword\">var</span> writeStream = fs.createWriteStream(<span class=\"hljs-string\">&quot;fs1.txt&quot;</span>);<br>writeStream.write(<span class=\"hljs-string\">&quot;aaaaaaa&quot;</span>, <span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>writeStream.write(<span class=\"hljs-string\">&quot;bbbbbbb&quot;</span>, <span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>writeStream.end();<br>writeStream.on(<span class=\"hljs-string\">&quot;finish&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;finish&quot;</span>);<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>管道流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><span class=\"hljs-keyword\">var</span> readS = fs.createReadStream(<span class=\"hljs-string\">&quot;fs.txt&quot;</span>);<br><span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">&quot;fs1.txt&quot;</span>);<br>readS.pipe(ws);<span class=\"hljs-comment\">//把读取流和写入流连接起来，把读取的内容直接写入fs1.txt</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"web应用架构\"><a href=\"#web应用架构\" class=\"headerlink\" title=\"web应用架构\"></a>web应用架构</h2><p>client-客户端，一般指浏览器，浏览器可以通过http协议向服务器请求数据。</p>\n<p>server-服务端，一般指web服务器，可以接收客户请求，并向客户端发送响应数据。</p>\n<h5 id=\"http-server\"><a href=\"#http-server\" class=\"headerlink\" title=\"http server\"></a>http server</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//支持web服务的http</span><br><br>*<span class=\"hljs-keyword\">const</span>* http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;http&#x27;</span>)<br><br>*<span class=\"hljs-keyword\">let</span>* count=<span class=\"hljs-number\">0</span><br><br><span class=\"hljs-comment\">//创建一个服务,如果有url访问到了这个服务，回调函数执行</span><br><br><span class=\"hljs-comment\">// 回调函数中，第一个形参request代表的是请求对象，里面存放了请求信息</span><br><br><span class=\"hljs-comment\">// 第二个参数response：响应对象</span><br><br>*<span class=\"hljs-keyword\">var</span>* serve=http.createServer((*request*,*response*)*=&gt;*&#123;<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;有人访问&#x27;</span>+(++count))<br><br>  <span class=\"hljs-comment\">//设置响应头；200是成功 编码 类型</span><br><br>  *response*.writeHead(<span class=\"hljs-number\">200</span>,&#123;<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>:<span class=\"hljs-string\">&#x27;text/html;charset=utf-8&#x27;</span>&#125;)<br><br>  <span class=\"hljs-comment\">// 响应对象中添加数据</span><br><br>  *response*.write(<span class=\"hljs-string\">&#x27;我是相应内容&#x27;</span>,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>)<br><br>  <span class=\"hljs-comment\">// 结束</span><br><br>  *response*.end()<br><br>&#125;)<br><br><span class=\"hljs-comment\">// 把服务监听3000端口</span><br><br>serve.listen(<span class=\"hljs-string\">&#x27;3000&#x27;</span>,(*err*)*=&gt;*&#123;<br><br>  <span class=\"hljs-keyword\">if</span>(*err*) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">console</span>.log(*err*)<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;serve listen at 3000&#x27;</span>)<br><br>&#125;)<br><br><span class=\"hljs-comment\">// url ：http：协议</span><br><br><span class=\"hljs-comment\">// 域名：或者 ip DFS服务器</span><br><br><span class=\"hljs-comment\">// 端口：80默认</span><br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h5><p>http域名或者IP</p>\n<p>端口号</p>\n<p>相对路径</p>\n<h5 id=\"nodejs-http-server\"><a href=\"#nodejs-http-server\" class=\"headerlink\" title=\"nodejs http server\"></a>nodejs http server</h5><p>加载http包</p>\n<p>http.createServer((request,response)=&gt;{</p>\n<p>回调函数</p>\n<p>request：请求对象</p>\n<p>response：响应对象</p>\n<p>server.listen(‘3000’)</p>\n<p>})</p>\n<h5 id=\"http工作原理-过程\"><a href=\"#http工作原理-过程\" class=\"headerlink\" title=\"http工作原理  (过程)\"></a>http工作原理  (过程)</h5><ul>\n<li><p>1  客户端连接到web服务器</p>\n</li>\n<li><p>2  发送http请求</p>\n</li>\n<li><p>3   服务器接收解释请求并返回http响应</p>\n</li>\n<li><p>4  释放连接tcp连接</p>\n</li>\n</ul>\n<h5 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h5><ul>\n<li>专注于文件路径</li>\n</ul>\n<h5 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h5><ul>\n<li>专注于处理url地址</li>\n</ul>\n<h5 id=\"querystring\"><a href=\"#querystring\" class=\"headerlink\" title=\"querystring\"></a>querystring</h5><ul>\n<li>专注于url中使用get请求后面解析参数</li>\n</ul>\n<h5 id=\"解析url\"><a href=\"#解析url\" class=\"headerlink\" title=\"解析url\"></a>解析url</h5><blockquote>\n<p>new  URL(request.url,’http://${request.headers.host}’)</p>\n</blockquote>\n<h5 id=\"get-set\"><a href=\"#get-set\" class=\"headerlink\" title=\"get   set\"></a>get   set</h5><ul>\n<li>get 参数，是拼接在url后面；post参数body</li>\n<li>浏览器地址栏中访问的url</li>\n</ul>\n<h5 id=\"nodejs区分get-post\"><a href=\"#nodejs区分get-post\" class=\"headerlink\" title=\"nodejs区分get post\"></a>nodejs区分get post</h5><p>request.method</p>\n<p>nodejs 从get  post  获取参数数据</p>\n<ul>\n<li>get  获取参数  分析url  </li>\n<li>post获取参数</li>\n</ul>\n<h5 id=\"创建express项目\"><a href=\"#创建express项目\" class=\"headerlink\" title=\"创建express项目\"></a>创建express项目</h5><ul>\n<li>安装一个创建express项目的工具（express生成器）–express-generator</li>\n</ul>\n<p>安装命令：</p>\n<blockquote>\n<p>npm install express-generator -g</p>\n</blockquote>\n<p>全局安装：</p>\n<ul>\n<li>使用这个工具生成一个express项目</li>\n</ul>\n<p>命令是：</p>\n<blockquote>\n<p>express –view=ejs myprogramName </p>\n</blockquote>\n<ul>\n<li><p>myprogramName是项目的名字</p>\n</li>\n<li><p>–view=ejs 设置项目的页面使用的模板引擎；设置模版引擎为ejs pug</p>\n</li>\n<li><p>创建完成项目文件之后； </p>\n</li>\n<li><p>cd myprogramName 命令窗口前面的路径定位到项目文件</p>\n</li>\n<li><p>D:\\work\\Lesson\\202002\\2-165\\Day08\\my1</p>\n</li>\n</ul>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<p>会在my1这个文件夹下寻找package.json，获取dependencies里面的包；并且全部安装；</p>\n<ul>\n<li>启动项目</li>\n</ul>\n<blockquote>\n<p>SET DEBUG=my1:* &amp; npm start</p>\n</blockquote>\n<ul>\n<li>默认是在3000端口号： localhost:3000 127.0.0.1:3000</li>\n</ul>\n<h5 id=\"项目文件：\"><a href=\"#项目文件：\" class=\"headerlink\" title=\"项目文件：\"></a>项目文件：</h5><ul>\n<li><p>bin/www 可以修改服务的端口号：</p>\n</li>\n<li><p>node_modules 所有局部安装的包</p>\n</li>\n<li><p>pulic 存放静态文件的；</p>\n</li>\n<li><p>routes 路由</p>\n</li>\n<li><p>views 页面</p>\n</li>\n<li><p>app.js 启动js</p>\n</li>\n<li><p>package.json npm配置文件</p>\n</li>\n</ul>\n<p>npm i 就是安装的dependencies下的包</p>\n<p>npm start 就是运行的scripts下面start命令</p>\n<h5 id=\"app-js-文件\"><a href=\"#app-js-文件\" class=\"headerlink\" title=\"app.js 文件\"></a>app.js 文件</h5><h5 id=\"路由：\"><a href=\"#路由：\" class=\"headerlink\" title=\"路由：\"></a>路由：</h5><ul>\n<li><p>在routes文件夹下 写路由文件</p>\n</li>\n<li><p>app.js中启用路由：</p>\n</li>\n</ul>\n<h5 id=\"响应返回页面\"><a href=\"#响应返回页面\" class=\"headerlink\" title=\"响应返回页面\"></a>响应返回页面</h5><p>在路由中，使用res.render(“list”)；</p>\n<p>-页面必须放在views下；而且后缀名必须是.ejs</p>\n<h5 id=\"怎么获取url传递的数据：\"><a href=\"#怎么获取url传递的数据：\" class=\"headerlink\" title=\"怎么获取url传递的数据：\"></a>怎么获取url传递的数据：</h5><ul>\n<li><p>get 参数: 在路由 req.query 属性，存放了所有get请求的参数：</p>\n</li>\n<li><p>post 数据 req.body 存储</p>\n</li>\n</ul>\n<h5 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h5><p>req.params</p>\n<h5 id=\"路由的路径是可以用正则表达式\"><a href=\"#路由的路径是可以用正则表达式\" class=\"headerlink\" title=\"路由的路径是可以用正则表达式\"></a>路由的路径是可以用正则表达式</h5><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><ul>\n<li><p>npm i express-generator -g 如果安装过了，不用再安装</p>\n</li>\n<li><p>生成一个项目</p>\n</li>\n</ul>\n<blockquote>\n<p>express –view=ejs xiaou</p>\n</blockquote>\n<blockquote>\n<p>cd xiaou</p>\n</blockquote>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<blockquote>\n<p>npm start</p>\n</blockquote>\n<ul>\n<li><p>把index.html复制到views，并且要ejs后缀；</p>\n</li>\n<li><p>设计一个路由： 设计url地址；访问这个url，</p>\n</li>\n<li><p>routes文件夹下创建一个新的路由文件index.js</p>\n</li>\n</ul>\n<h5 id=\"node-js-1\"><a href=\"#node-js-1\" class=\"headerlink\" title=\"node.js\"></a>node.js</h5><ul>\n<li>单线程</li>\n<li>非阻塞</li>\n<li>事件驱动</li>\n</ul>\n<h5 id=\"模块化commonJS\"><a href=\"#模块化commonJS\" class=\"headerlink\" title=\"模块化commonJS\"></a>模块化commonJS</h5><ul>\n<li>定义模块：</li>\n</ul>\n<p>modules.exporys{}</p>\n<p>modules.exporys.xxx=xx</p>\n<p>exports.xxx=xx</p>\n<ul>\n<li>加载模块：</li>\n</ul>\n<p>通过js（模块）的加载路径：</p>\n<p>const mymoudule=require(‘模块’)</p>\n<p>通过js（模块）的标识：核心模块（nodejs自带的    ）</p>\n<p>const http=require(‘http’)</p>\n<h5 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h5><ul>\n<li>初始化</li>\n<li>绑定事件</li>\n<li>触发事件</li>\n<li>传值：</li>\n</ul>\n<h5 id=\"npm-1\"><a href=\"#npm-1\" class=\"headerlink\" title=\"npm\"></a>npm</h5><ul>\n<li>包：</li>\n<li>全局安装    -g   本地安装</li>\n<li>依赖   和   开发依赖：</li>\n</ul>\n<p>依赖：express   简写–save    -S</p>\n<p>开发依赖：less  简写  –save-dev   -D</p>\n<h5 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h5><h5 id=\"nodejs-http\"><a href=\"#nodejs-http\" class=\"headerlink\" title=\"nodejs  http\"></a>nodejs  http</h5><ul>\n<li><p><a href=\"http://www.ddd.com/\">http://www.ddd.com:80</a>   默认是80</p>\n<h5 id=\"http四个步骤：\"><a href=\"#http四个步骤：\" class=\"headerlink\" title=\"http四个步骤：\"></a>http四个步骤：</h5><ul>\n<li>客户端向服务端发起的连接</li>\n<li>客户端向服务器发送的数据</li>\n<li>服务器响应客户端</li>\n<li>客户端结束连接</li>\n</ul>\n<h5 id=\"nodejs下的一些小模块\"><a href=\"#nodejs下的一些小模块\" class=\"headerlink\" title=\"nodejs下的一些小模块\"></a>nodejs下的一些小模块</h5><ul>\n<li>path</li>\n<li>url</li>\n<li>queryString</li>\n</ul>\n<h5 id=\"express\"><a href=\"#express\" class=\"headerlink\" title=\"express\"></a>express</h5><p>基于nodejs的一个web开发框架：</p>\n<h5 id=\"创建esperss项目的步骤\"><a href=\"#创建esperss项目的步骤\" class=\"headerlink\" title=\"创建esperss项目的步骤\"></a>创建esperss项目的步骤</h5><ul>\n<li>全局安装espress项目生成器</li>\n</ul>\n</li>\n</ul>\n<p>命令：npm i express-generator -g</p>\n<p>创建express项目的基础框架</p>\n<blockquote>\n<p>express –view=ejs xiaou</p>\n</blockquote>\n<blockquote>\n<p>cd xiaou</p>\n</blockquote>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<blockquote>\n<p>npm start</p>\n</blockquote>\n<h5 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h5><p>在routes创建新的路由文件product.js</p>\n<p>路由地址的匹配</p>\n<p>正则</p>\n<p>动态路由</p>\n<h5 id=\"路由返回数据\"><a href=\"#路由返回数据\" class=\"headerlink\" title=\"路由返回数据\"></a>路由返回数据</h5><ul>\n<li>字符串：res.send()</li>\n<li>页面：res.render(‘文件路径’)；文件夹是是固定的views文件夹</li>\n<li>json  res.json({})</li>\n</ul>\n<h5 id=\"中间件：\"><a href=\"#中间件：\" class=\"headerlink\" title=\"中间件：\"></a>中间件：</h5><p>每个请求都会经过中间件的检查过滤</p>\n<p>1、中间件就是一种功能的封装方式，就是封装在程序中处理http请求的功能，  </p>\n<p>2、中间件是在管道中执行</p>\n<p>3、中间件有一个next()函数，如果不调用next函数，请求就在这个中间件中终止了，</p>\n<p>4、中间件和路由处理器的参数中都有回调函数，这个函数有2,3,4个参数</p>\n<p>如果有两个参数就是req和res；</p>\n<p>如果有三个参数就是req,res和next</p>\n<p>如果有四个参数就是err，req，res，next</p>\n<p>5、如果不调用next ，管道就会终止，不会再有处理器做后续响应，应该向客户端发送一个响应</p>\n<p>6、如果调用了next，不应该发送响应到客户端，如果发送了，则后面发送的响应都会被忽略</p>\n<p>7、中间件的第一个参数可以是路径，如果忽略则全部都匹配</p>\n<h5 id=\"ejs\"><a href=\"#ejs\" class=\"headerlink\" title=\"ejs\"></a>ejs</h5><p>res.render(‘页面的相对路径‘，data)  第二个参数是数据。传递给页面    的数据</p>\n<p>第二个参数是传递给页面中的模板引擎数据</p>\n<p>模板引擎中的语法</p>\n<p>&lt;%# 注释%&gt;</p>\n<h5 id=\"art-template-模板引擎\"><a href=\"#art-template-模板引擎\" class=\"headerlink\" title=\"art -template  模板引擎\"></a>art -template  模板引擎</h5><ul>\n<li><p>espress项目中，使用arttemplate模板引擎</p>\n</li>\n<li><p>安装arttemplate包和express下的支持包</p>\n</li>\n<li><p>npm  i art - template  -S</p>\n</li>\n<li><p>npm  i express-art - template  -S</p>\n</li>\n</ul>\n<h2 id=\"MySql\"><a href=\"#MySql\" class=\"headerlink\" title=\"MySql\"></a>MySql</h2><ul>\n<li>数据库：存储文件：</li>\n<li>MySQl:服务类的程序：</li>\n</ul>\n<h3 id=\"常见数据库\"><a href=\"#常见数据库\" class=\"headerlink\" title=\"常见数据库\"></a>常见数据库</h3><ul>\n<li>Oracle</li>\n<li>mysql</li>\n<li>ms sql server</li>\n<li>mongodb</li>\n</ul>\n<h3 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h3><ul>\n<li>关系数据库</li>\n<li>非关系数据库</li>\n</ul>\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><ul>\n<li>第一范式（1NF）：要求数据库表的每一列都是不可分割的原子数据项</li>\n<li>第二范式（2NF）：在1NF的基础上，非主键属性必须完全依赖于主键</li>\n<li>第三范式（3NF）：在2NF基础上，任何非主键属性不依赖于其它非主键属性（在2NF基础上消除传递依赖）</li>\n<li>反范式：</li>\n</ul>\n<h3 id=\"mysql-语法：sql语法\"><a href=\"#mysql-语法：sql语法\" class=\"headerlink\" title=\"mysql 语法：sql语法\"></a>mysql 语法：sql语法</h3><ul>\n<li>DDL  DML</li>\n</ul>\n<h3 id=\"数据库：database\"><a href=\"#数据库：database\" class=\"headerlink\" title=\"数据库：database\"></a>数据库：database</h3><pre><code>-   创建数据库：\n&gt;create database if not exists xiaou ;</code></pre>\n<h3 id=\"表：table\"><a href=\"#表：table\" class=\"headerlink\" title=\"表：table\"></a>表：table</h3><ul>\n<li>创建表：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> (<br>  <span class=\"hljs-string\">`cardid`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`name`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`age`</span> <span class=\"hljs-built_in\">INT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`address`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`height`</span> <span class=\"hljs-built_in\">FLOAT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`createby`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`createtime`</span> <span class=\"hljs-built_in\">DATE</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`updateby`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`updatetime`</span> <span class=\"hljs-built_in\">DATE</span> <span class=\"hljs-literal\">NULL</span>,<br>  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`cardid`</span>));<br><br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>修改表：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> <br><span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">COLUMN</span> <span class=\"hljs-string\">`disc`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-string\">`tel`</span>;<br><br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> <br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">COLUMN</span> <span class=\"hljs-string\">`disc`</span>;<br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除表、删除数据库\"><a href=\"#删除表、删除数据库\" class=\"headerlink\" title=\"删除表、删除数据库\"></a>删除表、删除数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">table</span> stud;<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">database</span> ujiuye;<br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"中文：\"><a href=\"#中文：\" class=\"headerlink\" title=\"中文：\"></a>中文：</h3><p>修改字段编码为urf8  ;utf8-general-ci;</p>\n<h3 id=\"插入数据：\"><a href=\"#插入数据：\" class=\"headerlink\" title=\"插入数据：\"></a>插入数据：</h3><ul>\n<li><p>insert into </p>\n</li>\n<li><p>格式<br><strong>全部列添加数据：</strong><br>insert into table_name (id,name,age,<code>drop</code>) values(10,’zs’,100,’eer’);<br>如果对所有的列添加数据： 前面的（列名、）是可以省略的；<br>insert into table_name values(10,’zs’,100,’eer’);</p>\n</li>\n</ul>\n<p><strong>部分列添加数据：</strong><br>insert into table_name (id,name) values(10,’zs’);</p>\n<h3 id=\"修改数据：\"><a href=\"#修改数据：\" class=\"headerlink\" title=\"修改数据：\"></a>修改数据：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">update</span> xiaou.user <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">name</span>=<span class=\"hljs-string\">&#x27;zs2000&#x27;</span>,age=<span class=\"hljs-number\">2000</span> <span class=\"hljs-keyword\">where</span> address=<span class=\"hljs-string\">&#x27;上海&#x27;</span>;<br><br><br></code></pre></td></tr></table></figure>\n\n","more":"<p><img src=\"https://images.weserv.nl/?url=https://gitee.com/cocacolalc/imgs-hexo/raw/master/img/photo-1625051939433-b1291104952c.jpg\" alt=\"img\"></p>\n<h1 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node js\"></a>node js</h1><p>nodejs是基于google v8引擎，在服务器端支持javascript的一种运行环境。</p>\n<p>特点：单线程、非阻塞I/O、事件驱动</p>\n<h4 id=\"node运行js文件的路径：\"><a href=\"#node运行js文件的路径：\" class=\"headerlink\" title=\"node运行js文件的路径：\"></a>node运行js文件的路径：</h4><p>相对路径：node命令前面的路径（运行路径）</p>\n<p>绝对路径        </p>\n<h4 id=\"顶层对象\"><a href=\"#顶层对象\" class=\"headerlink\" title=\"顶层对象\"></a>顶层对象</h4><p>浏览器里是window，node里是global，ES6中提到同义顶层对象用globalThis，</p>\n<p>ES6中将顶层对象的属性与全局变量逐步脱钩。</p>\n<h4 id=\"默认的全局变量\"><a href=\"#默认的全局变量\" class=\"headerlink\" title=\"默认的全局变量\"></a>默认的全局变量</h4><p>__filename当前js文件带有完整绝对路径的文件名</p>\n<p>__dirname获得当前执行文件所在目录的完整目录名</p>\n<h4 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h4><p>Buffer 被引入用以帮助开发者处理二进制数据，在此生态系统中传统上只处理字符串而不是二进制数据。</p>\n<p>1、指定大小：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> buffer=Buffer.alloc(<span class=\"hljs-number\">20</span>);<span class=\"hljs-comment\">//length</span><br><span class=\"hljs-comment\">//&lt;Buffer 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>2、</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> buf2=Buffer.from(<span class=\"hljs-string\">&quot;this is buffer&quot;</span>);<span class=\"hljs-comment\">//string</span><br><span class=\"hljs-comment\">//&lt;Buffer 74 68 69 73 20 69 73 20 62 75 66 66 65 72&gt;</span><br><span class=\"hljs-keyword\">var</span> s=buf2.toString(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br><span class=\"hljs-comment\">//this is buffer</span><br>buf2.write();<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h4><p>多个js文件的引用方式。</p>\n<p>模块：按照特定的格式写出来的js文件。</p>\n<p>特定的格式：为了引用，模块化规范。</p>\n<p>nodejs里用的是commonjs规范。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sub</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-built_in\">module</span>.exports=&#123;sum,sub&#125;;<span class=\"hljs-comment\">//导出</span><br><span class=\"hljs-built_in\">exports</span>.sum=sum;<span class=\"hljs-comment\">//exports只能用这种方式</span><br><br><br><span class=\"hljs-comment\">//引用</span><br><span class=\"hljs-keyword\">let</span> &#123;sum,sub&#125;=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;路径&quot;</span>);<br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"事件模块\"><a href=\"#事件模块\" class=\"headerlink\" title=\"事件模块\"></a>事件模块</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//内置模块http、fs、events，核心模块</span><br><span class=\"hljs-keyword\">let</span> http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;http&quot;</span>);<br><span class=\"hljs-keyword\">let</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><br><br><span class=\"hljs-comment\">//events是内置的处理事件的模块 EventEmitter</span><br><span class=\"hljs-comment\">//events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。</span><br><span class=\"hljs-comment\">//1、加载事件模块</span><br><span class=\"hljs-keyword\">let</span> EventEmitter=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;events&quot;</span>).EventEmitter;<br><span class=\"hljs-number\">2</span>、实例化一个事件对象<br><span class=\"hljs-keyword\">let</span> event=<span class=\"hljs-keyword\">new</span> EventEmitter();<br><span class=\"hljs-comment\">//3、实例提供里两个方法：</span><br>event.on(<span class=\"hljs-string\">&quot;event1&quot;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>)=&gt;</span>&#123;<span class=\"hljs-comment\">//为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。</span><br>  <span class=\"hljs-built_in\">console</span>.log(args)；<br>&#125;)<br><span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    event.emit(<span class=\"hljs-string\">&quot;event1&quot;</span>,<span class=\"hljs-string\">&quot;a&quot;</span>,<span class=\"hljs-string\">&quot;b&quot;</span>,<span class=\"hljs-string\">&quot;c&quot;</span>)<span class=\"hljs-comment\">//触发事件emit(event, [arg1], [arg2], [...])</span><br>&#125;, <span class=\"hljs-number\">1000</span>)<br>event.addListener(<span class=\"hljs-string\">&#x27;event1&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)<br>&#125;)<br>event.on(<span class=\"hljs-string\">&quot;e2&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    event.removeAllListeners(<span class=\"hljs-string\">&#x27;event1&#x27;</span>)<span class=\"hljs-comment\">//只清除一个event.removeListener(&#x27;event1&#x27;,fn)</span><br>&#125;)<br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    event.emit(<span class=\"hljs-string\">&#x27;e2&#x27;</span>)<br>&#125;,<span class=\"hljs-number\">4000</span>)<br><span class=\"hljs-comment\">//实例event提供的方法：</span><br>on(event,函数名)<span class=\"hljs-comment\">//绑定</span><br>addListener(event,函数名)<span class=\"hljs-comment\">//添加</span><br>once(event,函数名)<span class=\"hljs-comment\">//只一次</span><br>removeListener(event,函数名)<span class=\"hljs-comment\">//移除</span><br><span class=\"hljs-comment\">//移除某个监听函数，必须在添加监视的时候，是通过函数名添加，如果是一个匿名函数添加监听不能移除</span><br>removeAllListeners(event)<span class=\"hljs-comment\">//移除所有</span><br>emit(event, [arg1], [arg2], [...])<span class=\"hljs-comment\">//触发</span><br><br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h4><p>模块：按照CommonJS规范写的js文件；</p>\n<p>包：包含js文件和其他附带信息的整体；</p>\n<p>npm：包的管理工具：</p>\n<p>​    1、根据包的名字，下载并按照npmjs.com</p>\n<p>​    2、解决了包之间的依赖关系</p>\n<p>命令</p>\n<p>​    安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">npm install 包<br><br><span class=\"hljs-keyword\">let</span> x=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;包&#x27;</span>)<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Nodejs的文件系统\"><a href=\"#Nodejs的文件系统\" class=\"headerlink\" title=\"Nodejs的文件系统\"></a>Nodejs的文件系统</h4><p>读取文件信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> fs=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br>fs.stat(<span class=\"hljs-string\">&quot;文件路径&quot;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,stats</span>)=&gt;</span>&#123;<br>  <span class=\"hljs-keyword\">if</span>(err)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;错误&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(stats.isFile()) <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;这是文件&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span>(stats.isDirectory()) <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;这是文件夹&quot;</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(stats)<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>读取文件内容</p>\n<p>​    两个参数：文件路径、回调函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.readFile(<span class=\"hljs-string\">&#x27;文件路径&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,data</span>)=&gt;</span>&#123;&#125;)<span class=\"hljs-comment\">//异步</span><br><span class=\"hljs-keyword\">var</span> data=fs.readFileSync(<span class=\"hljs-string\">&quot;文件路径&quot;</span>，<span class=\"hljs-string\">&quot;编码方式&quot;</span>)；<span class=\"hljs-comment\">//同步读取文件</span><br><br></code></pre></td></tr></table></figure>\n\n<p>读取文件的相对地址：参照物不是当前文件，而是node的启动路径。</p>\n<p>写入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.writeFile(<span class=\"hljs-string\">&quot;文件路径&quot;</span>,<span class=\"hljs-string\">&quot;写入内容&quot;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<span class=\"hljs-comment\">//覆盖之前内容</span><br>fs.writeFileSync()<br><br></code></pre></td></tr></table></figure>\n\n<p>追加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.appendFile(<span class=\"hljs-string\">&quot;文件路径&quot;</span>,<span class=\"hljs-string\">&quot;写入内容&quot;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br>fs.appendFileSync(path,data)<br><br></code></pre></td></tr></table></figure>\n\n<p>异步通过err形参接收错误信息</p>\n<p>同步如果发生错误直接报异常，程序可能中断</p>\n<p>写入文件的方法，当文件名不存在的时候，会自动创建文件，如果文件夹也不存在会报错</p>\n<p>修改文件方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.rename(<span class=\"hljs-string\">&#x27;oldpath&#x27;</span>,<span class=\"hljs-string\">&#x27;newpath&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br>fs.renameSync(<span class=\"hljs-string\">&quot;oldpath&quot;</span>,<span class=\"hljs-string\">&quot;newpath&quot;</span>)<br><br></code></pre></td></tr></table></figure>\n\n<p>删除文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.unlink(path,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br>fs.unlinkSync(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br><br></code></pre></td></tr></table></figure>\n\n<p>创建文件夹</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.mkdir(path,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>读取目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.readdir(path,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,files</span>)=&gt;</span>&#123;&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>删除目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.rmdir(path,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>读取文件流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><span class=\"hljs-comment\">//对于某个文件创建一个读取流</span><br><span class=\"hljs-keyword\">var</span> readStream = fs.createReadStream(<span class=\"hljs-string\">&quot;fs.js&quot;</span>);<br><span class=\"hljs-comment\">//设置读取流的编码</span><br>readStream.setEncoding(<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>);<br><span class=\"hljs-comment\">//绑定一个事件（data事件名）</span><br><span class=\"hljs-comment\">//data这个事件，每次读取一个小块内容的时候，都会触发data事件；</span><br><span class=\"hljs-comment\">//在回调函数中，能够设置一个形参chunk，接收每次读取那一小块内容；</span><br><span class=\"hljs-keyword\">var</span> data = <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-number\">0</span>;<br>readStream.on(<span class=\"hljs-string\">&quot;data&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> &#123;<br>    data += chunk;<br>    <span class=\"hljs-built_in\">console</span>.log(++index);<br>&#125;)<br><span class=\"hljs-comment\">//end事件代表所有内容读取完成</span><br>readStream.on(<span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">//这里代表data里面才是完整的数据</span><br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>写入文件流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><span class=\"hljs-keyword\">var</span> writeStream = fs.createWriteStream(<span class=\"hljs-string\">&quot;fs1.txt&quot;</span>);<br>writeStream.write(<span class=\"hljs-string\">&quot;aaaaaaa&quot;</span>, <span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>writeStream.write(<span class=\"hljs-string\">&quot;bbbbbbb&quot;</span>, <span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>writeStream.end();<br>writeStream.on(<span class=\"hljs-string\">&quot;finish&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;finish&quot;</span>);<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>管道流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);<br><span class=\"hljs-keyword\">var</span> readS = fs.createReadStream(<span class=\"hljs-string\">&quot;fs.txt&quot;</span>);<br><span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">&quot;fs1.txt&quot;</span>);<br>readS.pipe(ws);<span class=\"hljs-comment\">//把读取流和写入流连接起来，把读取的内容直接写入fs1.txt</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"web应用架构\"><a href=\"#web应用架构\" class=\"headerlink\" title=\"web应用架构\"></a>web应用架构</h2><p>client-客户端，一般指浏览器，浏览器可以通过http协议向服务器请求数据。</p>\n<p>server-服务端，一般指web服务器，可以接收客户请求，并向客户端发送响应数据。</p>\n<h5 id=\"http-server\"><a href=\"#http-server\" class=\"headerlink\" title=\"http server\"></a>http server</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//支持web服务的http</span><br><br>*<span class=\"hljs-keyword\">const</span>* http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;http&#x27;</span>)<br><br>*<span class=\"hljs-keyword\">let</span>* count=<span class=\"hljs-number\">0</span><br><br><span class=\"hljs-comment\">//创建一个服务,如果有url访问到了这个服务，回调函数执行</span><br><br><span class=\"hljs-comment\">// 回调函数中，第一个形参request代表的是请求对象，里面存放了请求信息</span><br><br><span class=\"hljs-comment\">// 第二个参数response：响应对象</span><br><br>*<span class=\"hljs-keyword\">var</span>* serve=http.createServer((*request*,*response*)*=&gt;*&#123;<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;有人访问&#x27;</span>+(++count))<br><br>  <span class=\"hljs-comment\">//设置响应头；200是成功 编码 类型</span><br><br>  *response*.writeHead(<span class=\"hljs-number\">200</span>,&#123;<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>:<span class=\"hljs-string\">&#x27;text/html;charset=utf-8&#x27;</span>&#125;)<br><br>  <span class=\"hljs-comment\">// 响应对象中添加数据</span><br><br>  *response*.write(<span class=\"hljs-string\">&#x27;我是相应内容&#x27;</span>,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>)<br><br>  <span class=\"hljs-comment\">// 结束</span><br><br>  *response*.end()<br><br>&#125;)<br><br><span class=\"hljs-comment\">// 把服务监听3000端口</span><br><br>serve.listen(<span class=\"hljs-string\">&#x27;3000&#x27;</span>,(*err*)*=&gt;*&#123;<br><br>  <span class=\"hljs-keyword\">if</span>(*err*) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">console</span>.log(*err*)<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;serve listen at 3000&#x27;</span>)<br><br>&#125;)<br><br><span class=\"hljs-comment\">// url ：http：协议</span><br><br><span class=\"hljs-comment\">// 域名：或者 ip DFS服务器</span><br><br><span class=\"hljs-comment\">// 端口：80默认</span><br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h5><p>http域名或者IP</p>\n<p>端口号</p>\n<p>相对路径</p>\n<h5 id=\"nodejs-http-server\"><a href=\"#nodejs-http-server\" class=\"headerlink\" title=\"nodejs http server\"></a>nodejs http server</h5><p>加载http包</p>\n<p>http.createServer((request,response)=&gt;{</p>\n<p>回调函数</p>\n<p>request：请求对象</p>\n<p>response：响应对象</p>\n<p>server.listen(‘3000’)</p>\n<p>})</p>\n<h5 id=\"http工作原理-过程\"><a href=\"#http工作原理-过程\" class=\"headerlink\" title=\"http工作原理  (过程)\"></a>http工作原理  (过程)</h5><ul>\n<li><p>1  客户端连接到web服务器</p>\n</li>\n<li><p>2  发送http请求</p>\n</li>\n<li><p>3   服务器接收解释请求并返回http响应</p>\n</li>\n<li><p>4  释放连接tcp连接</p>\n</li>\n</ul>\n<h5 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h5><ul>\n<li>专注于文件路径</li>\n</ul>\n<h5 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h5><ul>\n<li>专注于处理url地址</li>\n</ul>\n<h5 id=\"querystring\"><a href=\"#querystring\" class=\"headerlink\" title=\"querystring\"></a>querystring</h5><ul>\n<li>专注于url中使用get请求后面解析参数</li>\n</ul>\n<h5 id=\"解析url\"><a href=\"#解析url\" class=\"headerlink\" title=\"解析url\"></a>解析url</h5><blockquote>\n<p>new  URL(request.url,’http://${request.headers.host}’)</p>\n</blockquote>\n<h5 id=\"get-set\"><a href=\"#get-set\" class=\"headerlink\" title=\"get   set\"></a>get   set</h5><ul>\n<li>get 参数，是拼接在url后面；post参数body</li>\n<li>浏览器地址栏中访问的url</li>\n</ul>\n<h5 id=\"nodejs区分get-post\"><a href=\"#nodejs区分get-post\" class=\"headerlink\" title=\"nodejs区分get post\"></a>nodejs区分get post</h5><p>request.method</p>\n<p>nodejs 从get  post  获取参数数据</p>\n<ul>\n<li>get  获取参数  分析url  </li>\n<li>post获取参数</li>\n</ul>\n<h5 id=\"创建express项目\"><a href=\"#创建express项目\" class=\"headerlink\" title=\"创建express项目\"></a>创建express项目</h5><ul>\n<li>安装一个创建express项目的工具（express生成器）–express-generator</li>\n</ul>\n<p>安装命令：</p>\n<blockquote>\n<p>npm install express-generator -g</p>\n</blockquote>\n<p>全局安装：</p>\n<ul>\n<li>使用这个工具生成一个express项目</li>\n</ul>\n<p>命令是：</p>\n<blockquote>\n<p>express –view=ejs myprogramName </p>\n</blockquote>\n<ul>\n<li><p>myprogramName是项目的名字</p>\n</li>\n<li><p>–view=ejs 设置项目的页面使用的模板引擎；设置模版引擎为ejs pug</p>\n</li>\n<li><p>创建完成项目文件之后； </p>\n</li>\n<li><p>cd myprogramName 命令窗口前面的路径定位到项目文件</p>\n</li>\n<li><p>D:\\work\\Lesson\\202002\\2-165\\Day08\\my1</p>\n</li>\n</ul>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<p>会在my1这个文件夹下寻找package.json，获取dependencies里面的包；并且全部安装；</p>\n<ul>\n<li>启动项目</li>\n</ul>\n<blockquote>\n<p>SET DEBUG=my1:* &amp; npm start</p>\n</blockquote>\n<ul>\n<li>默认是在3000端口号： localhost:3000 127.0.0.1:3000</li>\n</ul>\n<h5 id=\"项目文件：\"><a href=\"#项目文件：\" class=\"headerlink\" title=\"项目文件：\"></a>项目文件：</h5><ul>\n<li><p>bin/www 可以修改服务的端口号：</p>\n</li>\n<li><p>node_modules 所有局部安装的包</p>\n</li>\n<li><p>pulic 存放静态文件的；</p>\n</li>\n<li><p>routes 路由</p>\n</li>\n<li><p>views 页面</p>\n</li>\n<li><p>app.js 启动js</p>\n</li>\n<li><p>package.json npm配置文件</p>\n</li>\n</ul>\n<p>npm i 就是安装的dependencies下的包</p>\n<p>npm start 就是运行的scripts下面start命令</p>\n<h5 id=\"app-js-文件\"><a href=\"#app-js-文件\" class=\"headerlink\" title=\"app.js 文件\"></a>app.js 文件</h5><h5 id=\"路由：\"><a href=\"#路由：\" class=\"headerlink\" title=\"路由：\"></a>路由：</h5><ul>\n<li><p>在routes文件夹下 写路由文件</p>\n</li>\n<li><p>app.js中启用路由：</p>\n</li>\n</ul>\n<h5 id=\"响应返回页面\"><a href=\"#响应返回页面\" class=\"headerlink\" title=\"响应返回页面\"></a>响应返回页面</h5><p>在路由中，使用res.render(“list”)；</p>\n<p>-页面必须放在views下；而且后缀名必须是.ejs</p>\n<h5 id=\"怎么获取url传递的数据：\"><a href=\"#怎么获取url传递的数据：\" class=\"headerlink\" title=\"怎么获取url传递的数据：\"></a>怎么获取url传递的数据：</h5><ul>\n<li><p>get 参数: 在路由 req.query 属性，存放了所有get请求的参数：</p>\n</li>\n<li><p>post 数据 req.body 存储</p>\n</li>\n</ul>\n<h5 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h5><p>req.params</p>\n<h5 id=\"路由的路径是可以用正则表达式\"><a href=\"#路由的路径是可以用正则表达式\" class=\"headerlink\" title=\"路由的路径是可以用正则表达式\"></a>路由的路径是可以用正则表达式</h5><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><ul>\n<li><p>npm i express-generator -g 如果安装过了，不用再安装</p>\n</li>\n<li><p>生成一个项目</p>\n</li>\n</ul>\n<blockquote>\n<p>express –view=ejs xiaou</p>\n</blockquote>\n<blockquote>\n<p>cd xiaou</p>\n</blockquote>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<blockquote>\n<p>npm start</p>\n</blockquote>\n<ul>\n<li><p>把index.html复制到views，并且要ejs后缀；</p>\n</li>\n<li><p>设计一个路由： 设计url地址；访问这个url，</p>\n</li>\n<li><p>routes文件夹下创建一个新的路由文件index.js</p>\n</li>\n</ul>\n<h5 id=\"node-js-1\"><a href=\"#node-js-1\" class=\"headerlink\" title=\"node.js\"></a>node.js</h5><ul>\n<li>单线程</li>\n<li>非阻塞</li>\n<li>事件驱动</li>\n</ul>\n<h5 id=\"模块化commonJS\"><a href=\"#模块化commonJS\" class=\"headerlink\" title=\"模块化commonJS\"></a>模块化commonJS</h5><ul>\n<li>定义模块：</li>\n</ul>\n<p>modules.exporys{}</p>\n<p>modules.exporys.xxx=xx</p>\n<p>exports.xxx=xx</p>\n<ul>\n<li>加载模块：</li>\n</ul>\n<p>通过js（模块）的加载路径：</p>\n<p>const mymoudule=require(‘模块’)</p>\n<p>通过js（模块）的标识：核心模块（nodejs自带的    ）</p>\n<p>const http=require(‘http’)</p>\n<h5 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h5><ul>\n<li>初始化</li>\n<li>绑定事件</li>\n<li>触发事件</li>\n<li>传值：</li>\n</ul>\n<h5 id=\"npm-1\"><a href=\"#npm-1\" class=\"headerlink\" title=\"npm\"></a>npm</h5><ul>\n<li>包：</li>\n<li>全局安装    -g   本地安装</li>\n<li>依赖   和   开发依赖：</li>\n</ul>\n<p>依赖：express   简写–save    -S</p>\n<p>开发依赖：less  简写  –save-dev   -D</p>\n<h5 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h5><h5 id=\"nodejs-http\"><a href=\"#nodejs-http\" class=\"headerlink\" title=\"nodejs  http\"></a>nodejs  http</h5><ul>\n<li><p><a href=\"http://www.ddd.com/\">http://www.ddd.com:80</a>   默认是80</p>\n<h5 id=\"http四个步骤：\"><a href=\"#http四个步骤：\" class=\"headerlink\" title=\"http四个步骤：\"></a>http四个步骤：</h5><ul>\n<li>客户端向服务端发起的连接</li>\n<li>客户端向服务器发送的数据</li>\n<li>服务器响应客户端</li>\n<li>客户端结束连接</li>\n</ul>\n<h5 id=\"nodejs下的一些小模块\"><a href=\"#nodejs下的一些小模块\" class=\"headerlink\" title=\"nodejs下的一些小模块\"></a>nodejs下的一些小模块</h5><ul>\n<li>path</li>\n<li>url</li>\n<li>queryString</li>\n</ul>\n<h5 id=\"express\"><a href=\"#express\" class=\"headerlink\" title=\"express\"></a>express</h5><p>基于nodejs的一个web开发框架：</p>\n<h5 id=\"创建esperss项目的步骤\"><a href=\"#创建esperss项目的步骤\" class=\"headerlink\" title=\"创建esperss项目的步骤\"></a>创建esperss项目的步骤</h5><ul>\n<li>全局安装espress项目生成器</li>\n</ul>\n</li>\n</ul>\n<p>命令：npm i express-generator -g</p>\n<p>创建express项目的基础框架</p>\n<blockquote>\n<p>express –view=ejs xiaou</p>\n</blockquote>\n<blockquote>\n<p>cd xiaou</p>\n</blockquote>\n<blockquote>\n<p>npm i </p>\n</blockquote>\n<blockquote>\n<p>npm start</p>\n</blockquote>\n<h5 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h5><p>在routes创建新的路由文件product.js</p>\n<p>路由地址的匹配</p>\n<p>正则</p>\n<p>动态路由</p>\n<h5 id=\"路由返回数据\"><a href=\"#路由返回数据\" class=\"headerlink\" title=\"路由返回数据\"></a>路由返回数据</h5><ul>\n<li>字符串：res.send()</li>\n<li>页面：res.render(‘文件路径’)；文件夹是是固定的views文件夹</li>\n<li>json  res.json({})</li>\n</ul>\n<h5 id=\"中间件：\"><a href=\"#中间件：\" class=\"headerlink\" title=\"中间件：\"></a>中间件：</h5><p>每个请求都会经过中间件的检查过滤</p>\n<p>1、中间件就是一种功能的封装方式，就是封装在程序中处理http请求的功能，  </p>\n<p>2、中间件是在管道中执行</p>\n<p>3、中间件有一个next()函数，如果不调用next函数，请求就在这个中间件中终止了，</p>\n<p>4、中间件和路由处理器的参数中都有回调函数，这个函数有2,3,4个参数</p>\n<p>如果有两个参数就是req和res；</p>\n<p>如果有三个参数就是req,res和next</p>\n<p>如果有四个参数就是err，req，res，next</p>\n<p>5、如果不调用next ，管道就会终止，不会再有处理器做后续响应，应该向客户端发送一个响应</p>\n<p>6、如果调用了next，不应该发送响应到客户端，如果发送了，则后面发送的响应都会被忽略</p>\n<p>7、中间件的第一个参数可以是路径，如果忽略则全部都匹配</p>\n<h5 id=\"ejs\"><a href=\"#ejs\" class=\"headerlink\" title=\"ejs\"></a>ejs</h5><p>res.render(‘页面的相对路径‘，data)  第二个参数是数据。传递给页面    的数据</p>\n<p>第二个参数是传递给页面中的模板引擎数据</p>\n<p>模板引擎中的语法</p>\n<p>&lt;%# 注释%&gt;</p>\n<h5 id=\"art-template-模板引擎\"><a href=\"#art-template-模板引擎\" class=\"headerlink\" title=\"art -template  模板引擎\"></a>art -template  模板引擎</h5><ul>\n<li><p>espress项目中，使用arttemplate模板引擎</p>\n</li>\n<li><p>安装arttemplate包和express下的支持包</p>\n</li>\n<li><p>npm  i art - template  -S</p>\n</li>\n<li><p>npm  i express-art - template  -S</p>\n</li>\n</ul>\n<h2 id=\"MySql\"><a href=\"#MySql\" class=\"headerlink\" title=\"MySql\"></a>MySql</h2><ul>\n<li>数据库：存储文件：</li>\n<li>MySQl:服务类的程序：</li>\n</ul>\n<h3 id=\"常见数据库\"><a href=\"#常见数据库\" class=\"headerlink\" title=\"常见数据库\"></a>常见数据库</h3><ul>\n<li>Oracle</li>\n<li>mysql</li>\n<li>ms sql server</li>\n<li>mongodb</li>\n</ul>\n<h3 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h3><ul>\n<li>关系数据库</li>\n<li>非关系数据库</li>\n</ul>\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><ul>\n<li>第一范式（1NF）：要求数据库表的每一列都是不可分割的原子数据项</li>\n<li>第二范式（2NF）：在1NF的基础上，非主键属性必须完全依赖于主键</li>\n<li>第三范式（3NF）：在2NF基础上，任何非主键属性不依赖于其它非主键属性（在2NF基础上消除传递依赖）</li>\n<li>反范式：</li>\n</ul>\n<h3 id=\"mysql-语法：sql语法\"><a href=\"#mysql-语法：sql语法\" class=\"headerlink\" title=\"mysql 语法：sql语法\"></a>mysql 语法：sql语法</h3><ul>\n<li>DDL  DML</li>\n</ul>\n<h3 id=\"数据库：database\"><a href=\"#数据库：database\" class=\"headerlink\" title=\"数据库：database\"></a>数据库：database</h3><pre><code>-   创建数据库：\n&gt;create database if not exists xiaou ;</code></pre>\n<h3 id=\"表：table\"><a href=\"#表：table\" class=\"headerlink\" title=\"表：table\"></a>表：table</h3><ul>\n<li>创建表：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> (<br>  <span class=\"hljs-string\">`cardid`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`name`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`age`</span> <span class=\"hljs-built_in\">INT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`address`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`height`</span> <span class=\"hljs-built_in\">FLOAT</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`createby`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`createtime`</span> <span class=\"hljs-built_in\">DATE</span> <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`updateby`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span>,<br>  <span class=\"hljs-string\">`updatetime`</span> <span class=\"hljs-built_in\">DATE</span> <span class=\"hljs-literal\">NULL</span>,<br>  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`cardid`</span>));<br><br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>修改表：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> <br><span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">COLUMN</span> <span class=\"hljs-string\">`disc`</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-string\">`tel`</span>;<br><br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`xiaou`</span>.<span class=\"hljs-string\">`user`</span> <br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">COLUMN</span> <span class=\"hljs-string\">`disc`</span>;<br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除表、删除数据库\"><a href=\"#删除表、删除数据库\" class=\"headerlink\" title=\"删除表、删除数据库\"></a>删除表、删除数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">table</span> stud;<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">database</span> ujiuye;<br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"中文：\"><a href=\"#中文：\" class=\"headerlink\" title=\"中文：\"></a>中文：</h3><p>修改字段编码为urf8  ;utf8-general-ci;</p>\n<h3 id=\"插入数据：\"><a href=\"#插入数据：\" class=\"headerlink\" title=\"插入数据：\"></a>插入数据：</h3><ul>\n<li><p>insert into </p>\n</li>\n<li><p>格式<br><strong>全部列添加数据：</strong><br>insert into table_name (id,name,age,<code>drop</code>) values(10,’zs’,100,’eer’);<br>如果对所有的列添加数据： 前面的（列名、）是可以省略的；<br>insert into table_name values(10,’zs’,100,’eer’);</p>\n</li>\n</ul>\n<p><strong>部分列添加数据：</strong><br>insert into table_name (id,name) values(10,’zs’);</p>\n<h3 id=\"修改数据：\"><a href=\"#修改数据：\" class=\"headerlink\" title=\"修改数据：\"></a>修改数据：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">update</span> xiaou.user <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">name</span>=<span class=\"hljs-string\">&#x27;zs2000&#x27;</span>,age=<span class=\"hljs-number\">2000</span> <span class=\"hljs-keyword\">where</span> address=<span class=\"hljs-string\">&#x27;上海&#x27;</span>;<br><br><br></code></pre></td></tr></table></figure>\n\n","categories":[],"tags":[]}