{"title":"vue源码理解——全局API篇","slug":"vue源码理解6","date":"2021-03-18T11:29:18.000Z","updated":"2021-04-25T06:57:22.307Z","comments":true,"path":"api/articles/vue源码理解6.json","excerpt":null,"covers":null,"cover":null,"content":"<h4 id=\"全局API\"><a href=\"#全局API\" class=\"headerlink\" title=\"全局API\"></a>全局API</h4><p>与实例方法不同，实例方法是将方法挂载到<code>Vue</code>的原型上，而全局API是直接在<code>Vue</code>上挂载方法。在<code>Vue</code>中，全局API一共有12个，分别是<code>Vue.extend</code>、<code>Vue.nextTick</code>、<code>Vue.set</code>、<code>Vue.delete</code>、<code>Vue.directive</code>、<code>Vue.filter</code>、<code>Vue.component</code>、<code>Vue.use</code>、<code>Vue.mixin</code>、<code>Vue.observable</code>、<code>Vue.version</code>。这12个API中有的是我们在日常业务开发中经常会用到的，有的是对<code>Vue</code>内部或外部插件提供的，我们在日常业务开发中几乎用不到。接下来我们就对这12个API逐个进行分析，看看其内部原理都是怎样的。</p>\n<h5 id=\"Vue-extend\"><a href=\"#Vue-extend\" class=\"headerlink\" title=\"Vue.extend\"></a>Vue.extend</h5><h6 id=\"用法回顾\"><a href=\"#用法回顾\" class=\"headerlink\" title=\"用法回顾\"></a>用法回顾</h6><p>其用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Vue.extend( options )<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>参数</strong>：</p>\n<ul>\n<li><code>&#123;Object&#125; options</code></li>\n</ul>\n</li>\n<li><p><strong>作用</strong>：</p>\n<p>使用基础 <code>Vue</code> 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</p>\n<p><code>data</code> 选项是特例，需要注意 - 在 <code>Vue.extend()</code> 中它必须是函数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mount-point&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 创建构造器</span><br><span class=\"hljs-keyword\">var</span> Profile = Vue.extend(&#123;<br>  template: <span class=\"hljs-string\">&#x27;&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;&#x27;</span>,<br>  data: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      firstName: <span class=\"hljs-string\">&#x27;Walter&#x27;</span>,<br>      lastName: <span class=\"hljs-string\">&#x27;White&#x27;</span>,<br>      alias: <span class=\"hljs-string\">&#x27;Heisenberg&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br><span class=\"hljs-comment\">// 创建 Profile 实例，并挂载到一个元素上。</span><br><span class=\"hljs-keyword\">new</span> Profile().$mount(<span class=\"hljs-string\">&#x27;##mount-point&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Walter White aka Heisenberg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h5 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h5><p>通过用法回顾我们知道，<code>Vue.extend</code>的作用是创建一个继承自<code>Vue</code>类的子类，可接收的参数是一个包含组件选项的对象。</p>\n<p>既然是<code>Vue</code>类的子类，那么除了它本身独有的一些属性方法，还有一些是从<code>Vue</code>类中继承而来，所以创建子类的过程其实就是一边给子类上添加上独有的属性，一边将父类的公共属性复制到子类上。接下来，我们就来看看源码是如何实现这个过程的。</p>\n<p>该API的定义位于源码的<code>src/core/global-api/extend.js</code>中，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Vue.extend = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">extendOptions: Object</span>): <span class=\"hljs-title\">Function</span> </span>&#123;<br>    extendOptions = extendOptions || &#123;&#125;<br>    <span class=\"hljs-keyword\">const</span> Super = <span class=\"hljs-built_in\">this</span><br>    <span class=\"hljs-keyword\">const</span> SuperId = Super.cid<br>    <span class=\"hljs-keyword\">const</span> cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = &#123;&#125;)<br>    <span class=\"hljs-keyword\">if</span> (cachedCtors[SuperId]) &#123;<br>        <span class=\"hljs-keyword\">return</span> cachedCtors[SuperId]<br>    &#125;<br><br>    <span class=\"hljs-keyword\">const</span> name = extendOptions.name || Super.options.name<br>    <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&#x27;production&#x27;</span> &amp;&amp; name) &#123;<br>        validateComponentName(name)<br>    &#125;<br><br>    <span class=\"hljs-keyword\">const</span> Sub = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">VueComponent</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br>        <span class=\"hljs-built_in\">this</span>._init(options)<br>    &#125;<br>    Sub.prototype = <span class=\"hljs-built_in\">Object</span>.create(Super.prototype)<br>    Sub.prototype.constructor = Sub<br>    Sub.cid = cid++<br>    Sub.options = mergeOptions(<br>        Super.options,<br>        extendOptions<br>    )<br>    Sub[<span class=\"hljs-string\">&#x27;super&#x27;</span>] = Super<br><br>    <span class=\"hljs-keyword\">if</span> (Sub.options.props) &#123;<br>        initProps(Sub)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (Sub.options.computed) &#123;<br>        initComputed(Sub)<br>    &#125;<br><br>    <span class=\"hljs-comment\">// allow further extension/mixin/plugin usage</span><br>    Sub.extend = Super.extend<br>    Sub.mixin = Super.mixin<br>    Sub.use = Super.use<br><br>    <span class=\"hljs-comment\">// create asset registers, so extended classes</span><br>    <span class=\"hljs-comment\">// can have their private assets too.</span><br>    ASSET_TYPES.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">type</span>) </span>&#123;<br>        Sub[type] = Super[type]<br>    &#125;)<br>    <span class=\"hljs-comment\">// enable recursive self-lookup</span><br>    <span class=\"hljs-keyword\">if</span> (name) &#123;<br>        Sub.options.components[name] = Sub<br>    &#125;<br><br>    Sub.superOptions = Super.options<br>    Sub.extendOptions = extendOptions<br>    Sub.sealedOptions = extend(&#123;&#125;, Sub.options)<br><br>    <span class=\"hljs-comment\">// cache constructor</span><br>    cachedCtors[SuperId] = Sub<br>    <span class=\"hljs-keyword\">return</span> Sub<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，虽然代码量稍微有点多，但是逻辑并不复杂，下面我们就来逐行分析一下。</p>\n<p>首先，该函数内部定义了几个变量，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">extendOptions = extendOptions || &#123;&#125;<br><span class=\"hljs-keyword\">const</span> Super = <span class=\"hljs-built_in\">this</span><br><span class=\"hljs-keyword\">const</span> SuperId = Super.cid<br><span class=\"hljs-keyword\">const</span> cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = &#123;&#125;)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>extendOptions：用户传入的一个包含组件选项的对象参数；</li>\n<li>Super：指向父类，即基础 <code>Vue</code>类；</li>\n<li>SuperId：父类的<code>cid</code>属性，无论是基础 <code>Vue</code>类还是从基础 <code>Vue</code>类继承而来的类，都有一个<code>cid</code>属性，作为该类的唯一标识；</li>\n<li>cachedCtors：缓存池，用于缓存创建出来的类；</li>\n</ul>\n<p>接着，在缓存池中先尝试获取是否之前已经创建过的该子类，如果之前创建过，则直接返回之前创建的。之所以有这一步，是因为<code>Vue</code>为了性能考虑，反复调用<code>Vue.extend</code>其实应该返回同一个结果，只要返回结果是固定的，就可以将结果缓存，再次调用时，只需从缓存中取出结果即可。在API方法定义的最后，当创建完子类后，会使用父类的<code>cid</code>作为<code>key</code>，创建好的子类作为<code>value</code>，存入缓存池<code>cachedCtors</code>中。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (cachedCtors[SuperId]) &#123;<br>    <span class=\"hljs-keyword\">return</span> cachedCtors[SuperId]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接着，获取到传入的选项参数中的<code>name</code>字段，并且在开发环境下校验<code>name</code>字段是否合法，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> name = extendOptions.name || Super.options.name<br><span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&#x27;production&#x27;</span> &amp;&amp; name) &#123;<br>    validateComponentName(name)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接着，创建一个类<code>Sub</code>，这个类就是将要继承基础<code>Vue</code>类的子类，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> Sub = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">VueComponent</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>._init(options)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>到这里，我们已经把类创建好了，接下来的工作就是让该类去继承基础<code>Vue</code>类，让其具备一些基础<code>Vue</code>类的能力。</p>\n<p>首先，将父类的原型继承到子类中，并且为子类添加唯一标识<code>cid</code>，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Sub.prototype = <span class=\"hljs-built_in\">Object</span>.create(Super.prototype)<br>Sub.prototype.constructor = Sub<br>Sub.cid = cid++<br></code></pre></td></tr></table></figure>\n\n<p>接着，将父类的<code>options</code>与子类的<code>options</code>进行合并，将合并结果赋给子类的<code>options</code>属性，如下：</p>\n<p>接着，将父类保存到子类的<code>super</code>属性中，以确保在子类中能够拿到父类，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Sub[<span class=\"hljs-string\">&#x27;super&#x27;</span>] = Super<br></code></pre></td></tr></table></figure>\n\n<p>接着，如果选项中存在<code>props</code>属性，则初始化它，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (Sub.options.props) &#123;<br>    initProps(Sub)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">initProps</span> (<span class=\"hljs-params\">Comp</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> props = Comp.options.props<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> props) &#123;<br>    proxy(Comp.prototype, <span class=\"hljs-string\">`_props`</span>, key)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>初始化<code>props</code>属性其实就是把参数中传入的<code>props</code>选项代理到原型的<code>_props</code>中。</p>\n<p>接着，如果选项中存在<code>computed</code>属性，则初始化它，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (Sub.options.computed) &#123;<br>    initComputed(Sub)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">initComputed</span> (<span class=\"hljs-params\">Comp</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> computed = Comp.options.computed<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> computed) &#123;<br>    defineComputed(Comp.prototype, key, computed[key])<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>初始化<code>props</code>属性就是遍历参数中传入的<code>computed</code>选项，将每一项都调用<code>defineComputed</code>函数定义到子类原型上。此处的<code>defineComputed</code>函数与我们之前在生命周期初始化阶段<code>initState</code>中所介绍的<code>defineComputed</code>函数是一样的。</p>\n<p>接着，将父类中的一些属性复制到子类中，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Sub.extend = Super.extend<br>Sub.mixin = Super.mixin<br>Sub.use = Super.use<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> ASSET_TYPES = [<br>  <span class=\"hljs-string\">&#x27;component&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;directive&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;filter&#x27;</span><br>]<br><span class=\"hljs-comment\">// create asset registers, so extended classes</span><br><span class=\"hljs-comment\">// can have their private assets too.</span><br>ASSET_TYPES.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">type</span>) </span>&#123;<br>    Sub[type] = Super[type]<br>&#125;)<br><span class=\"hljs-comment\">// enable recursive self-lookup</span><br><span class=\"hljs-keyword\">if</span> (name) &#123;<br>    Sub.options.components[name] = Sub<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接着，给子类新增三个独有的属性，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Sub.superOptions = Super.options<br>Sub.extendOptions = extendOptions<br>Sub.sealedOptions = extend(&#123;&#125;, Sub.options)<br></code></pre></td></tr></table></figure>\n\n<p>最后，使用父类的<code>cid</code>作为<code>key</code>，创建好的子类<code>Sub</code>作为<code>value</code>，存入缓存池<code>cachedCtors</code>中。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// cache constructor</span><br>cachedCtors[SuperId] = Sub<br></code></pre></td></tr></table></figure>\n\n<p>最终将创建好的子类<code>Sub</code>返回。</p>\n<p>以上，就是<code>Vue.extend</code>的所有逻辑。其实总体来讲，整个过程就是先创建一个类<code>Sub</code>，接着通过原型继承的方式将该类继承基础<code>Vue</code>类，然后给<code>Sub</code>类添加一些属性以及将父类的某些属性复制到<code>Sub</code>类上，最后将<code>Sub</code>类返回。</p>\n<p>撸码一时爽，一直撸码一直爽！！！</p>\n","more":"<h4 id=\"全局API\"><a href=\"#全局API\" class=\"headerlink\" title=\"全局API\"></a>全局API</h4><p>与实例方法不同，实例方法是将方法挂载到<code>Vue</code>的原型上，而全局API是直接在<code>Vue</code>上挂载方法。在<code>Vue</code>中，全局API一共有12个，分别是<code>Vue.extend</code>、<code>Vue.nextTick</code>、<code>Vue.set</code>、<code>Vue.delete</code>、<code>Vue.directive</code>、<code>Vue.filter</code>、<code>Vue.component</code>、<code>Vue.use</code>、<code>Vue.mixin</code>、<code>Vue.observable</code>、<code>Vue.version</code>。这12个API中有的是我们在日常业务开发中经常会用到的，有的是对<code>Vue</code>内部或外部插件提供的，我们在日常业务开发中几乎用不到。接下来我们就对这12个API逐个进行分析，看看其内部原理都是怎样的。</p>\n<h5 id=\"Vue-extend\"><a href=\"#Vue-extend\" class=\"headerlink\" title=\"Vue.extend\"></a>Vue.extend</h5><h6 id=\"用法回顾\"><a href=\"#用法回顾\" class=\"headerlink\" title=\"用法回顾\"></a>用法回顾</h6><p>其用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Vue.extend( options )<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>参数</strong>：</p>\n<ul>\n<li><code>&#123;Object&#125; options</code></li>\n</ul>\n</li>\n<li><p><strong>作用</strong>：</p>\n<p>使用基础 <code>Vue</code> 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</p>\n<p><code>data</code> 选项是特例，需要注意 - 在 <code>Vue.extend()</code> 中它必须是函数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mount-point&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 创建构造器</span><br><span class=\"hljs-keyword\">var</span> Profile = Vue.extend(&#123;<br>  template: <span class=\"hljs-string\">&#x27;&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;&#x27;</span>,<br>  data: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      firstName: <span class=\"hljs-string\">&#x27;Walter&#x27;</span>,<br>      lastName: <span class=\"hljs-string\">&#x27;White&#x27;</span>,<br>      alias: <span class=\"hljs-string\">&#x27;Heisenberg&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br><span class=\"hljs-comment\">// 创建 Profile 实例，并挂载到一个元素上。</span><br><span class=\"hljs-keyword\">new</span> Profile().$mount(<span class=\"hljs-string\">&#x27;##mount-point&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Walter White aka Heisenberg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h5 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h5><p>通过用法回顾我们知道，<code>Vue.extend</code>的作用是创建一个继承自<code>Vue</code>类的子类，可接收的参数是一个包含组件选项的对象。</p>\n<p>既然是<code>Vue</code>类的子类，那么除了它本身独有的一些属性方法，还有一些是从<code>Vue</code>类中继承而来，所以创建子类的过程其实就是一边给子类上添加上独有的属性，一边将父类的公共属性复制到子类上。接下来，我们就来看看源码是如何实现这个过程的。</p>\n<p>该API的定义位于源码的<code>src/core/global-api/extend.js</code>中，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Vue.extend = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">extendOptions: Object</span>): <span class=\"hljs-title\">Function</span> </span>&#123;<br>    extendOptions = extendOptions || &#123;&#125;<br>    <span class=\"hljs-keyword\">const</span> Super = <span class=\"hljs-built_in\">this</span><br>    <span class=\"hljs-keyword\">const</span> SuperId = Super.cid<br>    <span class=\"hljs-keyword\">const</span> cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = &#123;&#125;)<br>    <span class=\"hljs-keyword\">if</span> (cachedCtors[SuperId]) &#123;<br>        <span class=\"hljs-keyword\">return</span> cachedCtors[SuperId]<br>    &#125;<br><br>    <span class=\"hljs-keyword\">const</span> name = extendOptions.name || Super.options.name<br>    <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&#x27;production&#x27;</span> &amp;&amp; name) &#123;<br>        validateComponentName(name)<br>    &#125;<br><br>    <span class=\"hljs-keyword\">const</span> Sub = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">VueComponent</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br>        <span class=\"hljs-built_in\">this</span>._init(options)<br>    &#125;<br>    Sub.prototype = <span class=\"hljs-built_in\">Object</span>.create(Super.prototype)<br>    Sub.prototype.constructor = Sub<br>    Sub.cid = cid++<br>    Sub.options = mergeOptions(<br>        Super.options,<br>        extendOptions<br>    )<br>    Sub[<span class=\"hljs-string\">&#x27;super&#x27;</span>] = Super<br><br>    <span class=\"hljs-keyword\">if</span> (Sub.options.props) &#123;<br>        initProps(Sub)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (Sub.options.computed) &#123;<br>        initComputed(Sub)<br>    &#125;<br><br>    <span class=\"hljs-comment\">// allow further extension/mixin/plugin usage</span><br>    Sub.extend = Super.extend<br>    Sub.mixin = Super.mixin<br>    Sub.use = Super.use<br><br>    <span class=\"hljs-comment\">// create asset registers, so extended classes</span><br>    <span class=\"hljs-comment\">// can have their private assets too.</span><br>    ASSET_TYPES.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">type</span>) </span>&#123;<br>        Sub[type] = Super[type]<br>    &#125;)<br>    <span class=\"hljs-comment\">// enable recursive self-lookup</span><br>    <span class=\"hljs-keyword\">if</span> (name) &#123;<br>        Sub.options.components[name] = Sub<br>    &#125;<br><br>    Sub.superOptions = Super.options<br>    Sub.extendOptions = extendOptions<br>    Sub.sealedOptions = extend(&#123;&#125;, Sub.options)<br><br>    <span class=\"hljs-comment\">// cache constructor</span><br>    cachedCtors[SuperId] = Sub<br>    <span class=\"hljs-keyword\">return</span> Sub<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，虽然代码量稍微有点多，但是逻辑并不复杂，下面我们就来逐行分析一下。</p>\n<p>首先，该函数内部定义了几个变量，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">extendOptions = extendOptions || &#123;&#125;<br><span class=\"hljs-keyword\">const</span> Super = <span class=\"hljs-built_in\">this</span><br><span class=\"hljs-keyword\">const</span> SuperId = Super.cid<br><span class=\"hljs-keyword\">const</span> cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = &#123;&#125;)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>extendOptions：用户传入的一个包含组件选项的对象参数；</li>\n<li>Super：指向父类，即基础 <code>Vue</code>类；</li>\n<li>SuperId：父类的<code>cid</code>属性，无论是基础 <code>Vue</code>类还是从基础 <code>Vue</code>类继承而来的类，都有一个<code>cid</code>属性，作为该类的唯一标识；</li>\n<li>cachedCtors：缓存池，用于缓存创建出来的类；</li>\n</ul>\n<p>接着，在缓存池中先尝试获取是否之前已经创建过的该子类，如果之前创建过，则直接返回之前创建的。之所以有这一步，是因为<code>Vue</code>为了性能考虑，反复调用<code>Vue.extend</code>其实应该返回同一个结果，只要返回结果是固定的，就可以将结果缓存，再次调用时，只需从缓存中取出结果即可。在API方法定义的最后，当创建完子类后，会使用父类的<code>cid</code>作为<code>key</code>，创建好的子类作为<code>value</code>，存入缓存池<code>cachedCtors</code>中。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (cachedCtors[SuperId]) &#123;<br>    <span class=\"hljs-keyword\">return</span> cachedCtors[SuperId]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接着，获取到传入的选项参数中的<code>name</code>字段，并且在开发环境下校验<code>name</code>字段是否合法，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> name = extendOptions.name || Super.options.name<br><span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&#x27;production&#x27;</span> &amp;&amp; name) &#123;<br>    validateComponentName(name)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接着，创建一个类<code>Sub</code>，这个类就是将要继承基础<code>Vue</code>类的子类，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> Sub = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">VueComponent</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>._init(options)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>到这里，我们已经把类创建好了，接下来的工作就是让该类去继承基础<code>Vue</code>类，让其具备一些基础<code>Vue</code>类的能力。</p>\n<p>首先，将父类的原型继承到子类中，并且为子类添加唯一标识<code>cid</code>，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Sub.prototype = <span class=\"hljs-built_in\">Object</span>.create(Super.prototype)<br>Sub.prototype.constructor = Sub<br>Sub.cid = cid++<br></code></pre></td></tr></table></figure>\n\n<p>接着，将父类的<code>options</code>与子类的<code>options</code>进行合并，将合并结果赋给子类的<code>options</code>属性，如下：</p>\n<p>接着，将父类保存到子类的<code>super</code>属性中，以确保在子类中能够拿到父类，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Sub[<span class=\"hljs-string\">&#x27;super&#x27;</span>] = Super<br></code></pre></td></tr></table></figure>\n\n<p>接着，如果选项中存在<code>props</code>属性，则初始化它，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (Sub.options.props) &#123;<br>    initProps(Sub)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">initProps</span> (<span class=\"hljs-params\">Comp</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> props = Comp.options.props<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> props) &#123;<br>    proxy(Comp.prototype, <span class=\"hljs-string\">`_props`</span>, key)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>初始化<code>props</code>属性其实就是把参数中传入的<code>props</code>选项代理到原型的<code>_props</code>中。</p>\n<p>接着，如果选项中存在<code>computed</code>属性，则初始化它，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (Sub.options.computed) &#123;<br>    initComputed(Sub)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">initComputed</span> (<span class=\"hljs-params\">Comp</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> computed = Comp.options.computed<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> computed) &#123;<br>    defineComputed(Comp.prototype, key, computed[key])<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>初始化<code>props</code>属性就是遍历参数中传入的<code>computed</code>选项，将每一项都调用<code>defineComputed</code>函数定义到子类原型上。此处的<code>defineComputed</code>函数与我们之前在生命周期初始化阶段<code>initState</code>中所介绍的<code>defineComputed</code>函数是一样的。</p>\n<p>接着，将父类中的一些属性复制到子类中，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Sub.extend = Super.extend<br>Sub.mixin = Super.mixin<br>Sub.use = Super.use<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> ASSET_TYPES = [<br>  <span class=\"hljs-string\">&#x27;component&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;directive&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;filter&#x27;</span><br>]<br><span class=\"hljs-comment\">// create asset registers, so extended classes</span><br><span class=\"hljs-comment\">// can have their private assets too.</span><br>ASSET_TYPES.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">type</span>) </span>&#123;<br>    Sub[type] = Super[type]<br>&#125;)<br><span class=\"hljs-comment\">// enable recursive self-lookup</span><br><span class=\"hljs-keyword\">if</span> (name) &#123;<br>    Sub.options.components[name] = Sub<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接着，给子类新增三个独有的属性，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Sub.superOptions = Super.options<br>Sub.extendOptions = extendOptions<br>Sub.sealedOptions = extend(&#123;&#125;, Sub.options)<br></code></pre></td></tr></table></figure>\n\n<p>最后，使用父类的<code>cid</code>作为<code>key</code>，创建好的子类<code>Sub</code>作为<code>value</code>，存入缓存池<code>cachedCtors</code>中。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// cache constructor</span><br>cachedCtors[SuperId] = Sub<br></code></pre></td></tr></table></figure>\n\n<p>最终将创建好的子类<code>Sub</code>返回。</p>\n<p>以上，就是<code>Vue.extend</code>的所有逻辑。其实总体来讲，整个过程就是先创建一个类<code>Sub</code>，接着通过原型继承的方式将该类继承基础<code>Vue</code>类，然后给<code>Sub</code>类添加一些属性以及将父类的某些属性复制到<code>Sub</code>类上，最后将<code>Sub</code>类返回。</p>\n<p>撸码一时爽，一直撸码一直爽！！！</p>\n","categories":[],"tags":[{"name":"vue源码理解——全局API篇","path":"api/tags/vue源码理解——全局API篇.json"}]}