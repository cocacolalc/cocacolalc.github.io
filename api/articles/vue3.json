{"title":"Vue3","slug":"vue3","date":"2021-03-18T11:29:18.000Z","updated":"2021-06-29T09:47:11.460Z","comments":true,"path":"api/articles/vue3.json","excerpt":null,"covers":null,"content":"<p>学习Vue3最快的方式：就是对比veu2它有什么变化，那么对比Vue2</p>\n<p>Vue3有什么不同呢？</p>\n<h3 id=\"1-vue2和vue3双向数据绑定原理发生了改变\"><a href=\"#1-vue2和vue3双向数据绑定原理发生了改变\" class=\"headerlink\" title=\"1. vue2和vue3双向数据绑定原理发生了改变\"></a>1. vue2和vue3双向数据绑定原理发生了改变</h3><p><strong>vue2</strong> 的双向数据绑定是利用ES5 的一个 API <code>Object.definePropert()</code>对数据进行劫持 结合 发布订阅模式的方式来实现的。</p>\n<p><strong>vue3</strong> 中使用了 es6 的 <code>Proxy</code>API 对数据代理。</p>\n<p>相比于vue2.x，使用proxy的优势如下</p>\n<ol>\n<li>defineProperty只能监听某个属性，不能对全对象监听</li>\n<li>可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可）</li>\n<li>可以监听数组，不用再去单独的对数组做特异性操作 vue3.x可以检测到数组内部数据的变化</li>\n</ol>\n<h4 id=\"2-默认进行懒观察（lazy-observation）。\"><a href=\"#2-默认进行懒观察（lazy-observation）。\" class=\"headerlink\" title=\"2. 默认进行懒观察（lazy observation）。\"></a>2. 默认进行懒观察（lazy observation）。</h4><p>在 2.x 版本里，不管数据多大，都会在一开始就为其创建观察者。当数据很大时，这可能会在页面载入时造成明显的性能压力。3.x 版本，只会对「被用于渲染初始可见部分的数据」创建观察者，而且 3.x 的观察者更高效。</p>\n<ol start=\"3\">\n<li><p>更精准的变更通知。<br>比例来说：2.x 版本中，使用 Vue.set 来给对象新增一个属性时，这个对象的所有 watcher 都会重新运行；3.x 版本中，只有依赖那个属性的 watcher 才会重新运行。</p>\n</li>\n<li><p>3.0 新加入了 TypeScript 以及 PWA 的支持<br>5.vue2和vue3组件发送改变<strong>创建一个 <code>template</code></strong></p>\n<p>组件来说，大多代码在Vue2和Vue3都<strong>非常相似</strong>。Vue3支持<code>碎片(Fragments)</code>，就是说在组件可以拥有多个根节点。</p>\n<p>这种新特性可以减少很多组件之间的<code>div</code>包裹元素。在开发vue的时候，我们会发现每一个组件都会有个<code>div</code>元素包裹着。就会出现很多层多余的<code>div</code>元素。<code>碎片(Fragments)</code>解决了这个问题。对于有完美强迫症的童鞋“真的时太棒了”。我们这里的例子里就不展示了，用简单的单根节点的组件。</p>\n<p><strong>Vue2 表格template</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;form-element&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span> &#123;&#123; title &#125;&#125; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;text&#x27;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;username&#x27;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&#x27;Username&#x27;</span> /&gt;</span><br>    <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;password&#x27;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;password&#x27;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&#x27;Password&#x27;</span> /&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;login&#x27;</span>&gt;</span><br>      Submit<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span> <br>      Values: &#123;&#123; username + &#x27; &#x27; + password &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在Vue3的唯一真正的不同在于数据获取。Vue3中的<code>反应数据（Reactive Data）</code>是包含在一个<code>反应状态（Reactive State）</code>变量中。— 所以我们需要访问这个反应状态来获取数据值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;form-element&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span> &#123;&#123; state.title &#125;&#125; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;text&#x27;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;state.username&#x27;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&#x27;Username&#x27;</span></span><br><span class=\"hljs-tag\">    /&gt;</span><br>    <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;password&#x27;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;state.password&#x27;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&#x27;Password&#x27;</span></span><br><span class=\"hljs-tag\">    /&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;login&#x27;</span>&gt;</span><br>      Submit<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span> <br>      Values: &#123;&#123; state.username + &#x27; &#x27; + state.password &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"建立数据-data\"><a href=\"#建立数据-data\" class=\"headerlink\" title=\"建立数据 data\"></a><strong>建立数据 <code>data</code></strong></h2><p><strong>这里就是Vue2与Vue3 最大的区别 — Vue2使用<code>选项类型API（Options API）</code>对比Vue3<code>合成型API（Composition API）</code></strong></p>\n<p>旧的选项型API在代码里分割了不同的属性（properties）：data，computed属性，methods，等等。新的合成型API能让我们用方法（function）来分割，相比于旧的API使用属性来分组，这样代码会更加简便和整洁。</p>\n<blockquote>\n<p>现在我们来对比一下Vue2写法和Vue3写法在代码里面的区别。</p>\n</blockquote>\n<p><strong>Vue2</strong> - 这里把两个数据放入data属性中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在<strong>Vue3.0</strong>，我们就需要使用一个新的<code>setup()</code>方法，此方法在组件初始化构造的时候触发。</p>\n<p>为了可以让开发者对反应型数据有更多的控制，我们可以直接使用到 Vue3 的<code>反应API（reactivity API）</code>。</p>\n<p>使用以下三步来建立<code>反应性数据</code>:</p>\n<ol>\n<li>从vue引入<code>reactive</code></li>\n<li>使用<code>reactive()</code>方法来声名我们的数据为反应性数据</li>\n<li>使用<code>setup()</code>方法来返回我们的反应性数据，从而我们的template可以获取这些反应性数据</li>\n</ol>\n<p>上一波代码，让大家更容易理解是怎么实现的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; reactive &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup () &#123;<br>    <span class=\"hljs-keyword\">const</span> state = reactive(&#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;)<br><br>    <span class=\"hljs-keyword\">return</span> &#123; state &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这里构造的反应性数据就可以被<code>template</code>使用，可以通过<code>state.username</code>和<code>state.password</code>获得数据的值。</p>\n<hr>\n<h2 id=\"Vue2-对比-Vue3的-methods-编写\"><a href=\"#Vue2-对比-Vue3的-methods-编写\" class=\"headerlink\" title=\"Vue2 对比 Vue3的 methods 编写\"></a><strong>Vue2 对比 Vue3的 <code>methods</code> 编写</strong></h2><p><strong>Vue2</strong> 的选项型API是把methods分割到独立的属性区域的。我们可以直接在这个属性里面添加方法来处理各种前端逻辑。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    login () &#123;<br>      <span class=\"hljs-comment\">// 登陆方法</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>Vue3</strong> 的合成型API里面的<code>setup()</code>方法也是可以用来操控methods的。创建声名方法其实和声名数据状态是一样的。— 我们需要先声名一个方法然后在<code>setup()</code>方法中<code>返回(return)</code>， 这样我们的组件内就可以调用这个方法了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup () &#123;<br>    <span class=\"hljs-keyword\">const</span> state = reactive(&#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;)<br><br>    <span class=\"hljs-keyword\">const</span> login = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-comment\">// 登陆方法</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> &#123; <br>      login,<br>      state<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"生命周期钩子-—-Lifecyle-Hooks\"><a href=\"#生命周期钩子-—-Lifecyle-Hooks\" class=\"headerlink\" title=\"生命周期钩子 — Lifecyle Hooks\"></a><strong>生命周期钩子 — <code>Lifecyle Hooks</code></strong></h2><p>在 <strong>Vue2</strong>，我们可以直接在组件属性中调用Vue的生命周期的钩子。以下使用一个<code>组件已挂载（mounted）</code>生命周期触发钩子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>  &#125;,<br>  mounted () &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;组件已挂载&#x27;</span>)<br>  &#125;,<br>  methods: &#123;<br>    login () &#123;<br>      <span class=\"hljs-comment\">// login method</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>现在 <strong>Vue3</strong> 的合成型API里面的<code>setup()</code>方法可以包含了基本所有东西。生命周期的钩子就是其中之一！</p>\n<p>但是在 Vue3 生周期钩子不是全局可调用的了，需要另外从vue中引入。和刚刚引入<code>reactive</code>一样，生命周期的挂载钩子叫<code>onMounted</code>。</p>\n<p>引入后我们就可以在<code>setup()</code>方法里面使用<code>onMounted</code>挂载的钩子了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; reactive, onMounted &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup () &#123;<br>    <span class=\"hljs-comment\">// ..</span><br><br>    onMounted(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;组件已挂载&#x27;</span>)<br>    &#125;)<br><br>    <span class=\"hljs-comment\">// ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"计算属性-Computed-Properties\"><a href=\"#计算属性-Computed-Properties\" class=\"headerlink\" title=\"计算属性 - Computed Properties\"></a><strong>计算属性 - <code>Computed Properties</code></strong></h2><p>我们一起试试添加一个计算属性来转换<code>username</code>成小写字母。</p>\n<p>在 <strong>Vue2</strong> 中实现，我们只需要在组件内的选项属性中添加即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-comment\">// .. </span><br>  computed: &#123;<br>    lowerCaseUsername () &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.username.toLowerCase()<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>Vue3</strong> 的设计模式给予开发者们按需引入需要使用的依赖包。这样一来就不需要多余的引用导致性能或者打包后太大的问题。Vue2就是有这个一直存在的问题。</p>\n<p>所以在 Vue3 使用计算属性，我们先需要在组件内引入<code>computed</code>。</p>\n<p>使用方式就和<code>反应性数据（reactive data）</code>一样，在<code>state</code>中加入一个计算属性:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; reactive, onMounted, computed &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup () &#123;<br>    <span class=\"hljs-keyword\">const</span> state = reactive(&#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      lowerCaseUsername: computed(<span class=\"hljs-function\">() =&gt;</span> state.username.toLowerCase())<br>    &#125;)<br><br>    <span class=\"hljs-comment\">// ...</span><br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"接收-Props\"><a href=\"#接收-Props\" class=\"headerlink\" title=\"接收 Props\"></a><strong>接收 <code>Props</code></strong></h2><p>接收组件<code>props</code>参数传递这一块为我们带来了Vue2和Vue3之间最大的区别。<strong>—<code>this</code>在vue3中与vue2代表着完全不一样的东西。</strong></p>\n<p>在 <strong>Vue2</strong>，<code>this</code>代表的是当前组件，不是某一个特定的属性。所以我们可以直接使用<code>this</code>访问prop属性值。就比如下面的例子在挂载完成后打印处当前传入组件的参数<code>title</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">mounted () &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;title: &#x27;</span> + <span class=\"hljs-built_in\">this</span>.title)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>但是在 <strong>Vue3</strong> 中，<code>this</code>无法直接拿到props属性，emit events（触发事件）和组件内的其他属性。不过全新的<code>setup()</code>方法可以接收两个参数：</p>\n<ol>\n<li><code>props</code> - 不可变的组件参数</li>\n<li><code>context</code> - Vue3 暴露出来的属性（emit，slots，attrs）</li>\n</ol>\n<p>所以在 Vue3 接收与使用props就会变成这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">setup (props) &#123;<br>    <span class=\"hljs-comment\">// ...</span><br><br>    onMounted(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;title: &#x27;</span> + props.title)<br>    &#125;)<br><br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"事件-Emitting-Events\"><a href=\"#事件-Emitting-Events\" class=\"headerlink\" title=\"事件 - Emitting Events\"></a><strong>事件 - <code>Emitting Events</code></strong></h2><p>在 <strong>Vue2</strong> 中自定义事件是非常直接的，但是在 <strong>Vue3</strong> 的话，我们会有更多的控制的自由度。</p>\n<p>举例，现在我们想在点击提交按钮时触发一个<code>login</code>的事件。</p>\n<p>在 <strong>Vue2</strong> 中我们会调用到<code>this.$emit</code>然后传入事件名和参数对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">login () &#123;<br>      <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;login&#x27;</span>, &#123;<br>        username: <span class=\"hljs-built_in\">this</span>.username,<br>        password: <span class=\"hljs-built_in\">this</span>.password<br>      &#125;)<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>但是在 <strong>Vue3</strong>中，我们刚刚说过<code>this</code>已经不是和vue2代表着这个组件了，所以我们需要不一样的自定义事件的方式。</p>\n<p>那怎么办呀？! ლಠ益ಠ)ლ</p>\n<p>不用慌，在<code>setup()</code>中的第二个参数<code>content</code>对象中就有<code>emit</code>，这个是和<code>this.$emit</code>是一样的。那么我们只要在<code>setup()</code>接收第二个参数中使用<strong>分解对象法</strong>取出<code>emit</code>就可以在setup方法中随意使用了。</p>\n<p>然后我们在<code>login</code>方法中编写登陆事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">setup (props, &#123; emit &#125;) &#123;<br>    <span class=\"hljs-comment\">// ...</span><br><br>    <span class=\"hljs-keyword\">const</span> login = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      emit(<span class=\"hljs-string\">&#x27;login&#x27;</span>, &#123;<br>        username: state.username,<br>        password: state.password<br>      &#125;)<br>    &#125;<br><br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"最终的vue2对比vue3代码\"><a href=\"#最终的vue2对比vue3代码\" class=\"headerlink\" title=\"最终的vue2对比vue3代码\"></a><strong>最终的vue2对比vue3代码</strong></h2></li>\n</ol>\n<p>  ![img](data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='2000' height='1250'></svg>)</p>\n<p>  真的是太棒了，能看到这里的童鞋们，你们现在基本都看到vue2与vue3其实概念与理念都是一样的。只是有一些属性获取方式和声名和定义方式稍微变了。一直在鬼哭狼嚎的小小前端开发猿人们，你们可以松一口气了吧。</p>\n<p>  总结一下，我觉得 <strong>Vue3</strong> 给我们前端开发者带来了全新的开发体验，更好的使用弹性，可控度也得到了大大的提升。如果你是一个学过或者接触过 <strong>React</strong> 然后现在想使用Vue的话，应该特别兴奋，因为很多使用方式都和React非常相近了 ！</p>\n<p>  全新的<code>合成式API（Composition API）</code>可以提升代码的解耦程度 —— 特别是大型的前端应用，效果会更加明显。还有就是按需引用的有了更细微的可控性，让项目的性能和打包大小有更好的控制。</p>\n<p>  最后我把完成的 <strong>Vue2</strong> 和 <strong>Vue3</strong> 的组件代码发出来给大家：</p>\n<p>  <strong>Vue2</strong></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&#x27;form-element&#x27;</span>&gt;<br>    &lt;h2&gt; &#123;&#123; title &#125;&#125; &lt;/h2&gt;<br>    &lt;input type=<span class=\"hljs-string\">&#x27;text&#x27;</span> v-model=<span class=\"hljs-string\">&#x27;username&#x27;</span> placeholder=<span class=\"hljs-string\">&#x27;Username&#x27;</span> /&gt;<br>    <br>    &lt;input type=<span class=\"hljs-string\">&#x27;password&#x27;</span> v-model=<span class=\"hljs-string\">&#x27;password&#x27;</span> placeholder=<span class=\"hljs-string\">&#x27;Password&#x27;</span> /&gt;<br><br>    &lt;button @click=<span class=\"hljs-string\">&#x27;login&#x27;</span>&gt;<br>      Submit<br>    &lt;/button&gt;<br>    &lt;p&gt; <br>      Values: &#123;&#123; username + <span class=\"hljs-string\">&#x27; &#x27;</span> + password &#125;&#125;<br>    &lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>  &#125;,<br>  mounted () &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;title: &#x27;</span> + <span class=\"hljs-built_in\">this</span>.title)<br>  &#125;,<br>  computed: &#123;<br>    lowerCaseUsername () &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.username.toLowerCase()<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    login () &#123;<br>      <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;login&#x27;</span>, &#123;<br>        username: <span class=\"hljs-built_in\">this</span>.username,<br>        password: <span class=\"hljs-built_in\">this</span>.password<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p>  <strong>Vue3</strong></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&#x27;form-element&#x27;</span>&gt;<br>    &lt;h2&gt; &#123;&#123; state.title &#125;&#125; &lt;/h2&gt;<br>    &lt;input type=<span class=\"hljs-string\">&#x27;text&#x27;</span> v-model=<span class=\"hljs-string\">&#x27;state.username&#x27;</span> placeholder=<span class=\"hljs-string\">&#x27;Username&#x27;</span> /&gt;<br>    <br>    &lt;input type=<span class=\"hljs-string\">&#x27;password&#x27;</span> v-model=<span class=\"hljs-string\">&#x27;state.password&#x27;</span> placeholder=<span class=\"hljs-string\">&#x27;Password&#x27;</span> /&gt;<br><br>    &lt;button @click=<span class=\"hljs-string\">&#x27;login&#x27;</span>&gt;<br>      Submit<br>    &lt;/button&gt;<br>    &lt;p&gt; <br>      Values: &#123;&#123; state.username + <span class=\"hljs-string\">&#x27; &#x27;</span> + state.password &#125;&#125;<br>    &lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">import</span> &#123; reactive, onMounted, computed &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup (props, &#123; emit &#125;) &#123;<br>    <span class=\"hljs-keyword\">const</span> state = reactive(&#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      lowerCaseUsername: computed(<span class=\"hljs-function\">() =&gt;</span> state.username.toLowerCase())<br>    &#125;)<br><br>    onMounted(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;title: &#x27;</span> + props.title)<br>    &#125;)<br><br>    <span class=\"hljs-keyword\">const</span> login = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      emit(<span class=\"hljs-string\">&#x27;login&#x27;</span>, &#123;<br>        username: state.username,<br>        password: state.password<br>      &#125;)<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> &#123; <br>      login,<br>      state<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n","more":"<p>学习Vue3最快的方式：就是对比veu2它有什么变化，那么对比Vue2</p>\n<p>Vue3有什么不同呢？</p>\n<h3 id=\"1-vue2和vue3双向数据绑定原理发生了改变\"><a href=\"#1-vue2和vue3双向数据绑定原理发生了改变\" class=\"headerlink\" title=\"1. vue2和vue3双向数据绑定原理发生了改变\"></a>1. vue2和vue3双向数据绑定原理发生了改变</h3><p><strong>vue2</strong> 的双向数据绑定是利用ES5 的一个 API <code>Object.definePropert()</code>对数据进行劫持 结合 发布订阅模式的方式来实现的。</p>\n<p><strong>vue3</strong> 中使用了 es6 的 <code>Proxy</code>API 对数据代理。</p>\n<p>相比于vue2.x，使用proxy的优势如下</p>\n<ol>\n<li>defineProperty只能监听某个属性，不能对全对象监听</li>\n<li>可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可）</li>\n<li>可以监听数组，不用再去单独的对数组做特异性操作 vue3.x可以检测到数组内部数据的变化</li>\n</ol>\n<h4 id=\"2-默认进行懒观察（lazy-observation）。\"><a href=\"#2-默认进行懒观察（lazy-observation）。\" class=\"headerlink\" title=\"2. 默认进行懒观察（lazy observation）。\"></a>2. 默认进行懒观察（lazy observation）。</h4><p>在 2.x 版本里，不管数据多大，都会在一开始就为其创建观察者。当数据很大时，这可能会在页面载入时造成明显的性能压力。3.x 版本，只会对「被用于渲染初始可见部分的数据」创建观察者，而且 3.x 的观察者更高效。</p>\n<ol start=\"3\">\n<li><p>更精准的变更通知。<br>比例来说：2.x 版本中，使用 Vue.set 来给对象新增一个属性时，这个对象的所有 watcher 都会重新运行；3.x 版本中，只有依赖那个属性的 watcher 才会重新运行。</p>\n</li>\n<li><p>3.0 新加入了 TypeScript 以及 PWA 的支持<br>5.vue2和vue3组件发送改变<strong>创建一个 <code>template</code></strong></p>\n<p>组件来说，大多代码在Vue2和Vue3都<strong>非常相似</strong>。Vue3支持<code>碎片(Fragments)</code>，就是说在组件可以拥有多个根节点。</p>\n<p>这种新特性可以减少很多组件之间的<code>div</code>包裹元素。在开发vue的时候，我们会发现每一个组件都会有个<code>div</code>元素包裹着。就会出现很多层多余的<code>div</code>元素。<code>碎片(Fragments)</code>解决了这个问题。对于有完美强迫症的童鞋“真的时太棒了”。我们这里的例子里就不展示了，用简单的单根节点的组件。</p>\n<p><strong>Vue2 表格template</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;form-element&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span> &#123;&#123; title &#125;&#125; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;text&#x27;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;username&#x27;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&#x27;Username&#x27;</span> /&gt;</span><br>    <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;password&#x27;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;password&#x27;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&#x27;Password&#x27;</span> /&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;login&#x27;</span>&gt;</span><br>      Submit<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span> <br>      Values: &#123;&#123; username + &#x27; &#x27; + password &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在Vue3的唯一真正的不同在于数据获取。Vue3中的<code>反应数据（Reactive Data）</code>是包含在一个<code>反应状态（Reactive State）</code>变量中。— 所以我们需要访问这个反应状态来获取数据值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;form-element&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span> &#123;&#123; state.title &#125;&#125; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;text&#x27;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;state.username&#x27;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&#x27;Username&#x27;</span></span><br><span class=\"hljs-tag\">    /&gt;</span><br>    <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;password&#x27;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;state.password&#x27;</span></span><br><span class=\"hljs-tag\">     <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&#x27;Password&#x27;</span></span><br><span class=\"hljs-tag\">    /&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;login&#x27;</span>&gt;</span><br>      Submit<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span> <br>      Values: &#123;&#123; state.username + &#x27; &#x27; + state.password &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"建立数据-data\"><a href=\"#建立数据-data\" class=\"headerlink\" title=\"建立数据 data\"></a><strong>建立数据 <code>data</code></strong></h2><p><strong>这里就是Vue2与Vue3 最大的区别 — Vue2使用<code>选项类型API（Options API）</code>对比Vue3<code>合成型API（Composition API）</code></strong></p>\n<p>旧的选项型API在代码里分割了不同的属性（properties）：data，computed属性，methods，等等。新的合成型API能让我们用方法（function）来分割，相比于旧的API使用属性来分组，这样代码会更加简便和整洁。</p>\n<blockquote>\n<p>现在我们来对比一下Vue2写法和Vue3写法在代码里面的区别。</p>\n</blockquote>\n<p><strong>Vue2</strong> - 这里把两个数据放入data属性中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在<strong>Vue3.0</strong>，我们就需要使用一个新的<code>setup()</code>方法，此方法在组件初始化构造的时候触发。</p>\n<p>为了可以让开发者对反应型数据有更多的控制，我们可以直接使用到 Vue3 的<code>反应API（reactivity API）</code>。</p>\n<p>使用以下三步来建立<code>反应性数据</code>:</p>\n<ol>\n<li>从vue引入<code>reactive</code></li>\n<li>使用<code>reactive()</code>方法来声名我们的数据为反应性数据</li>\n<li>使用<code>setup()</code>方法来返回我们的反应性数据，从而我们的template可以获取这些反应性数据</li>\n</ol>\n<p>上一波代码，让大家更容易理解是怎么实现的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; reactive &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup () &#123;<br>    <span class=\"hljs-keyword\">const</span> state = reactive(&#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;)<br><br>    <span class=\"hljs-keyword\">return</span> &#123; state &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这里构造的反应性数据就可以被<code>template</code>使用，可以通过<code>state.username</code>和<code>state.password</code>获得数据的值。</p>\n<hr>\n<h2 id=\"Vue2-对比-Vue3的-methods-编写\"><a href=\"#Vue2-对比-Vue3的-methods-编写\" class=\"headerlink\" title=\"Vue2 对比 Vue3的 methods 编写\"></a><strong>Vue2 对比 Vue3的 <code>methods</code> 编写</strong></h2><p><strong>Vue2</strong> 的选项型API是把methods分割到独立的属性区域的。我们可以直接在这个属性里面添加方法来处理各种前端逻辑。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    login () &#123;<br>      <span class=\"hljs-comment\">// 登陆方法</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>Vue3</strong> 的合成型API里面的<code>setup()</code>方法也是可以用来操控methods的。创建声名方法其实和声名数据状态是一样的。— 我们需要先声名一个方法然后在<code>setup()</code>方法中<code>返回(return)</code>， 这样我们的组件内就可以调用这个方法了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup () &#123;<br>    <span class=\"hljs-keyword\">const</span> state = reactive(&#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;)<br><br>    <span class=\"hljs-keyword\">const</span> login = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-comment\">// 登陆方法</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> &#123; <br>      login,<br>      state<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"生命周期钩子-—-Lifecyle-Hooks\"><a href=\"#生命周期钩子-—-Lifecyle-Hooks\" class=\"headerlink\" title=\"生命周期钩子 — Lifecyle Hooks\"></a><strong>生命周期钩子 — <code>Lifecyle Hooks</code></strong></h2><p>在 <strong>Vue2</strong>，我们可以直接在组件属性中调用Vue的生命周期的钩子。以下使用一个<code>组件已挂载（mounted）</code>生命周期触发钩子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>  &#125;,<br>  mounted () &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;组件已挂载&#x27;</span>)<br>  &#125;,<br>  methods: &#123;<br>    login () &#123;<br>      <span class=\"hljs-comment\">// login method</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>现在 <strong>Vue3</strong> 的合成型API里面的<code>setup()</code>方法可以包含了基本所有东西。生命周期的钩子就是其中之一！</p>\n<p>但是在 Vue3 生周期钩子不是全局可调用的了，需要另外从vue中引入。和刚刚引入<code>reactive</code>一样，生命周期的挂载钩子叫<code>onMounted</code>。</p>\n<p>引入后我们就可以在<code>setup()</code>方法里面使用<code>onMounted</code>挂载的钩子了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; reactive, onMounted &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup () &#123;<br>    <span class=\"hljs-comment\">// ..</span><br><br>    onMounted(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;组件已挂载&#x27;</span>)<br>    &#125;)<br><br>    <span class=\"hljs-comment\">// ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"计算属性-Computed-Properties\"><a href=\"#计算属性-Computed-Properties\" class=\"headerlink\" title=\"计算属性 - Computed Properties\"></a><strong>计算属性 - <code>Computed Properties</code></strong></h2><p>我们一起试试添加一个计算属性来转换<code>username</code>成小写字母。</p>\n<p>在 <strong>Vue2</strong> 中实现，我们只需要在组件内的选项属性中添加即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-comment\">// .. </span><br>  computed: &#123;<br>    lowerCaseUsername () &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.username.toLowerCase()<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>Vue3</strong> 的设计模式给予开发者们按需引入需要使用的依赖包。这样一来就不需要多余的引用导致性能或者打包后太大的问题。Vue2就是有这个一直存在的问题。</p>\n<p>所以在 Vue3 使用计算属性，我们先需要在组件内引入<code>computed</code>。</p>\n<p>使用方式就和<code>反应性数据（reactive data）</code>一样，在<code>state</code>中加入一个计算属性:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; reactive, onMounted, computed &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup () &#123;<br>    <span class=\"hljs-keyword\">const</span> state = reactive(&#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      lowerCaseUsername: computed(<span class=\"hljs-function\">() =&gt;</span> state.username.toLowerCase())<br>    &#125;)<br><br>    <span class=\"hljs-comment\">// ...</span><br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"接收-Props\"><a href=\"#接收-Props\" class=\"headerlink\" title=\"接收 Props\"></a><strong>接收 <code>Props</code></strong></h2><p>接收组件<code>props</code>参数传递这一块为我们带来了Vue2和Vue3之间最大的区别。<strong>—<code>this</code>在vue3中与vue2代表着完全不一样的东西。</strong></p>\n<p>在 <strong>Vue2</strong>，<code>this</code>代表的是当前组件，不是某一个特定的属性。所以我们可以直接使用<code>this</code>访问prop属性值。就比如下面的例子在挂载完成后打印处当前传入组件的参数<code>title</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">mounted () &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;title: &#x27;</span> + <span class=\"hljs-built_in\">this</span>.title)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>但是在 <strong>Vue3</strong> 中，<code>this</code>无法直接拿到props属性，emit events（触发事件）和组件内的其他属性。不过全新的<code>setup()</code>方法可以接收两个参数：</p>\n<ol>\n<li><code>props</code> - 不可变的组件参数</li>\n<li><code>context</code> - Vue3 暴露出来的属性（emit，slots，attrs）</li>\n</ol>\n<p>所以在 Vue3 接收与使用props就会变成这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">setup (props) &#123;<br>    <span class=\"hljs-comment\">// ...</span><br><br>    onMounted(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;title: &#x27;</span> + props.title)<br>    &#125;)<br><br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"事件-Emitting-Events\"><a href=\"#事件-Emitting-Events\" class=\"headerlink\" title=\"事件 - Emitting Events\"></a><strong>事件 - <code>Emitting Events</code></strong></h2><p>在 <strong>Vue2</strong> 中自定义事件是非常直接的，但是在 <strong>Vue3</strong> 的话，我们会有更多的控制的自由度。</p>\n<p>举例，现在我们想在点击提交按钮时触发一个<code>login</code>的事件。</p>\n<p>在 <strong>Vue2</strong> 中我们会调用到<code>this.$emit</code>然后传入事件名和参数对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">login () &#123;<br>      <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;login&#x27;</span>, &#123;<br>        username: <span class=\"hljs-built_in\">this</span>.username,<br>        password: <span class=\"hljs-built_in\">this</span>.password<br>      &#125;)<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>但是在 <strong>Vue3</strong>中，我们刚刚说过<code>this</code>已经不是和vue2代表着这个组件了，所以我们需要不一样的自定义事件的方式。</p>\n<p>那怎么办呀？! ლಠ益ಠ)ლ</p>\n<p>不用慌，在<code>setup()</code>中的第二个参数<code>content</code>对象中就有<code>emit</code>，这个是和<code>this.$emit</code>是一样的。那么我们只要在<code>setup()</code>接收第二个参数中使用<strong>分解对象法</strong>取出<code>emit</code>就可以在setup方法中随意使用了。</p>\n<p>然后我们在<code>login</code>方法中编写登陆事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">setup (props, &#123; emit &#125;) &#123;<br>    <span class=\"hljs-comment\">// ...</span><br><br>    <span class=\"hljs-keyword\">const</span> login = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      emit(<span class=\"hljs-string\">&#x27;login&#x27;</span>, &#123;<br>        username: state.username,<br>        password: state.password<br>      &#125;)<br>    &#125;<br><br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"最终的vue2对比vue3代码\"><a href=\"#最终的vue2对比vue3代码\" class=\"headerlink\" title=\"最终的vue2对比vue3代码\"></a><strong>最终的vue2对比vue3代码</strong></h2></li>\n</ol>\n<p>  ![img](data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='2000' height='1250'></svg>)</p>\n<p>  真的是太棒了，能看到这里的童鞋们，你们现在基本都看到vue2与vue3其实概念与理念都是一样的。只是有一些属性获取方式和声名和定义方式稍微变了。一直在鬼哭狼嚎的小小前端开发猿人们，你们可以松一口气了吧。</p>\n<p>  总结一下，我觉得 <strong>Vue3</strong> 给我们前端开发者带来了全新的开发体验，更好的使用弹性，可控度也得到了大大的提升。如果你是一个学过或者接触过 <strong>React</strong> 然后现在想使用Vue的话，应该特别兴奋，因为很多使用方式都和React非常相近了 ！</p>\n<p>  全新的<code>合成式API（Composition API）</code>可以提升代码的解耦程度 —— 特别是大型的前端应用，效果会更加明显。还有就是按需引用的有了更细微的可控性，让项目的性能和打包大小有更好的控制。</p>\n<p>  最后我把完成的 <strong>Vue2</strong> 和 <strong>Vue3</strong> 的组件代码发出来给大家：</p>\n<p>  <strong>Vue2</strong></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&#x27;form-element&#x27;</span>&gt;<br>    &lt;h2&gt; &#123;&#123; title &#125;&#125; &lt;/h2&gt;<br>    &lt;input type=<span class=\"hljs-string\">&#x27;text&#x27;</span> v-model=<span class=\"hljs-string\">&#x27;username&#x27;</span> placeholder=<span class=\"hljs-string\">&#x27;Username&#x27;</span> /&gt;<br>    <br>    &lt;input type=<span class=\"hljs-string\">&#x27;password&#x27;</span> v-model=<span class=\"hljs-string\">&#x27;password&#x27;</span> placeholder=<span class=\"hljs-string\">&#x27;Password&#x27;</span> /&gt;<br><br>    &lt;button @click=<span class=\"hljs-string\">&#x27;login&#x27;</span>&gt;<br>      Submit<br>    &lt;/button&gt;<br>    &lt;p&gt; <br>      Values: &#123;&#123; username + <span class=\"hljs-string\">&#x27; &#x27;</span> + password &#125;&#125;<br>    &lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>  &#125;,<br>  mounted () &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;title: &#x27;</span> + <span class=\"hljs-built_in\">this</span>.title)<br>  &#125;,<br>  computed: &#123;<br>    lowerCaseUsername () &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.username.toLowerCase()<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    login () &#123;<br>      <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;login&#x27;</span>, &#123;<br>        username: <span class=\"hljs-built_in\">this</span>.username,<br>        password: <span class=\"hljs-built_in\">this</span>.password<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p>  <strong>Vue3</strong></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&#x27;form-element&#x27;</span>&gt;<br>    &lt;h2&gt; &#123;&#123; state.title &#125;&#125; &lt;/h2&gt;<br>    &lt;input type=<span class=\"hljs-string\">&#x27;text&#x27;</span> v-model=<span class=\"hljs-string\">&#x27;state.username&#x27;</span> placeholder=<span class=\"hljs-string\">&#x27;Username&#x27;</span> /&gt;<br>    <br>    &lt;input type=<span class=\"hljs-string\">&#x27;password&#x27;</span> v-model=<span class=\"hljs-string\">&#x27;state.password&#x27;</span> placeholder=<span class=\"hljs-string\">&#x27;Password&#x27;</span> /&gt;<br><br>    &lt;button @click=<span class=\"hljs-string\">&#x27;login&#x27;</span>&gt;<br>      Submit<br>    &lt;/button&gt;<br>    &lt;p&gt; <br>      Values: &#123;&#123; state.username + <span class=\"hljs-string\">&#x27; &#x27;</span> + state.password &#125;&#125;<br>    &lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">import</span> &#123; reactive, onMounted, computed &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  setup (props, &#123; emit &#125;) &#123;<br>    <span class=\"hljs-keyword\">const</span> state = reactive(&#123;<br>      username: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      password: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>      lowerCaseUsername: computed(<span class=\"hljs-function\">() =&gt;</span> state.username.toLowerCase())<br>    &#125;)<br><br>    onMounted(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;title: &#x27;</span> + props.title)<br>    &#125;)<br><br>    <span class=\"hljs-keyword\">const</span> login = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      emit(<span class=\"hljs-string\">&#x27;login&#x27;</span>, &#123;<br>        username: state.username,<br>        password: state.password<br>      &#125;)<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> &#123; <br>      login,<br>      state<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n","categories":[],"tags":[{"name":"Vue3","path":"api/tags/Vue3.json"}]}