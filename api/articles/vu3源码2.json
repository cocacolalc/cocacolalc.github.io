{"title":"Vue3源码-Set、Map、WeakSet、WeakMap","slug":"vu3源码2","date":"2021-03-18T11:29:18.000Z","updated":"2021-07-20T08:48:52.184Z","comments":true,"path":"api/articles/vu3源码2.json","excerpt":null,"covers":null,"cover":null,"content":"<h3 id=\"Set、Map、WeakSet、WeakMap\"><a href=\"#Set、Map、WeakSet、WeakMap\" class=\"headerlink\" title=\"Set、Map、WeakSet、WeakMap\"></a>Set、Map、WeakSet、WeakMap</h3><p>如果要用一句来描述，我们可以说 <strong>Set是一种叫做集合的数据结构，Map是一种叫做字典的数据结构</strong></p>\n<p>那什么是集合？什么又是字典呢？</p>\n<ul>\n<li>集合</li>\n</ul>\n<blockquote>\n<p>集合，是由一堆无序的、相关联的，且不重复的内存结构【数学中称为元素】组成的组合</p>\n</blockquote>\n<ul>\n<li>字典</li>\n</ul>\n<blockquote>\n<p>字典（dictionary）是一些元素的集合。每个元素有一个称作key 的域，不同元素的key 各不相同</p>\n</blockquote>\n<p>那么集合和字典又有什么区别呢？</p>\n<ul>\n<li>共同点：集合、字典都可以存储不重复的值</li>\n<li>不同点：集合是以[值，值]的形式存储元素，字典是以[键，值]的形式存储</li>\n</ul>\n<h5 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h5><p>大多数主流编程语言都有多种内置的数据集合。例如<code>Python</code>拥有列表（<code>list</code>）、元组（<code>tuple</code>）和字典（<code>dictionary</code>）,Java有列表（<code>list</code>）、集合（<code>set</code>)、队列（<code>queue</code>）</p>\n<p>然而 <code>JavaScript</code> 直到<code>ES6</code>的发布之前，只拥有数组（<code>array</code>）和对象（<code>object</code>）这两个内建的数据集合</p>\n<p>在 <code>ES6</code> 之前,我们通常使用内置的 <code>Object</code> 模拟Map</p>\n<p>但是这样模拟出来的<code>map</code>会有一些缺陷，如下:</p>\n<ol>\n<li><code>Object</code>的属性键是<code>String</code>或<code>Symbol</code>，这限制了它们作为不同数据类型的键/值对集合的能力</li>\n<li><code>Object</code>不是设计来作为一种数据集合，因此没有直接有效的方法来确定对象具有多少属性</li>\n</ol>\n<h5 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h5><blockquote>\n<p><code>Set</code> 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用，<code>Set</code>对象是值的集合，你可以按照插入的顺序迭代它的元素。 <code>Set</code>中的元素只会出现一次，即 <code>Set</code> 中的元素是唯一的</p>\n</blockquote>\n<p><code>Set</code>本身是一个构造函数，用来生成 <code>Set</code> 数据结构</p>\n<h5 id=\"基本使用：\"><a href=\"#基本使用：\" class=\"headerlink\" title=\"基本使用：\"></a>基本使用：</h5><ul>\n<li>语法<br><code>new Set([iterable])</code> 接收一个数组（或者具有 iterable 接口的其他数据结构）, 返回一个新的<code>Set</code>对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> set=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>])<br><span class=\"hljs-built_in\">console</span>.log(set)<span class=\"hljs-comment\">//&#123;1,2&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>所以说Set可以做到数组去重</p>\n<h5 id=\"属性和方法：\"><a href=\"#属性和方法：\" class=\"headerlink\" title=\"属性和方法：\"></a>属性和方法：</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]).size) <span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>操作方法</strong></p>\n<ul>\n<li>add(value): 向集合中添加一个新的项</li>\n<li>delete(value): 从集合中删除一个值</li>\n<li>has(value): 如果值在集合中存在，返回ture, 否则返回false</li>\n<li>clear(): 移除集合中的所有项</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>()<br>set.add(<span class=\"hljs-number\">1</span>)<br>set.add(<span class=\"hljs-number\">2</span>)<br>set.add(<span class=\"hljs-number\">2</span>)<br>set.add(<span class=\"hljs-number\">3</span>)<br><span class=\"hljs-built_in\">console</span>.log(set) <span class=\"hljs-comment\">// &#123;1,2,3&#125;</span><br>set.has(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// true</span><br>set.delete(<span class=\"hljs-number\">2</span>)  <br>set.has(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// false</span><br>set.clear() <br></code></pre></td></tr></table></figure>\n\n<p><strong>遍历方法</strong></p>\n<ul>\n<li>keys(): 返回键名的遍历器</li>\n<li>values(): 返回键值的遍历器</li>\n<li>entries(): 返回键值对的遍历器</li>\n<li>forEach(): 使用回调函数遍历每个成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>])<br><br><span class=\"hljs-comment\">// 由于set只有键值，没有键名，所以keys() values()行为完全一致</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(set.keys())) <span class=\"hljs-comment\">// [1,2,3,4]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(set.values())) <span class=\"hljs-comment\">// [1,2,3,4]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(set.entries())) <span class=\"hljs-comment\">//  [[1,1],[2,2],[3,3],[4,4]]</span><br><br>set.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> &#123; <span class=\"hljs-built_in\">console</span>.log(item)&#125;) <span class=\"hljs-comment\">// 1,2,3,4</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h5><h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>因为 <code>Set</code> 结构的值是唯一的，我们可以很轻松的实现以下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">let</span> unique = [... new <span class=\"hljs-built_in\">Set</span>(arr)];<br><br><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);<br><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>]);<br>    <br><span class=\"hljs-comment\">// 并集</span><br><span class=\"hljs-keyword\">let</span> union = [...new <span class=\"hljs-built_in\">Set</span>([...a, ...b])]; <span class=\"hljs-comment\">// [1,2,3,4]</span><br>    <br><span class=\"hljs-comment\">// 交集</span><br><span class=\"hljs-keyword\">let</span> intersect = [...new <span class=\"hljs-built_in\">Set</span>([...a].filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> b.has(x)))]; [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]<br>    <br><span class=\"hljs-comment\">// 差集</span><br><span class=\"hljs-keyword\">let</span> difference = <span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([...a].filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> !b.has(x)))); [<span class=\"hljs-number\">1</span>]<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"WeakSet\"><a href=\"#WeakSet\" class=\"headerlink\" title=\"WeakSet\"></a>WeakSet</h4><blockquote>\n<p>WeakSet 对象是一些对象值的集合, 并且其中的每个对象值都只能出现一次。在WeakSet的集合中是唯一的</p>\n</blockquote>\n<p><code>WeakSet</code> 的出现主要解决弱引用对象存储的场景, 其结构与<code>Set</code>类似</p>\n<p>与<code>Set</code>的区别</p>\n<ul>\n<li>与Set相比，WeakSet 只能是对象的集合，而不能是任何类型的任意值</li>\n<li>WeakSet集合中对象的引用为弱引用。 如果没有其他的对WeakSet中对象的引用，那么这些对象会被当成垃圾回收掉。 这也意味着WeakSet中没有存储当前对象的列表。 正因为这样，WeakSet 是不可枚举的</li>\n</ul>\n<p><code>WeakSet</code> 的属性跟操作方法与 <code>Set</code> 一致，不同的是 <code>WeakSet</code> 没有遍历方法，因为其成员都是弱引用，弱引用随时都会消失，遍历机制无法保证成员的存在</p>\n<p><strong>上面一直有提到弱引用，那弱引用到底是指什么呢？</strong></p>\n<blockquote>\n<p>弱引用是指不能确保其引用的对象不会被垃圾回收器回收的引用，换句话说就是可能在任意时间被回收</p>\n</blockquote>\n<p>基本跟 <code>Set</code> 类似，同样具有如下方法 <strong>属性</strong></p>\n<ul>\n<li>size: 返回 Map 结构的元素总数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()<br>map.set(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;vuejs.cn&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(map.size) <span class=\"hljs-comment\">// 1</span><br><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;vue3js.cn&#x27;</span>], [<span class=\"hljs-string\">&#x27;age&#x27;</span>,<span class=\"hljs-string\">&#x27;18&#x27;</span>]]).size) <span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>操作方法</strong></p>\n<ul>\n<li>set(key, value): 向 Map 中加入或更新键值对</li>\n<li>get(key): 读取 key 对用的值，如果没有，返回 undefined</li>\n<li>has(key): 某个键是否在 Map 对象中，在返回 true 否则返回 false</li>\n<li>delete(key): 删除某个键，返回 true, 如果删除失败返回 false</li>\n<li>clear(): 删除所有元素</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()<br>map.set(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;vue3js.cn&#x27;</span>)<br>map.set(<span class=\"hljs-string\">&#x27;age&#x27;</span>,<span class=\"hljs-string\">&#x27;18&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(map) <span class=\"hljs-comment\">// Map &#123;&quot;name&quot; =&gt; &quot;vuejs.cn&quot;, &quot;age&quot; =&gt; &quot;18&quot;&#125;</span><br>map.get(<span class=\"hljs-string\">&#x27;name&#x27;</span>) <span class=\"hljs-comment\">// vue3js.cn </span><br>map.has(<span class=\"hljs-string\">&#x27;name&#x27;</span>) <span class=\"hljs-comment\">// true</span><br>map.delete(<span class=\"hljs-string\">&#x27;name&#x27;</span>)  <br>map.has(name) <span class=\"hljs-comment\">// false</span><br>map.clear() <span class=\"hljs-comment\">// Map &#123;&#125; </span><br></code></pre></td></tr></table></figure>\n\n<p><strong>遍历方法</strong></p>\n<ul>\n<li>keys()：返回键名的遍历器</li>\n<li>values()：返回键值的遍历器</li>\n<li>entries()：返回所有成员的遍历器</li>\n<li>forEach()：遍历 Map 的所有成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()<br>map.set(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;vue3js.cn&#x27;</span>)<br>map.set(<span class=\"hljs-string\">&#x27;age&#x27;</span>,<span class=\"hljs-string\">&#x27;18&#x27;</span>)<br><br><span class=\"hljs-built_in\">console</span>.log([...map.keys()])  <span class=\"hljs-comment\">// [&quot;name&quot;, &quot;age&quot;]</span><br><span class=\"hljs-built_in\">console</span>.log([...map.values()])  <span class=\"hljs-comment\">// [&quot;vue3js.cn&quot;, &quot;18&quot;]</span><br><span class=\"hljs-built_in\">console</span>.log([...map.entries()]) <span class=\"hljs-comment\">// [[&#x27;name&#x27;,&#x27;vue3js.cn&#x27;], [&#x27;age&#x27;,&#x27;18&#x27;]]</span><br><br><span class=\"hljs-comment\">// name vuejs.cn</span><br><span class=\"hljs-comment\">// age 18</span><br>map.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, key</span>) =&gt;</span> &#123; <span class=\"hljs-built_in\">console</span>.log(key, value)&#125;) <br></code></pre></td></tr></table></figure>\n\n<h5 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h5><p><code>Map</code> 会保留所有元素的顺序, 是在基于可迭代的基础上构建的，如果考虑到元素迭代或顺序保留或键值类型丰富的情况下都可以使用，下面摘抄自 <code>vue3</code> 源码中依赖收集的核心实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> depsMap = targetMap.get(target)<br><span class=\"hljs-keyword\">if</span> (!depsMap) &#123;<br>  targetMap.set(target, (depsMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()))<br>&#125;<br><span class=\"hljs-keyword\">let</span> dep = depsMap.get(key)<br><span class=\"hljs-keyword\">if</span> (!dep) &#123;<br>  depsMap.set(key, (dep = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>()))<br>&#125;<br><span class=\"hljs-keyword\">if</span> (!dep.has(activeEffect)) &#123;<br>  dep.add(activeEffect)<br>  activeEffect.deps.push(dep)<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h5><blockquote>\n<p>WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的</p>\n</blockquote>\n<p>与<code>Map</code>的区别</p>\n<ul>\n<li>Map 的键可以是任意类型，WeakMap 的键只能是对象类型</li>\n<li>WeakMap 键名所指向的对象，不计入垃圾回收机制</li>\n</ul>\n<p><code>WeakMap</code> 的属性跟操作方法与 <code>Map</code> 一致，同 <code>WeakSet</code> 一样，因为是弱引用，所以 <code>WeakSet</code> 也没有遍历方法</p>\n<h5 id=\"类型的转换\"><a href=\"#类型的转换\" class=\"headerlink\" title=\"类型的转换\"></a>类型的转换</h5><ul>\n<li><code>Map</code> 转为 <code>Array</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 解构</span><br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]])<br><span class=\"hljs-built_in\">console</span>.log([...map])\t<span class=\"hljs-comment\">// [[1, 1], [2, 2], [3, 3]]</span><br><br><span class=\"hljs-comment\">// Array.from()</span><br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]])<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(map))\t<span class=\"hljs-comment\">// [[1, 1], [2, 2], [3, 3]]</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Array</code> 转为 <code>Map</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]])<br><span class=\"hljs-built_in\">console</span>.log(map)\t<span class=\"hljs-comment\">// Map &#123;1 =&gt; 1, 2 =&gt; 2, 3 =&gt; 3&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Map</code> 转为 <code>Object</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 非字符串键名会被转换为字符串</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mapToObj</span>(<span class=\"hljs-params\">map</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-literal\">null</span>)<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> [key, value] <span class=\"hljs-keyword\">of</span> map) &#123;<br>        obj[key] = value<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> obj<br>&#125;<br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>().set(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;vue3js.cn&#x27;</span>).set(<span class=\"hljs-string\">&#x27;age&#x27;</span>, <span class=\"hljs-string\">&#x27;18&#x27;</span>)<br>mapToObj(map)  <span class=\"hljs-comment\">// &#123;name: &quot;vue3js.cn&quot;, age: &quot;18&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Object</code> 转为 <code>Map</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj = &#123;<span class=\"hljs-string\">&quot;a&quot;</span>:<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;b&quot;</span>:<span class=\"hljs-number\">2</span>&#125;;<br><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(<span class=\"hljs-built_in\">Object</span>.entries(obj))<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><ul>\n<li>Set、Map、WeakSet、WeakMap、都是一种集合的数据结构</li>\n<li>Set、WeakSet 是[值,值]的集合，且具有唯一性</li>\n<li>Map 和 WeakMap 是一种[键,值]的集合，Map 的键可以是任意类型，WeakMap 的键只能是对象类型</li>\n<li>Set 和 Map 有遍历方法，WeakSet 和 WeakMap 属于弱引用不可遍历</li>\n</ul>\n","more":"<h3 id=\"Set、Map、WeakSet、WeakMap\"><a href=\"#Set、Map、WeakSet、WeakMap\" class=\"headerlink\" title=\"Set、Map、WeakSet、WeakMap\"></a>Set、Map、WeakSet、WeakMap</h3><p>如果要用一句来描述，我们可以说 <strong>Set是一种叫做集合的数据结构，Map是一种叫做字典的数据结构</strong></p>\n<p>那什么是集合？什么又是字典呢？</p>\n<ul>\n<li>集合</li>\n</ul>\n<blockquote>\n<p>集合，是由一堆无序的、相关联的，且不重复的内存结构【数学中称为元素】组成的组合</p>\n</blockquote>\n<ul>\n<li>字典</li>\n</ul>\n<blockquote>\n<p>字典（dictionary）是一些元素的集合。每个元素有一个称作key 的域，不同元素的key 各不相同</p>\n</blockquote>\n<p>那么集合和字典又有什么区别呢？</p>\n<ul>\n<li>共同点：集合、字典都可以存储不重复的值</li>\n<li>不同点：集合是以[值，值]的形式存储元素，字典是以[键，值]的形式存储</li>\n</ul>\n<h5 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h5><p>大多数主流编程语言都有多种内置的数据集合。例如<code>Python</code>拥有列表（<code>list</code>）、元组（<code>tuple</code>）和字典（<code>dictionary</code>）,Java有列表（<code>list</code>）、集合（<code>set</code>)、队列（<code>queue</code>）</p>\n<p>然而 <code>JavaScript</code> 直到<code>ES6</code>的发布之前，只拥有数组（<code>array</code>）和对象（<code>object</code>）这两个内建的数据集合</p>\n<p>在 <code>ES6</code> 之前,我们通常使用内置的 <code>Object</code> 模拟Map</p>\n<p>但是这样模拟出来的<code>map</code>会有一些缺陷，如下:</p>\n<ol>\n<li><code>Object</code>的属性键是<code>String</code>或<code>Symbol</code>，这限制了它们作为不同数据类型的键/值对集合的能力</li>\n<li><code>Object</code>不是设计来作为一种数据集合，因此没有直接有效的方法来确定对象具有多少属性</li>\n</ol>\n<h5 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h5><blockquote>\n<p><code>Set</code> 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用，<code>Set</code>对象是值的集合，你可以按照插入的顺序迭代它的元素。 <code>Set</code>中的元素只会出现一次，即 <code>Set</code> 中的元素是唯一的</p>\n</blockquote>\n<p><code>Set</code>本身是一个构造函数，用来生成 <code>Set</code> 数据结构</p>\n<h5 id=\"基本使用：\"><a href=\"#基本使用：\" class=\"headerlink\" title=\"基本使用：\"></a>基本使用：</h5><ul>\n<li>语法<br><code>new Set([iterable])</code> 接收一个数组（或者具有 iterable 接口的其他数据结构）, 返回一个新的<code>Set</code>对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> set=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>])<br><span class=\"hljs-built_in\">console</span>.log(set)<span class=\"hljs-comment\">//&#123;1,2&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>所以说Set可以做到数组去重</p>\n<h5 id=\"属性和方法：\"><a href=\"#属性和方法：\" class=\"headerlink\" title=\"属性和方法：\"></a>属性和方法：</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]).size) <span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>操作方法</strong></p>\n<ul>\n<li>add(value): 向集合中添加一个新的项</li>\n<li>delete(value): 从集合中删除一个值</li>\n<li>has(value): 如果值在集合中存在，返回ture, 否则返回false</li>\n<li>clear(): 移除集合中的所有项</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>()<br>set.add(<span class=\"hljs-number\">1</span>)<br>set.add(<span class=\"hljs-number\">2</span>)<br>set.add(<span class=\"hljs-number\">2</span>)<br>set.add(<span class=\"hljs-number\">3</span>)<br><span class=\"hljs-built_in\">console</span>.log(set) <span class=\"hljs-comment\">// &#123;1,2,3&#125;</span><br>set.has(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// true</span><br>set.delete(<span class=\"hljs-number\">2</span>)  <br>set.has(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// false</span><br>set.clear() <br></code></pre></td></tr></table></figure>\n\n<p><strong>遍历方法</strong></p>\n<ul>\n<li>keys(): 返回键名的遍历器</li>\n<li>values(): 返回键值的遍历器</li>\n<li>entries(): 返回键值对的遍历器</li>\n<li>forEach(): 使用回调函数遍历每个成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>])<br><br><span class=\"hljs-comment\">// 由于set只有键值，没有键名，所以keys() values()行为完全一致</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(set.keys())) <span class=\"hljs-comment\">// [1,2,3,4]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(set.values())) <span class=\"hljs-comment\">// [1,2,3,4]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(set.entries())) <span class=\"hljs-comment\">//  [[1,1],[2,2],[3,3],[4,4]]</span><br><br>set.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> &#123; <span class=\"hljs-built_in\">console</span>.log(item)&#125;) <span class=\"hljs-comment\">// 1,2,3,4</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h5><h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>因为 <code>Set</code> 结构的值是唯一的，我们可以很轻松的实现以下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">let</span> unique = [... new <span class=\"hljs-built_in\">Set</span>(arr)];<br><br><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);<br><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>]);<br>    <br><span class=\"hljs-comment\">// 并集</span><br><span class=\"hljs-keyword\">let</span> union = [...new <span class=\"hljs-built_in\">Set</span>([...a, ...b])]; <span class=\"hljs-comment\">// [1,2,3,4]</span><br>    <br><span class=\"hljs-comment\">// 交集</span><br><span class=\"hljs-keyword\">let</span> intersect = [...new <span class=\"hljs-built_in\">Set</span>([...a].filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> b.has(x)))]; [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]<br>    <br><span class=\"hljs-comment\">// 差集</span><br><span class=\"hljs-keyword\">let</span> difference = <span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([...a].filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> !b.has(x)))); [<span class=\"hljs-number\">1</span>]<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"WeakSet\"><a href=\"#WeakSet\" class=\"headerlink\" title=\"WeakSet\"></a>WeakSet</h4><blockquote>\n<p>WeakSet 对象是一些对象值的集合, 并且其中的每个对象值都只能出现一次。在WeakSet的集合中是唯一的</p>\n</blockquote>\n<p><code>WeakSet</code> 的出现主要解决弱引用对象存储的场景, 其结构与<code>Set</code>类似</p>\n<p>与<code>Set</code>的区别</p>\n<ul>\n<li>与Set相比，WeakSet 只能是对象的集合，而不能是任何类型的任意值</li>\n<li>WeakSet集合中对象的引用为弱引用。 如果没有其他的对WeakSet中对象的引用，那么这些对象会被当成垃圾回收掉。 这也意味着WeakSet中没有存储当前对象的列表。 正因为这样，WeakSet 是不可枚举的</li>\n</ul>\n<p><code>WeakSet</code> 的属性跟操作方法与 <code>Set</code> 一致，不同的是 <code>WeakSet</code> 没有遍历方法，因为其成员都是弱引用，弱引用随时都会消失，遍历机制无法保证成员的存在</p>\n<p><strong>上面一直有提到弱引用，那弱引用到底是指什么呢？</strong></p>\n<blockquote>\n<p>弱引用是指不能确保其引用的对象不会被垃圾回收器回收的引用，换句话说就是可能在任意时间被回收</p>\n</blockquote>\n<p>基本跟 <code>Set</code> 类似，同样具有如下方法 <strong>属性</strong></p>\n<ul>\n<li>size: 返回 Map 结构的元素总数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()<br>map.set(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;vuejs.cn&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(map.size) <span class=\"hljs-comment\">// 1</span><br><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;vue3js.cn&#x27;</span>], [<span class=\"hljs-string\">&#x27;age&#x27;</span>,<span class=\"hljs-string\">&#x27;18&#x27;</span>]]).size) <span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>操作方法</strong></p>\n<ul>\n<li>set(key, value): 向 Map 中加入或更新键值对</li>\n<li>get(key): 读取 key 对用的值，如果没有，返回 undefined</li>\n<li>has(key): 某个键是否在 Map 对象中，在返回 true 否则返回 false</li>\n<li>delete(key): 删除某个键，返回 true, 如果删除失败返回 false</li>\n<li>clear(): 删除所有元素</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()<br>map.set(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;vue3js.cn&#x27;</span>)<br>map.set(<span class=\"hljs-string\">&#x27;age&#x27;</span>,<span class=\"hljs-string\">&#x27;18&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(map) <span class=\"hljs-comment\">// Map &#123;&quot;name&quot; =&gt; &quot;vuejs.cn&quot;, &quot;age&quot; =&gt; &quot;18&quot;&#125;</span><br>map.get(<span class=\"hljs-string\">&#x27;name&#x27;</span>) <span class=\"hljs-comment\">// vue3js.cn </span><br>map.has(<span class=\"hljs-string\">&#x27;name&#x27;</span>) <span class=\"hljs-comment\">// true</span><br>map.delete(<span class=\"hljs-string\">&#x27;name&#x27;</span>)  <br>map.has(name) <span class=\"hljs-comment\">// false</span><br>map.clear() <span class=\"hljs-comment\">// Map &#123;&#125; </span><br></code></pre></td></tr></table></figure>\n\n<p><strong>遍历方法</strong></p>\n<ul>\n<li>keys()：返回键名的遍历器</li>\n<li>values()：返回键值的遍历器</li>\n<li>entries()：返回所有成员的遍历器</li>\n<li>forEach()：遍历 Map 的所有成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()<br>map.set(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;vue3js.cn&#x27;</span>)<br>map.set(<span class=\"hljs-string\">&#x27;age&#x27;</span>,<span class=\"hljs-string\">&#x27;18&#x27;</span>)<br><br><span class=\"hljs-built_in\">console</span>.log([...map.keys()])  <span class=\"hljs-comment\">// [&quot;name&quot;, &quot;age&quot;]</span><br><span class=\"hljs-built_in\">console</span>.log([...map.values()])  <span class=\"hljs-comment\">// [&quot;vue3js.cn&quot;, &quot;18&quot;]</span><br><span class=\"hljs-built_in\">console</span>.log([...map.entries()]) <span class=\"hljs-comment\">// [[&#x27;name&#x27;,&#x27;vue3js.cn&#x27;], [&#x27;age&#x27;,&#x27;18&#x27;]]</span><br><br><span class=\"hljs-comment\">// name vuejs.cn</span><br><span class=\"hljs-comment\">// age 18</span><br>map.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, key</span>) =&gt;</span> &#123; <span class=\"hljs-built_in\">console</span>.log(key, value)&#125;) <br></code></pre></td></tr></table></figure>\n\n<h5 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h5><p><code>Map</code> 会保留所有元素的顺序, 是在基于可迭代的基础上构建的，如果考虑到元素迭代或顺序保留或键值类型丰富的情况下都可以使用，下面摘抄自 <code>vue3</code> 源码中依赖收集的核心实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> depsMap = targetMap.get(target)<br><span class=\"hljs-keyword\">if</span> (!depsMap) &#123;<br>  targetMap.set(target, (depsMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()))<br>&#125;<br><span class=\"hljs-keyword\">let</span> dep = depsMap.get(key)<br><span class=\"hljs-keyword\">if</span> (!dep) &#123;<br>  depsMap.set(key, (dep = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>()))<br>&#125;<br><span class=\"hljs-keyword\">if</span> (!dep.has(activeEffect)) &#123;<br>  dep.add(activeEffect)<br>  activeEffect.deps.push(dep)<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h5><blockquote>\n<p>WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的</p>\n</blockquote>\n<p>与<code>Map</code>的区别</p>\n<ul>\n<li>Map 的键可以是任意类型，WeakMap 的键只能是对象类型</li>\n<li>WeakMap 键名所指向的对象，不计入垃圾回收机制</li>\n</ul>\n<p><code>WeakMap</code> 的属性跟操作方法与 <code>Map</code> 一致，同 <code>WeakSet</code> 一样，因为是弱引用，所以 <code>WeakSet</code> 也没有遍历方法</p>\n<h5 id=\"类型的转换\"><a href=\"#类型的转换\" class=\"headerlink\" title=\"类型的转换\"></a>类型的转换</h5><ul>\n<li><code>Map</code> 转为 <code>Array</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 解构</span><br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]])<br><span class=\"hljs-built_in\">console</span>.log([...map])\t<span class=\"hljs-comment\">// [[1, 1], [2, 2], [3, 3]]</span><br><br><span class=\"hljs-comment\">// Array.from()</span><br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]])<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(map))\t<span class=\"hljs-comment\">// [[1, 1], [2, 2], [3, 3]]</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Array</code> 转为 <code>Map</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]])<br><span class=\"hljs-built_in\">console</span>.log(map)\t<span class=\"hljs-comment\">// Map &#123;1 =&gt; 1, 2 =&gt; 2, 3 =&gt; 3&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Map</code> 转为 <code>Object</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 非字符串键名会被转换为字符串</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mapToObj</span>(<span class=\"hljs-params\">map</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-literal\">null</span>)<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> [key, value] <span class=\"hljs-keyword\">of</span> map) &#123;<br>        obj[key] = value<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> obj<br>&#125;<br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>().set(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;vue3js.cn&#x27;</span>).set(<span class=\"hljs-string\">&#x27;age&#x27;</span>, <span class=\"hljs-string\">&#x27;18&#x27;</span>)<br>mapToObj(map)  <span class=\"hljs-comment\">// &#123;name: &quot;vue3js.cn&quot;, age: &quot;18&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Object</code> 转为 <code>Map</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj = &#123;<span class=\"hljs-string\">&quot;a&quot;</span>:<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;b&quot;</span>:<span class=\"hljs-number\">2</span>&#125;;<br><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(<span class=\"hljs-built_in\">Object</span>.entries(obj))<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><ul>\n<li>Set、Map、WeakSet、WeakMap、都是一种集合的数据结构</li>\n<li>Set、WeakSet 是[值,值]的集合，且具有唯一性</li>\n<li>Map 和 WeakMap 是一种[键,值]的集合，Map 的键可以是任意类型，WeakMap 的键只能是对象类型</li>\n<li>Set 和 Map 有遍历方法，WeakSet 和 WeakMap 属于弱引用不可遍历</li>\n</ul>\n","categories":[],"tags":[{"name":"Vue3源码-Set、Map、WeakSet、WeakMap","path":"api/tags/Vue3源码-Set、Map、WeakSet、WeakMap.json"}]}