{"title":"vue源码理解——实例方法篇","slug":"vue源码理解5","date":"2021-03-18T11:29:18.000Z","updated":"2021-09-14T03:40:58.146Z","comments":true,"path":"api/articles/vue源码理解5.json","excerpt":null,"covers":["https://images.unsplash.com/photo-1631473130172-614478b2abd1?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxNzZ8fHxlbnwwfHx8fA==&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60"],"cover":"https://images.unsplash.com/photo-1631473130172-614478b2abd1?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxNzZ8fHxlbnwwfHx8fA==&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60","content":"<p><img src=\"https://images.unsplash.com/photo-1631473130172-614478b2abd1?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxNzZ8fHxlbnwwfHx8fA==&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\" alt=\"img\"></p>\n<h4 id=\"实例方法：\"><a href=\"#实例方法：\" class=\"headerlink\" title=\"实例方法：\"></a>实例方法：</h4><p>与数据相关的实例方法有3个，分别是<code>vm.$set</code>、<code>vm.$delete</code>和<code>vm.$watch</code>。它们是在<code>stateMixin</code>函数中挂载到<code>Vue</code>原型上的，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> &#123;set,del&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../observer/index&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">stateMixin</span> (<span class=\"hljs-params\">Vue</span>) </span>&#123;<br>    Vue.prototype.$set = set<br>    Vue.prototype.$delete = del<br>    Vue.prototype.$watch = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">expOrFn,cb,options</span>) </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当执行<code>stateMixin</code>函数后，会向<code>Vue</code>原型上挂载上述3个实例方法。</p>\n<p>接下来，我们就来分析这3个与数据相关的实例方法其内部的原理都是怎样的</p>\n<h5 id=\"vm-watch\"><a href=\"#vm-watch\" class=\"headerlink\" title=\"vm.$watch\"></a>vm.$watch</h5><h5 id=\"用法回顾\"><a href=\"#用法回顾\" class=\"headerlink\" title=\"用法回顾\"></a>用法回顾</h5><p>在介绍方法的内部原理之前，我们先根据官方文档示例回顾一下它的用法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">vm.$watch( expOrFn, callback, [options] )<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>参数</strong>：</p>\n<ul>\n<li><p><code>&#123;string | Function&#125; expOrFn</code></p>\n</li>\n<li><p><code>&#123;Function | Object&#125; callback</code></p>\n</li>\n<li><pre><code>&#123;Object&#125; [options]\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br>    - &#96;&#123;boolean&#125; deep&#96;<br>    - &#96;&#123;boolean&#125; immediate&#96;<br><br>- **返回值**：&#96;&#123;Function&#125; unwatch&#96;<br><br>- **用法**：<br><br>  观察 &#96;Vue&#96; 实例变化的一个表达式或计算属性函数。回调函数得到的参数为新值和旧值。表达式只接受监督的键路径。对于更复杂的表达式，用一个函数取代。<br><br>  注意：在变异 (不是替换) 对象或数组时，旧值将与新值相同，因为它们的引用指向同一个对象&#x2F;数组。&#96;Vue&#96; 不会保留变异之前值的副本。<br><br>- **示例**：<br><br>  &#96;&#96;&#96;javascript<br>  &#x2F;&#x2F; 键路径<br>  vm.$watch(&#39;a.b.c&#39;, function (newVal, oldVal) &#123;<br>    &#x2F;&#x2F; 做点什么<br>  &#125;)<br>  <br>  &#x2F;&#x2F; 函数<br>  vm.$watch(<br>    function () &#123;<br>      &#x2F;&#x2F; 表达式 &#96;this.a + this.b&#96; 每次得出一个不同的结果时<br>      &#x2F;&#x2F; 处理函数都会被调用。<br>      &#x2F;&#x2F; 这就像监听一个未被定义的计算属性<br>      return this.a + this.b<br>    &#125;,<br>    function (newVal, oldVal) &#123;<br>      &#x2F;&#x2F; 做点什么<br>    &#125;<br>  )<br></code></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<p><code>vm.$watch</code> 返回一个取消观察函数，用来停止触发回调：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> unwatch = vm.$watch(<span class=\"hljs-string\">&#x27;a&#x27;</span>, cb)<br><span class=\"hljs-comment\">// 之后取消观察</span><br>unwatch()<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>选项：deep</strong></p>\n<p>为了发现对象内部值的变化，可以在选项参数中指定 <code>deep: true</code> 。注意监听数组的变动不需要这么做。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">vm.$watch(<span class=\"hljs-string\">&#x27;someObject&#x27;</span>, callback, &#123;<br>  deep: <span class=\"hljs-literal\">true</span><br>&#125;)<br>vm.someObject.nestedValue = <span class=\"hljs-number\">123</span><br><span class=\"hljs-comment\">// callback is fired</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>选项：immediate</strong></p>\n<p>在选项参数中指定 <code>immediate: true</code> 将立即以表达式的当前值触发回调：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">vm.$watch(<span class=\"hljs-string\">&#x27;a&#x27;</span>, callback, &#123;<br>  immediate: <span class=\"hljs-literal\">true</span><br>&#125;)<br><span class=\"hljs-comment\">// 立即以 `a` 的当前值触发回调</span><br></code></pre></td></tr></table></figure>\n\n<p>注意在带有 <code>immediate</code> 选项时，你不能在第一次回调时取消侦听给定的 property。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 这会导致报错</span><br><span class=\"hljs-keyword\">var</span> unwatch = vm.$watch(<br>  <span class=\"hljs-string\">&#x27;value&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    doSomething()<br>    unwatch()<br>  &#125;,<br>  &#123; <span class=\"hljs-attr\">immediate</span>: <span class=\"hljs-literal\">true</span> &#125;<br>)<br></code></pre></td></tr></table></figure>\n\n<p>如果你仍然希望在回调内部调用一个取消侦听的函数，你应该先检查其函数的可用性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> unwatch = vm.$watch(<br>  <span class=\"hljs-string\">&#x27;value&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    doSomething()<br>    <span class=\"hljs-keyword\">if</span> (unwatch) &#123;<br>      unwatch()<br>    &#125;<br>  &#125;,<br>  &#123; <span class=\"hljs-attr\">immediate</span>: <span class=\"hljs-literal\">true</span> &#125;<br>)<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>撸码一时爽，一直撸码一直爽！！！</p>\n","more":"<p><img src=\"https://images.unsplash.com/photo-1631473130172-614478b2abd1?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxNzZ8fHxlbnwwfHx8fA==&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\" alt=\"img\"></p>\n<h4 id=\"实例方法：\"><a href=\"#实例方法：\" class=\"headerlink\" title=\"实例方法：\"></a>实例方法：</h4><p>与数据相关的实例方法有3个，分别是<code>vm.$set</code>、<code>vm.$delete</code>和<code>vm.$watch</code>。它们是在<code>stateMixin</code>函数中挂载到<code>Vue</code>原型上的，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> &#123;set,del&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../observer/index&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">stateMixin</span> (<span class=\"hljs-params\">Vue</span>) </span>&#123;<br>    Vue.prototype.$set = set<br>    Vue.prototype.$delete = del<br>    Vue.prototype.$watch = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">expOrFn,cb,options</span>) </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当执行<code>stateMixin</code>函数后，会向<code>Vue</code>原型上挂载上述3个实例方法。</p>\n<p>接下来，我们就来分析这3个与数据相关的实例方法其内部的原理都是怎样的</p>\n<h5 id=\"vm-watch\"><a href=\"#vm-watch\" class=\"headerlink\" title=\"vm.$watch\"></a>vm.$watch</h5><h5 id=\"用法回顾\"><a href=\"#用法回顾\" class=\"headerlink\" title=\"用法回顾\"></a>用法回顾</h5><p>在介绍方法的内部原理之前，我们先根据官方文档示例回顾一下它的用法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">vm.$watch( expOrFn, callback, [options] )<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>参数</strong>：</p>\n<ul>\n<li><p><code>&#123;string | Function&#125; expOrFn</code></p>\n</li>\n<li><p><code>&#123;Function | Object&#125; callback</code></p>\n</li>\n<li><pre><code>&#123;Object&#125; [options]\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br>    - &#96;&#123;boolean&#125; deep&#96;<br>    - &#96;&#123;boolean&#125; immediate&#96;<br><br>- **返回值**：&#96;&#123;Function&#125; unwatch&#96;<br><br>- **用法**：<br><br>  观察 &#96;Vue&#96; 实例变化的一个表达式或计算属性函数。回调函数得到的参数为新值和旧值。表达式只接受监督的键路径。对于更复杂的表达式，用一个函数取代。<br><br>  注意：在变异 (不是替换) 对象或数组时，旧值将与新值相同，因为它们的引用指向同一个对象&#x2F;数组。&#96;Vue&#96; 不会保留变异之前值的副本。<br><br>- **示例**：<br><br>  &#96;&#96;&#96;javascript<br>  &#x2F;&#x2F; 键路径<br>  vm.$watch(&#39;a.b.c&#39;, function (newVal, oldVal) &#123;<br>    &#x2F;&#x2F; 做点什么<br>  &#125;)<br>  <br>  &#x2F;&#x2F; 函数<br>  vm.$watch(<br>    function () &#123;<br>      &#x2F;&#x2F; 表达式 &#96;this.a + this.b&#96; 每次得出一个不同的结果时<br>      &#x2F;&#x2F; 处理函数都会被调用。<br>      &#x2F;&#x2F; 这就像监听一个未被定义的计算属性<br>      return this.a + this.b<br>    &#125;,<br>    function (newVal, oldVal) &#123;<br>      &#x2F;&#x2F; 做点什么<br>    &#125;<br>  )<br></code></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<p><code>vm.$watch</code> 返回一个取消观察函数，用来停止触发回调：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> unwatch = vm.$watch(<span class=\"hljs-string\">&#x27;a&#x27;</span>, cb)<br><span class=\"hljs-comment\">// 之后取消观察</span><br>unwatch()<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>选项：deep</strong></p>\n<p>为了发现对象内部值的变化，可以在选项参数中指定 <code>deep: true</code> 。注意监听数组的变动不需要这么做。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">vm.$watch(<span class=\"hljs-string\">&#x27;someObject&#x27;</span>, callback, &#123;<br>  deep: <span class=\"hljs-literal\">true</span><br>&#125;)<br>vm.someObject.nestedValue = <span class=\"hljs-number\">123</span><br><span class=\"hljs-comment\">// callback is fired</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>选项：immediate</strong></p>\n<p>在选项参数中指定 <code>immediate: true</code> 将立即以表达式的当前值触发回调：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">vm.$watch(<span class=\"hljs-string\">&#x27;a&#x27;</span>, callback, &#123;<br>  immediate: <span class=\"hljs-literal\">true</span><br>&#125;)<br><span class=\"hljs-comment\">// 立即以 `a` 的当前值触发回调</span><br></code></pre></td></tr></table></figure>\n\n<p>注意在带有 <code>immediate</code> 选项时，你不能在第一次回调时取消侦听给定的 property。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 这会导致报错</span><br><span class=\"hljs-keyword\">var</span> unwatch = vm.$watch(<br>  <span class=\"hljs-string\">&#x27;value&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    doSomething()<br>    unwatch()<br>  &#125;,<br>  &#123; <span class=\"hljs-attr\">immediate</span>: <span class=\"hljs-literal\">true</span> &#125;<br>)<br></code></pre></td></tr></table></figure>\n\n<p>如果你仍然希望在回调内部调用一个取消侦听的函数，你应该先检查其函数的可用性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> unwatch = vm.$watch(<br>  <span class=\"hljs-string\">&#x27;value&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    doSomething()<br>    <span class=\"hljs-keyword\">if</span> (unwatch) &#123;<br>      unwatch()<br>    &#125;<br>  &#125;,<br>  &#123; <span class=\"hljs-attr\">immediate</span>: <span class=\"hljs-literal\">true</span> &#125;<br>)<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>撸码一时爽，一直撸码一直爽！！！</p>\n","categories":[],"tags":[{"name":"vue源码理解——实例方法篇","path":"api/tags/vue源码理解——实例方法篇.json"}]}